tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:35:04.906 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:35:04.907 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 218 CVE-2014-3707
filter_and_generate_data_items:  29%|██▉       | 141/489 [00:00<00:00, 1403.71it/s]2024-04-26 03:35:23.312 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_freeset, 1, 0
2024-04-26 03:35:23.313 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['void Curl_freeset(struct SessionHandle *data)', '{', 'enum dupstring i;', 'for(i=(enum dupstring)0; i < STRING_LAST; i++)', 'Curl_safefree(data->set.str[i]);', 'if(data->change.referer_alloc) {', 'Curl_safefree(data->change.referer);', 'data->change.referer_alloc = FALSE;', '}', 'data->change.referer = NULL;', 'if(data->change.url_alloc) {', 'Curl_safefree(data->change.url);', 'data->change.url_alloc = FALSE;', '}', 'data->change.url = NULL;', '}']
2024-04-26 03:35:23.314 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r12', 'mov r12,rdi', 'push rbp', 'lea rbp,<MEM>', 'push rbx', 'lea rbx,<MEM>', 'nop <MEM>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'add rbx,0x8', 'cmp rbp,rbx', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'pop rbx', 'pop rbp', 'pop r12', 'ret', 'data16 nop cs:<MEM>', 'nop <MEM>']
filter_and_generate_data_items: 100%|██████████| 489/489 [00:00<00:00, 1430.25it/s]
2024-04-26 03:35:25.126 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 489 ---> 221
2024-04-26 03:35:25.128 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['Curl_freeset']
2024-04-26 03:35:25.129 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['Curl_freeset']
2024-04-26 03:35:25.130 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.63s/it]
2024-04-26 03:35:29.140 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.31486454606056213, Curl_freeset ---> imap_done
2024-04-26 03:35:29.141 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 8 ---> 1
2024-04-26 03:35:29.141 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:35:29.141 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:35:29.141 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:35:29.141 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:35:29.142 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:35:29.142 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:35:29.142 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 219 CVE-2016-8617
filter_and_generate_data_items:   0%|          | 0/583 [00:00<?, ?it/s]2024-04-26 03:35:47.527 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: base64_encode, 6, 2
2024-04-26 03:35:47.529 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static CURLcode base64_encode(const char *table64,', 'struct Curl_easy *data,', 'const char *inputbuff, size_t insize,', 'char **outptr, size_t *outlen)', '{', 'CURLcode result;', 'unsigned char ibuf[3];', 'unsigned char obuf[4];', 'int i;', 'int inputparts;', 'char *output;', 'char *base64data;', 'char *convbuf = NULL;', 'const char *indata = inputbuff;', '*outptr = NULL;', '*outlen = 0;', 'if(!insize)', 'insize = strlen(indata);', 'base64data = output = malloc(insize * 4 / 3 + 4);', 'if(!output)', 'return CURLE_OUT_OF_MEMORY;', 'result = Curl_convert_clone(data, indata, insize, &convbuf);', 'if(result) {', 'free(output);', 'return result;', '}', 'if(convbuf)', 'indata = (char *)convbuf;', 'while(insize > 0) {', 'for(i = inputparts = 0; i < 3; i++) {', 'if(insize > 0) {', 'inputparts++;', 'ibuf[i] = (unsigned char) *indata;', 'indata++;', 'insize--;', '}', 'else', 'ibuf[i] = 0;', '}', 'obuf[0] = (unsigned char)  ((ibuf[0] & 0xFC) >> 2);', 'obuf[1] = (unsigned char) (((ibuf[0] & 0x03) << 4) | \\', '((ibuf[1] & 0xF0) >> 4));', 'obuf[2] = (unsigned char) (((ibuf[1] & 0x0F) << 2) | \\', '((ibuf[2] & 0xC0) >> 6));', 'obuf[3] = (unsigned char)   (ibuf[2] & 0x3F);', 'switch(inputparts) {', 'snprintf(output, 5, "STR",', 'table64[obuf[0]],', 'table64[obuf[1]]);', 'break;', 'snprintf(output, 5, "STR",', 'table64[obuf[0]],', 'table64[obuf[1]],', 'table64[obuf[2]]);', 'break;', 'default:', 'snprintf(output, 5, "STR",', 'table64[obuf[0]],', 'table64[obuf[1]],', 'table64[obuf[2]],', 'table64[obuf[3]]);', 'break;', '}', 'output += 4;', '}', "*output = '\\0';", '*outptr = base64data;', 'free(convbuf);', '*outlen = strlen(base64data);', 'return CURLE_OK;', '}']
2024-04-26 03:35:47.530 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'mov r15,rsi', 'push r14', 'push r13', 'mov r13,rdi', 'push r12', 'push rbp', 'push rbx', 'sub rsp,0x28', 'mov <MEM>,rcx', 'mov <MEM>,r8', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'test rdx,rdx', '<JUMP> <LOC>', 'mov rdi,rsi', 'call <strlen@plt>', 'movabs rcx,0xaaaaaaaaaaaaaaab', 'lea rdx,<MEM>', 'mov rbx,rax', 'mov rax,rdx', 'mul rcx', 'lea rax,<MEM>', 'shr rdx,1', 'lea rdi,<MEM>', 'call <MEM>', 'mov r12,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r14,rax', 'test rbx,rbx', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'xor edi,edi', 'mov <MEM>,r14', 'lea rax,<MEM>', 'call <MEM>', 'mov rdi,r14', 'call <strlen@plt>', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'xor eax,eax', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x28', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'movabs rcx,0xaaaaaaaaaaaaaaab', 'mov rbx,rdx', 'lea rdx,<MEM>', 'mov rax,rdx', 'mul rcx', 'lea rax,<MEM>', 'shr rdx,1', 'lea rdi,<MEM>', 'call <MEM>', 'mov r12,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r14,rax', 'lea rbp,<MEM>', 'nop', 'lea rcx,<MEM>', 'mov eax,0x1', 'lea edx,<MEM>', 'mov esi,eax', 'cmp rcx,rax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'add r15,0x1', 'mov <MEM>,dl', 'mov rdx,rbx', 'sub rdx,rax', 'add rax,0x1', 'cmp rax,0x4', '<JUMP> <LOC>', 'mov rbx,rdx', 'movzx r8d,<MEM>', 'movzx r9d,<MEM>', 'movzx edx,<MEM>', 'lea ecx,<MEM>', 'mov eax,r9d', 'shr r8b,0x4', 'shr al,0x6', 'and ecx,0x3c', 'or ecx,eax', 'mov eax,edx', 'shr dl,0x2', 'shl eax,0x4', 'movzx edx,dl', 'and eax,0x30', 'movsx r11d,<MEM>', 'or eax,r8d', 'movsx rax,al', 'movsx r8d,<MEM>', 'cmp esi,0x1', '<JUMP> <LOC>', 'cmp esi,0x2', '<JUMP> <LOC>', 'and r9d,0x3f', 'sub rsp,0x8', 'movsx rcx,cl', 'mov rdi,r12', 'movsx eax,<MEM>', 'movsx r9d,<MEM>', 'mov esi,0x5', 'mov ecx,r11d', 'lea rdx,<MEM>', 'push rax', 'xor eax,eax', 'call <curl_msnprintf@plt>', 'pop rax', 'pop rdx', 'add r12,0x4', 'test rbx,rbx', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'movsxd rax,edx', 'lea rcx,<MEM>', 'mov <MEM>,0x0', 'add rax,0x1', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov esi,edx', 'xor ebx,ebx', '<JUMP> <LOC>', 'nop cs:<MEM>', 'movsx rcx,cl', 'lea rdx,<MEM>', 'mov rdi,r12', 'xor eax,eax', 'movsx r9d,<MEM>', 'mov esi,0x5', 'mov ecx,r11d', 'call <curl_msnprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov ecx,r11d', 'lea rdx,<MEM>', 'mov rdi,r12', 'xor eax,eax', 'mov esi,0x5', 'call <curl_msnprintf@plt>', '<JUMP> <LOC>', 'mov eax,0x1b', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'data16 nop cs:<MEM>']
filter_and_generate_data_items: 100%|██████████| 583/583 [00:00<00:00, 1340.56it/s]
2024-04-26 03:35:49.332 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 583 ---> 0
2024-04-26 03:35:49.334 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['base64_encode']
2024-04-26 03:35:49.335 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['base64_encode']
2024-04-26 03:35:49.336 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
2024-04-26 03:35:49.338 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:35:49.338 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:35:49.339 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:35:49.340 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:35:49.340 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:35:49.341 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:35:49.341 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 220 CVE-2016-8618
confirming functions(batch_size: 128):: 0it [00:00, ?it/s]
filter_and_generate_data_items:  28%|██▊       | 166/583 [00:00<00:00, 1590.76it/s]2024-04-26 03:36:07.671 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: alloc_addbyter, 2, 1
2024-04-26 03:36:07.672 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int alloc_addbyter(int output, FILE *data)', '{', 'struct asprintf *infop=(struct asprintf *)data;', 'unsigned char outc = (unsigned char)output;', 'if(!infop->buffer) {', 'infop->buffer = malloc(32);', 'if(!infop->buffer) {', 'infop->fail = 1;', '}', 'infop->alloc = 32;', 'infop->len =0;', '}', 'else if(infop->len+1 >= infop->alloc) {', 'char *newptr;', 'newptr = realloc(infop->buffer, infop->alloc*2);', 'if(!newptr) {', 'infop->fail = 1;', '}', 'infop->buffer = newptr;', 'infop->alloc *= 2;', '}', 'infop->buffer[ infop->len ] = outc;', 'infop->len++;', '}']
2024-04-26 03:36:07.673 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov ebp,edi', 'push rbx', 'mov rbx,rsi', 'sub rsp,0x8', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'lea rdx,<MEM>', 'add rax,rdi', 'cmp rdx,rsi', '<JUMP> <LOC>', 'mov <MEM>,bpl', 'movzx eax,bpl', 'add <MEM>,0x1', 'add rsp,0x8', 'pop rbx', 'pop rbp', 'ret', 'xchg ax,ax', 'lea rax,<MEM>', 'add rsi,rsi', 'call <MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', 'add rax,<MEM>', 'shl <MEM>,1', '<JUMP> <LOC>', 'xchg ax,ax', 'lea rax,<MEM>', 'mov edi,0x20', 'call <MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x20', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x1', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'nop cs:<MEM>']
filter_and_generate_data_items: 100%|██████████| 583/583 [00:00<00:00, 2196.05it/s]
2024-04-26 03:36:09.433 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 583 ---> 19
2024-04-26 03:36:09.435 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['alloc_addbyter']
2024-04-26 03:36:09.436 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['alloc_addbyter']
2024-04-26 03:36:09.437 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.33it/s]
2024-04-26 03:36:10.101 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.3112817108631134, alloc_addbyter ---> Curl_client_chop_write
2024-04-26 03:36:10.101 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:36:10.101 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:36:10.102 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:36:10.102 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:36:10.102 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:36:10.102 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:36:10.103 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:36:10.103 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 03:36:10.103 | SUCCESS  | __main__:run_experiment:651 - 	total: 220
2024-04-26 03:36:10.103 | SUCCESS  | __main__:run_experiment:652 - over filter count: 10, 4.55%
2024-04-26 03:36:10.103 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 190, 86.36%
2024-04-26 03:36:10.104 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 168, 76.36%
2024-04-26 03:36:10.104 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 135, 61.36%
2024-04-26 03:36:10.104 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 41, 18.64%
2024-04-26 03:36:10.104 | SUCCESS  | __main__:run_experiment:662 - 	tp: 41, fp: 0, tn: 0, fn: 179
2024-04-26 03:36:10.104 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 03:36:10.104 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.18636363636363637
2024-04-26 03:36:10.105 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.314176245210728
2024-04-26 03:36:10.105 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.18636363636363637
generate_asm_function_cache: 100%|██████████| 18/18 [00:11<00:00,  1.53it/s]
2024-04-26 03:36:54.990 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 03:36:54.991 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 221 CVE-2016-8623
filter_and_generate_data_items:  13%|█▎        | 78/583 [00:00<00:00, 770.94it/s]2024-04-26 03:37:03.187 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_http, 2, 1
2024-04-26 03:37:03.189 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['CURLcode Curl_http(struct connectdata *conn, bool *done)', '{', 'struct Curl_easy *data = conn->data;', 'CURLcode result = CURLE_OK;', 'struct HTTP *http;', 'const char *ppath = data->state.path;', 'bool paste_ftp_userpwd = FALSE;', 'char ftp_typecode[sizeof("STR")] = "STR";', 'const char *host = conn->host.name;', 'const char *ptr;', 'const char *request;', 'Curl_HttpReq httpreq = data->set.httpreq;', '#if !defined(CURL_DISABLE_COOKIES)', 'char *addcookies = NULL;', '#endif', 'curl_off_t included_body = 0;', 'const char *httpstring;', 'Curl_send_buffer *req_buffer;', 'int seekerr = CURL_SEEKFUNC_OK;', 'may be parts of the request that is not yet sent, since we can deal with', '*done = TRUE;', 'if(conn->httpversion < 20) { /* unless the connection is re-used and already', 'switch(conn->negnpn) {', 'case CURL_HTTP_VERSION_2:', 'result = Curl_http2_switched(conn, NULL, 0);', 'if(result)', 'return result;', 'break;', 'case CURL_HTTP_VERSION_1_1:', 'break;', 'default:', '#ifdef USE_NGHTTP2', 'if(conn->data->set.httpversion ==', 'CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE) {', 'DEBUGF(infof(data, "STR"));', 'conn->httpversion = 20;', 'result = Curl_http2_switched(conn, NULL, 0);', 'if(result)', 'return result;', '}', '#endif', 'break;', '}', '}', 'else {', 'result = Curl_http2_setup(conn);', 'if(result)', 'return result;', '}', 'http = data->req.protop;', 'if(!data->state.this_is_a_follow) {', 'free(data->state.first_host);', 'data->state.first_host = strdup(conn->host.name);', 'if(!data->state.first_host)', 'return CURLE_OUT_OF_MEMORY;', 'data->state.first_remote_port = conn->remote_port;', '}', 'http->writebytecount = http->readbytecount = 0;', 'if((conn->handler->protocol&(PROTO_FAMILY_HTTP|CURLPROTO_FTP)) &&', 'data->set.upload) {', 'httpreq = HTTPREQ_PUT;', '}', 'if(data->set.str[STRING_CUSTOMREQUEST])', 'request = data->set.str[STRING_CUSTOMREQUEST];', 'else {', 'if(data->set.opt_no_body)', 'request = "STR";', 'else {', 'DEBUGASSERT((httpreq > HTTPREQ_NONE) && (httpreq < HTTPREQ_LAST));', 'switch(httpreq) {', 'case HTTPREQ_POST:', 'case HTTPREQ_POST_FORM:', 'request = "STR";', 'break;', 'case HTTPREQ_PUT:', 'request = "STR";', 'break;', 'case HTTPREQ_GET:', 'request = "STR";', 'break;', 'case HTTPREQ_HEAD:', 'request = "STR";', 'break;', '}', '}', '}', 'it might have been used in the proxy connect, but if we have got a header', 'with the user-agent string specified, we erase the previously made string', 'if(Curl_checkheaders(conn, "STR")) {', 'free(conn->allocptr.uagent);', 'conn->allocptr.uagent=NULL;', '}', 'result = Curl_http_output_auth(conn, request, ppath, FALSE);', 'if(result)', 'return result;', 'if((data->state.authhost.multi || data->state.authproxy.multi) &&', '(httpreq != HTTPREQ_GET) &&', '(httpreq != HTTPREQ_HEAD)) {', 'conn->bits.authneg = TRUE;', '}', 'else', 'conn->bits.authneg = FALSE;', 'Curl_safefree(conn->allocptr.ref);', 'if(data->change.referer && !Curl_checkheaders(conn, "STR")) {', 'conn->allocptr.ref = aprintf("STR", data->change.referer);', 'if(!conn->allocptr.ref)', 'return CURLE_OUT_OF_MEMORY;', '}', 'else', 'conn->allocptr.ref = NULL;', '#if !defined(CURL_DISABLE_COOKIES)', 'if(data->set.str[STRING_COOKIE] && !Curl_checkheaders(conn, "STR"))', 'addcookies = data->set.str[STRING_COOKIE];', '#endif', 'if(!Curl_checkheaders(conn, "STR") &&', 'data->set.str[STRING_ENCODING]) {', 'Curl_safefree(conn->allocptr.accept_encoding);', 'conn->allocptr.accept_encoding =', 'aprintf("STR", data->set.str[STRING_ENCODING]);', 'if(!conn->allocptr.accept_encoding)', 'return CURLE_OUT_OF_MEMORY;', '}', 'else {', 'Curl_safefree(conn->allocptr.accept_encoding);', 'conn->allocptr.accept_encoding = NULL;', '}', '#ifdef HAVE_LIBZ', 'if(!Curl_checkheaders(conn, "STR") &&', 'data->set.http_transfer_encoding) {', 'TE in a Connection: header, so we need to merge the custom provided', 'Connection: header and prevent the original to get sent. Note that if', "the user has inserted his/hers own TE: header we don't do this magic", 'char *cptr = Curl_checkheaders(conn, "STR");', '#define TE_HEADER "STR"', 'Curl_safefree(conn->allocptr.te);', 'conn->allocptr.te = cptr? aprintf("STR" TE_HEADER, cptr):', 'strdup("STR" TE_HEADER);', 'if(!conn->allocptr.te)', 'return CURLE_OUT_OF_MEMORY;', '}', '#endif', 'if(conn->httpversion == 20)', 'ptr = NULL;', 'else {', 'ptr = Curl_checkheaders(conn, "STR");', 'if(ptr) {', 'data->req.upload_chunky =', 'Curl_compareheader(ptr, "STR", "STR");', '}', 'else {', 'if((conn->handler->protocol&PROTO_FAMILY_HTTP) &&', 'data->set.upload &&', '(data->state.infilesize == -1)) {', 'if(conn->bits.authneg)', ';', 'else if(use_http_1_1plus(data, conn)) {', 'data->req.upload_chunky = TRUE;', '}', 'else {', 'failf(data, "STR");', 'return CURLE_UPLOAD_FAILED;', '}', '}', 'else {', 'data->req.upload_chunky = FALSE;', '}', 'if(data->req.upload_chunky)', 'te = "STR";', '}', '}', 'Curl_safefree(conn->allocptr.host);', 'ptr = Curl_checkheaders(conn, "STR");', 'if(ptr && (!data->state.this_is_a_follow ||', 'Curl_raw_equal(data->state.first_host, conn->host.name))) {', '#if !defined(CURL_DISABLE_COOKIES)', 'order to possibly use it for cookie reasons later on. We only allow the', 'custom Host: header if this is NOT a redirect, as setting Host: in the', 'redirected request is being out on thin ice. Except if the host name', 'char *cookiehost = Curl_copy_header_value(ptr);', 'if(!cookiehost)', 'return CURLE_OUT_OF_MEMORY;', 'if(!*cookiehost)', 'free(cookiehost);', 'else {', 'int startsearch = 0;', "if(*cookiehost == '[') {", 'char *closingbracket;', 'memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);', "closingbracket = strchr(cookiehost, ']');", 'if(closingbracket)', '*closingbracket = 0;', '}', 'else {', "char *colon = strchr(cookiehost + startsearch, ':');", 'if(colon)', '}', 'Curl_safefree(conn->allocptr.cookiehost);', 'conn->allocptr.cookiehost = cookiehost;', '}', '#endif', 'if(strcmp("STR", ptr)) {', 'conn->allocptr.host = aprintf("STR", ptr);', 'if(!conn->allocptr.host)', 'return CURLE_OUT_OF_MEMORY;', '}', 'else', 'conn->allocptr.host = NULL;', '}', 'else {', 'if(((conn->given->protocol&CURLPROTO_HTTPS) &&', '(conn->remote_port == PORT_HTTPS)) ||', '((conn->given->protocol&CURLPROTO_HTTP) &&', '(conn->remote_port == PORT_HTTP)) )', 'conn->allocptr.host = aprintf("STR",', 'conn->bits.ipv6_ip?"STR":"STR",', 'host,', 'conn->bits.ipv6_ip?"STR":"STR");', 'else', 'conn->allocptr.host = aprintf("STR",', 'conn->bits.ipv6_ip?"STR":"STR",', 'host,', 'conn->bits.ipv6_ip?"STR":"STR",', 'conn->remote_port);', 'if(!conn->allocptr.host)', 'return CURLE_OUT_OF_MEMORY;', '}', '#ifndef CURL_DISABLE_PROXY', 'if(conn->bits.httpproxy && !conn->bits.tunnel_proxy)  {', 'host is a IDN-name, we must make sure that the request we produce only', 'if(conn->host.dispname != conn->host.name) {', 'char *url = data->change.url;', 'ptr = strstr(url, conn->host.dispname);', 'if(ptr) {', 'part with the encoded name. TODO: This method of replacing the host', "name is rather crude as I believe there's a slight risk that the", 'user has entered a user name or password that contain the host name', 'size_t currlen = strlen(conn->host.dispname);', 'size_t newlen = strlen(conn->host.name);', 'size_t urllen = strlen(url);', 'char *newurl;', 'newurl = malloc(urllen + newlen - currlen + 1);', 'if(newurl) {', 'memcpy(newurl, url, ptr - url);', 'memcpy(newurl + (ptr - url), conn->host.name, newlen);', 'memcpy(newurl + newlen + (ptr - url),', 'urllen - (ptr-url) - currlen + 1);', 'if(data->change.url_alloc) {', 'Curl_safefree(data->change.url);', 'data->change.url_alloc = FALSE;', '}', 'data->change.url = newurl;', 'data->change.url_alloc = TRUE;', '}', 'else', 'return CURLE_OUT_OF_MEMORY;', '}', '}', 'ppath = data->change.url;', 'if(checkprefix("STR", ppath)) {', 'if(data->set.proxy_transfer_mode) {', 'char *type = strstr(ppath, "STR");', 'if(type && type[6] && type[7] == 0) {', 'switch (Curl_raw_toupper(type[6])) {', "case 'A':", "case 'D':", "case 'I':", 'break;', 'default:', 'type = NULL;', '}', '}', 'if(!type) {', 'char *p = ftp_typecode;', "if(!*data->state.path && ppath[strlen(ppath) - 1] != '/') {", "*p++ = '/';", '}', 'snprintf(p, sizeof(ftp_typecode) - 1, "STR",', "data->set.prefer_ascii ? 'a' : 'i');", '}', '}', 'if(conn->bits.user_passwd && !conn->bits.userpwd_in_url)', 'paste_ftp_userpwd = TRUE;', '}', '}', 'if(HTTPREQ_POST_FORM == httpreq) {', 'result = Curl_getformdata(data, &http->sendit, data->set.httppost,', 'Curl_checkheaders(conn, "STR"),', '&http->postsize);', 'if(result)', 'return result;', '}', 'http->p_accept = Curl_checkheaders(conn, "STR")?NULL:"STR";', 'if(( (HTTPREQ_POST == httpreq) ||', '(HTTPREQ_POST_FORM == httpreq) ||', '(HTTPREQ_PUT == httpreq) ) &&', 'data->state.resume_from) {', 'if(data->state.resume_from < 0) {', 'data->state.resume_from = 0;', '}', 'if(data->state.resume_from && !data->state.this_is_a_follow) {', 'if(conn->seek_func) {', 'seekerr = conn->seek_func(conn->seek_client, data->state.resume_from,', 'SEEK_SET);', '}', 'if(seekerr != CURL_SEEKFUNC_OK) {', 'if(seekerr != CURL_SEEKFUNC_CANTSEEK) {', 'failf(data, "STR");', 'return CURLE_READ_ERROR;', '}', 'else {', 'curl_off_t passed=0;', 'do {', 'size_t readthisamountnow =', '(data->state.resume_from - passed > CURL_OFF_T_C(BUFSIZE)) ?', 'BUFSIZE : curlx_sotouz(data->state.resume_from - passed);', 'size_t actuallyread =', 'data->state.fread_func(data->state.buffer, 1, readthisamountnow,', 'data->state.in);', 'passed += actuallyread;', 'if((actuallyread == 0) || (actuallyread > readthisamountnow)) {', 'failf(data, "STR" CURL_FORMAT_CURL_OFF_T', '"STR", passed);', 'return CURLE_READ_ERROR;', '}', '} while(passed < data->state.resume_from);', '}', '}', 'if(data->state.infilesize>0) {', 'data->state.infilesize -= data->state.resume_from;', 'if(data->state.infilesize <= 0) {', 'failf(data, "STR");', 'return CURLE_PARTIAL_FILE;', '}', '}', '}', '}', 'if(data->state.use_range) {', 'if(((httpreq == HTTPREQ_GET) || (httpreq == HTTPREQ_HEAD)) &&', '!Curl_checkheaders(conn, "STR")) {', 'free(conn->allocptr.rangeline);', 'conn->allocptr.rangeline = aprintf("STR",', 'data->state.range);', '}', 'else if((httpreq != HTTPREQ_GET) &&', '!Curl_checkheaders(conn, "STR")) {', 'free(conn->allocptr.rangeline);', 'if(data->set.set_resume_from < 0) {', 'remote part so we tell the server (and act accordingly) that we', 'conn->allocptr.rangeline =', 'aprintf("STR" CURL_FORMAT_CURL_OFF_T', '"STR" CURL_FORMAT_CURL_OFF_T "STR",', 'data->state.infilesize - 1, data->state.infilesize);', '}', 'else if(data->state.resume_from) {', 'curl_off_t total_expected_size=', 'data->state.resume_from + data->state.infilesize;', 'conn->allocptr.rangeline =', 'aprintf("STR" CURL_FORMAT_CURL_OFF_T', '"STR" CURL_FORMAT_CURL_OFF_T "STR",', 'data->state.range, total_expected_size-1,', 'total_expected_size);', '}', 'else {', 'conn->allocptr.rangeline =', 'aprintf("STR" CURL_FORMAT_CURL_OFF_T "STR",', 'data->state.range, data->state.infilesize);', '}', 'if(!conn->allocptr.rangeline)', 'return CURLE_OUT_OF_MEMORY;', '}', '}', 'httpstring= use_http_1_1plus(data, conn)?"STR":"STR";', 'req_buffer = Curl_add_buffer_init();', 'if(!req_buffer)', 'return CURLE_OUT_OF_MEMORY;', 'result = Curl_add_bufferf(req_buffer, "STR", request);', 'if(result)', 'return result;', 'if(paste_ftp_userpwd)', 'result = Curl_add_bufferf(req_buffer, "STR",', 'conn->user, conn->passwd,', 'ppath + sizeof("STR") - 1);', 'else', 'result = Curl_add_buffer(req_buffer, ppath, strlen(ppath));', 'if(result)', 'return result;', 'result =', 'Curl_add_bufferf(req_buffer,', 'ftp_typecode,', 'httpstring,', '(conn->allocptr.host?conn->allocptr.host:"STR"),', 'conn->allocptr.proxyuserpwd?', 'conn->allocptr.proxyuserpwd:"STR",', 'conn->allocptr.userpwd?conn->allocptr.userpwd:"STR",', '(data->state.use_range && conn->allocptr.rangeline)?', 'conn->allocptr.rangeline:"STR",', '(data->set.str[STRING_USERAGENT] &&', '*data->set.str[STRING_USERAGENT] &&', 'conn->allocptr.uagent)?', 'conn->allocptr.uagent:"STR",', 'http->p_accept?http->p_accept:"STR",', 'conn->allocptr.te?conn->allocptr.te:"STR",', '(data->set.str[STRING_ENCODING] &&', '*data->set.str[STRING_ENCODING] &&', 'conn->allocptr.accept_encoding)?', 'conn->allocptr.accept_encoding:"STR",', '(data->change.referer && conn->allocptr.ref)?', 'conn->allocptr.ref:"STR" ,', '(conn->bits.httpproxy &&', '!conn->bits.tunnel_proxy &&', '!Curl_checkProxyheaders(conn, "STR"))?', '"STR":"STR",', 'te', ');', 'Curl_safefree(conn->allocptr.userpwd);', 'switch (data->state.authproxy.picked) {', 'case CURLAUTH_NEGOTIATE:', 'case CURLAUTH_NTLM:', 'case CURLAUTH_NTLM_WB:', 'Curl_safefree(conn->allocptr.proxyuserpwd);', 'break;', '}', 'if(result)', 'return result;', 'if(!(conn->handler->flags&PROTOPT_SSL) &&', 'conn->httpversion != 20 &&', '(data->set.httpversion == CURL_HTTP_VERSION_2)) {', 'result = Curl_http2_request_upgrade(req_buffer, conn);', 'if(result)', 'return result;', '}', '#if !defined(CURL_DISABLE_COOKIES)', 'if(data->cookies || addcookies) {', 'int count=0;', 'if(data->cookies) {', 'Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);', 'co = Curl_cookie_getlist(data->cookies,', 'conn->allocptr.cookiehost?', 'conn->allocptr.cookiehost:host,', 'data->state.path,', '(conn->handler->protocol&CURLPROTO_HTTPS)?', 'TRUE:FALSE);', 'Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);', '}', 'if(co) {', 'struct Cookie *store=co;', 'while(co) {', 'if(co->value) {', 'if(0 == count) {', 'result = Curl_add_bufferf(req_buffer, "STR");', 'if(result)', 'break;', '}', 'result = Curl_add_bufferf(req_buffer,', '"STR", count?"STR":"STR",', 'co->name, co->value);', 'if(result)', 'break;', 'count++;', '}', '}', '}', 'if(addcookies && !result) {', 'if(!count)', 'result = Curl_add_bufferf(req_buffer, "STR");', 'if(!result) {', 'result = Curl_add_bufferf(req_buffer, "STR", count?"STR":"STR",', 'addcookies);', 'count++;', '}', '}', 'if(count && !result)', 'result = Curl_add_buffer(req_buffer, "STR", 2);', 'if(result)', 'return result;', '}', '#endif', 'result = Curl_add_timecondition(data, req_buffer);', 'if(result)', 'return result;', 'result = Curl_add_custom_headers(conn, FALSE, req_buffer);', 'if(result)', 'return result;', "Curl_transfer() call below, as we're not ready to actually upload any", 'switch(httpreq) {', 'case HTTPREQ_POST_FORM:', 'if(!http->sendit || conn->bits.authneg) {', 'result = Curl_add_bufferf(req_buffer, "STR");', 'if(result)', 'return result;', 'result = Curl_add_buffer_send(req_buffer, conn,', '&data->info.request_size, 0, FIRSTSOCKET);', 'if(result)', 'failf(data, "STR");', 'else', 'Curl_setup_transfer(conn, FIRSTSOCKET, -1, TRUE, &http->readbytecount,', '-1, NULL);', 'break;', '}', 'if(Curl_FormInit(&http->form, http->sendit)) {', 'failf(data, "STR");', 'return CURLE_HTTP_POST_ERROR;', '}', 'form struct since we might want the actual user-provided callback later', 'on. The data->set.fread_func pointer itself will be changed for the', 'multipart case to the function that returns a multipart formatted', 'http->form.fread_func = data->state.fread_func;', 'data->state.fread_func = (curl_read_callback)Curl_FormReader;', 'data->state.in = &http->form;', 'http->sending = HTTPSEND_BODY;', 'if(!data->req.upload_chunky &&', '!Curl_checkheaders(conn, "STR")) {', 'result = Curl_add_bufferf(req_buffer,', '"STR" CURL_FORMAT_CURL_OFF_T', '"STR", http->postsize);', 'if(result)', 'return result;', '}', 'result = expect100(data, conn, req_buffer);', 'if(result)', 'return result;', '{', 'char *contentType;', 'size_t linelength=0;', 'contentType = Curl_formpostheader((void *)&http->form,', '&linelength);', 'if(!contentType) {', 'failf(data, "STR");', 'return CURLE_HTTP_POST_ERROR;', '}', 'result = Curl_add_buffer(req_buffer, contentType, linelength);', 'if(result)', 'return result;', '}', 'result = Curl_add_buffer(req_buffer, "STR", 2);', 'if(result)', 'return result;', 'Curl_pgrsSetUploadSize(data, http->postsize);', 'result = Curl_add_buffer_send(req_buffer, conn,', '&data->info.request_size, 0, FIRSTSOCKET);', 'if(result)', 'failf(data, "STR");', 'else', 'Curl_setup_transfer(conn, FIRSTSOCKET, -1, TRUE,', '&http->readbytecount, FIRSTSOCKET,', '&http->writebytecount);', 'if(result) {', 'return result;', '}', 'result = Curl_convert_form(data, http->sendit);', 'if(result) {', 'return result;', '}', 'break;', 'if(conn->bits.authneg)', 'postsize = 0;', 'else', 'postsize = data->state.infilesize;', 'if((postsize != -1) && !data->req.upload_chunky &&', '!Curl_checkheaders(conn, "STR")) {', 'result = Curl_add_bufferf(req_buffer,', '"STR" CURL_FORMAT_CURL_OFF_T', '"STR", postsize);', 'if(result)', 'return result;', '}', 'if(postsize != 0) {', 'result = expect100(data, conn, req_buffer);', 'if(result)', 'return result;', '}', 'if(result)', 'return result;', 'Curl_pgrsSetUploadSize(data, postsize);', 'result = Curl_add_buffer_send(req_buffer, conn,', '&data->info.request_size, 0, FIRSTSOCKET);', 'if(result)', 'failf(data, "STR");', 'else', 'Curl_setup_transfer(conn, FIRSTSOCKET, -1, TRUE,', '&http->readbytecount, postsize?FIRSTSOCKET:-1,', 'postsize?&http->writebytecount:NULL);', 'if(result)', 'return result;', 'break;', 'case HTTPREQ_POST:', 'if(conn->bits.authneg)', 'postsize = 0;', 'else {', 'postsize = (data->state.infilesize != -1)?', 'data->state.infilesize:', '(data->set.postfields? (curl_off_t)strlen(data->set.postfields):-1);', '}', "we don't upload data chunked, as RFC2616 forbids us to set both", 'if((postsize != -1) && !data->req.upload_chunky &&', '!Curl_checkheaders(conn, "STR")) {', 'result = Curl_add_bufferf(req_buffer,', '"STR" CURL_FORMAT_CURL_OFF_T', '"STR", postsize);', 'if(result)', 'return result;', '}', 'if(!Curl_checkheaders(conn, "STR")) {', 'result = Curl_add_bufferf(req_buffer,', '"STR"', '"STR");', 'if(result)', 'return result;', '}', 'the somewhat bigger ones we allow the app to disable it. Just make', 'sure that the expect100header is always set to the preferred value', 'ptr = Curl_checkheaders(conn, "STR");', 'if(ptr) {', 'data->state.expect100header =', 'Curl_compareheader(ptr, "STR", "STR");', '}', 'else if(postsize > TINY_INITIAL_POST_SIZE || postsize < 0) {', 'result = expect100(data, conn, req_buffer);', 'if(result)', 'return result;', '}', 'else', 'data->state.expect100header = FALSE;', 'if(data->set.postfields) {', 'if(conn->httpversion != 20 &&', '!data->state.expect100header &&', '(postsize < MAX_INITIAL_POST_SIZE))  {', 'postsize is less than MAX_INITIAL_POST_SIZE', 'then append the post data to the HTTP request header. This limit', 'is no magic limit but only set to prevent really huge POSTs to', 'if(result)', 'return result;', 'if(!data->req.upload_chunky) {', 'result = Curl_add_buffer(req_buffer, data->set.postfields,', '(size_t)postsize);', 'included_body = postsize;', '}', 'else {', 'if(postsize) {', 'result = Curl_add_bufferf(req_buffer, "STR", (int)postsize);', 'if(!result) {', 'result = Curl_add_buffer(req_buffer, data->set.postfields,', '(size_t)postsize);', 'if(!result)', 'result = Curl_add_buffer(req_buffer, "STR", 2);', 'included_body = postsize + 2;', '}', '}', 'if(!result)', 'result = Curl_add_buffer(req_buffer, "STR", 5);', 'included_body += 5;', '}', 'if(result)', 'return result;', 'Curl_pgrsSetUploadSize(data, postsize);', '}', 'else {', 'http->postsize = postsize;', 'http->postdata = data->set.postfields;', 'http->sending = HTTPSEND_BODY;', 'data->state.fread_func = (curl_read_callback)readmoredata;', 'data->state.in = (void *)conn;', 'Curl_pgrsSetUploadSize(data, http->postsize);', 'if(result)', 'return result;', '}', '}', 'else {', 'if(result)', 'return result;', 'if(data->req.upload_chunky && conn->bits.authneg) {', 'result = Curl_add_buffer(req_buffer,', '"STR", 5);', 'if(result)', 'return result;', '}', 'else if(data->state.infilesize) {', 'Curl_pgrsSetUploadSize(data, postsize?postsize:-1);', "read callback, but only if we're not in authenticate", 'if(!conn->bits.authneg) {', 'http->postdata = (char *)&http->postdata;', 'http->postsize = postsize;', '}', '}', '}', 'result = Curl_add_buffer_send(req_buffer, conn, &data->info.request_size,', '(size_t)included_body, FIRSTSOCKET);', 'if(result)', 'failf(data, "STR");', 'else', 'Curl_setup_transfer(conn, FIRSTSOCKET, -1, TRUE,', '&http->readbytecount, http->postdata?FIRSTSOCKET:-1,', 'http->postdata?&http->writebytecount:NULL);', 'break;', 'default:', 'result = Curl_add_buffer(req_buffer, "STR", 2);', 'if(result)', 'return result;', 'result = Curl_add_buffer_send(req_buffer, conn,', '&data->info.request_size, 0, FIRSTSOCKET);', 'if(result)', 'failf(data, "STR");', 'else', 'Curl_setup_transfer(conn, FIRSTSOCKET, -1, TRUE, &http->readbytecount,', 'http->postdata?FIRSTSOCKET:-1,', 'http->postdata?&http->writebytecount:NULL);', '}', 'if(result)', 'return result;', 'if(http->writebytecount) {', 'Curl_pgrsSetUploadCounter(data, http->writebytecount);', 'if(Curl_pgrsUpdate(conn))', 'result = CURLE_ABORTED_BY_CALLBACK;', 'if(http->writebytecount >= postsize) {', 'infof(data, "STR" CURL_FORMAT_CURL_OFF_T', '"STR" CURL_FORMAT_CURL_OFF_T "STR",', 'http->writebytecount, postsize);', 'data->req.upload_done = TRUE;', '}', '}', 'return result;', '}']
2024-04-26 03:37:03.190 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'mov r11d,0x1', 'push r14', 'push r13', 'push r12', 'push rbp', 'push rbx', 'sub rsp,0x78', 'mov rbp,<MEM>', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov rax,<MEM>', 'cmp <MEM>,0x13', 'mov <MEM>,0x0', 'mov r14,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x3', 'mov r13,rdi', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp <MEM>,0x0', 'mov <MEM>,rax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov r12,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'test <MEM>,0x7', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test r12,r12', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'test rax,rax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'xor ecx,ecx', 'mov rdx,r14', 'mov rsi,r12', 'mov rdi,r13', 'call <curl_http_output_auth>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'and eax,0xfffffffb', 'cmp eax,0x1', 'setne al', 'mov <MEM>,al', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'cmp <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'call <curl_add_bufferf>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov rcx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'call <curl_add_bufferf>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_buffer>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,r15', 'mov rdi,rbp', 'call <curl_add_timecondition>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov rdx,r15', 'xor esi,esi', 'mov rdi,r13', 'call <curl_add_custom_headers>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rsi,0xffffffffffffffff', 'mov rdi,rbp', 'mov <MEM>,0x0', 'call <curl_pgrssetuploadsize>', 'mov eax,<MEM>', 'mov r11d,<MEM>', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x4', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer>', 'test eax,eax', '<JUMP> <LOC>', 'xor r8d,r8d', 'xor ecx,ecx', 'lea rdx,<MEM>', 'mov rsi,r13', 'mov rdi,r15', 'call <curl_add_buffer_send>', 'mov r11d,<MEM>', 'test eax,eax', 'mov ebx,eax', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'xor r9d,r9d', 'mov <MEM>,r11d', 'push rcx', 'push rax', 'mov rax,<MEM>', 'lea r8,<MEM>', 'mov rdx,0xffffffffffffffff', 'xor esi,esi', 'mov rdi,r13', 'xor r12d,r12d', 'mov ecx,0x1', 'call <curl_setup_transfer>', 'pop rax', 'pop rdx', 'mov r11d,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,rbp', 'mov <MEM>,r11d', 'call <curl_pgrssetuploadcounter>', 'mov rdi,r13', 'call <curl_pgrsupdate>', 'mov r11d,<MEM>', 'test eax,eax', 'mov eax,0x2a', 'cmovne r11d,eax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'cmp rdx,r12', '<JUMP> <LOC>', 'mov rcx,r12', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov <MEM>,r11d', 'call <curl_infof>', 'and <MEM>,0xfffffffd', 'mov r11d,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,0x0', 'nop <MEM>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x78', 'mov eax,r11d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop cs:<MEM>', 'mov <MEM>,0x0', 'mov rdi,r13', 'lea rsi,<MEM>', 'call <curl_checkheaders>', 'mov rdi,<MEM>', 'test rax,rax', 'lea rax,<MEM>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'call rax', 'mov <MEM>,0x0', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x14', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'lea rsi,<MEM>', 'mov rdi,r13', 'mov <MEM>,0x0', 'call <curl_checkheaders>', 'mov r15,rax', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <curl_raw_equal>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,r15', 'call <curl_copy_header_value>', 'mov rbx,rax', 'test rax,rax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,rbx', 'call <MEM>', 'mov ecx,0x6', 'lea rsi,<MEM>', 'mov rdi,r15', 'repz cmps ds:<MEM>,es:<MEM>', 'seta al', 'sbb al,0x0', 'test al,al', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx ebx,<MEM>', 'test bl,bl', '<JUMP> <LOC>', 'movzx ebx,<MEM>', 'test bl,bl', '<JUMP> <LOC>', 'mov r8,<MEM>', 'mov r15,<MEM>', 'mov r14,<MEM>', 'cmp r8,r15', '<JUMP> <LOC>', 'mov rsi,r8', 'mov rdi,r14', 'mov <MEM>,r8', 'call <strstr@plt>', 'test rax,rax', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <strlen@plt>', 'mov rdi,r15', 'mov <MEM>,rax', 'call <strlen@plt>', 'mov rdi,r14', 'mov r15,rax', 'call <strlen@plt>', 'mov <MEM>,r15', 'lea rdi,<MEM>', 'mov <MEM>,rax', 'sub rdi,<MEM>', 'lea rax,<MEM>', 'call <MEM>', 'mov r15,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rsi,r14', 'mov rdi,rax', 'mov r9,rcx', 'mov <MEM>,rcx', 'sub r9,r14', 'mov rdx,r9', 'mov <MEM>,r9', 'call <memcpy@plt>', 'mov r9,<MEM>', 'mov r14,<MEM>', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'mov rdx,r14', 'call <memcpy@plt>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rdi,r14', 'mov rcx,<MEM>', 'sub rax,r9', 'add rdi,r9', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rdi,r15', 'sub rdx,rax', 'lea rsi,<MEM>', 'call <memcpy@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,r15', 'mov r14,r15', 'mov <MEM>,0x1', 'mov edx,0x6', 'mov rsi,r14', 'lea rdi,<MEM>', 'call <curl_raw_nequal>', 'test eax,eax', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'mov edx,0x0', 'mov rcx,<MEM>', 'test rax,rax', 'lea rax,<MEM>', 'cmovne rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'sub eax,0x2', 'cmp eax,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'and eax,0xfffffffb', 'cmp eax,0x1', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'test rax,rax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'cmp <MEM>,0xa', 'mov <MEM>,rax', '<JUMP> <LOC>', 'cmp <MEM>,0xa', 'mov rax,<MEM>', '<JUMP> <LOC>', 'cmp rax,0x1', '<JUMP> <LOC>', 'test rax,rax', '<JUMP> <LOC>', 'cmp rax,0x1', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov esi,0x18', 'mov edi,0x1', 'call <MEM>', 'mov r15,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,rax', 'mov rdx,r12', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_add_bufferf>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'test bl,bl', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea r8,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'call <curl_add_bufferf>', 'mov r11d,eax', 'test r11d,r11d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea r14,<MEM>', 'cmp <MEM>,0x0', 'lea rsi,<MEM>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'test rsi,rsi', 'cmove rsi,rax', 'mov rax,<MEM>', 'lea r12,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'mov rdx,<MEM>', 'test rcx,rcx', 'mov rbx,rax', 'cmove rcx,rax', 'test rdx,rdx', 'cmove rdx,rax', 'test rdi,rdi', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'test rbx,rbx', 'cmove rbx,rax', 'cmp <MEM>,0x0', 'lea rdi,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'lea r11,<MEM>', 'mov r8,<MEM>', 'test rax,rax', 'cmove rax,r11', 'test r9,r9', 'cmove r9,r11', 'test r8,r8', 'cmove r8,r11', 'lea r11,<MEM>', 'sub rsp,0x8', 'push <MEM>', 'push r14', 'push rsi', 'lea rsi,<MEM>', 'push r12', 'push rcx', 'push rdx', 'mov rdx,r11', 'push rbx', 'push rdi', 'mov rdi,r15', 'push rax', 'mov rcx,<MEM>', 'xor eax,eax', 'call <curl_add_bufferf>', 'mov rdi,<MEM>', 'mov <MEM>,eax', 'lea rax,<MEM>', 'add rsp,0x50', 'call <MEM>', 'mov rdx,<MEM>', 'mov r11d,<MEM>', 'mov <MEM>,0x0', 'cmp rdx,0x20', '<JUMP> <LOC>', 'movabs rax,0x100000110', 'bt rax,rdx', '<JUMP> <LOC>', 'test r11d,r11d', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,0x2', 'mov esi,0x2', 'mov rdi,rbp', 'call <curl_share_lock>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rdx,<MEM>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'shr ecx,1', 'and ecx,0x1', 'test rsi,rsi', 'cmove rsi,<MEM>', 'xor ebx,ebx', 'call <curl_cookie_getlist>', 'mov esi,0x2', 'mov rdi,rbp', 'mov r12,rax', 'call <curl_share_unlock>', 'mov r14,r12', 'test r12,r12', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_bufferf>', 'test eax,eax', '<JUMP> <LOC>', 'add ebx,0x1', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov r8,<MEM>', 'test r8,r8', '<JUMP> <LOC>', 'test ebx,ebx', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_bufferf>', 'test eax,eax', '<JUMP> <LOC>', 'mov r8,<MEM>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,r13', 'lea rsi,<MEM>', 'call <curl_checkheaders>', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'call <curl_compareheader>', 'mov <MEM>,al', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x4', 'test r12,r12', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'lea r12,<MEM>', 'lea rax,<MEM>', 'cmovne r12,rax', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov eax,<MEM>', 'test al,0x2', '<JUMP> <LOC>', 'cmp r8d,0x1bb', '<JUMP> <LOC>', 'test al,0x1', '<JUMP> <LOC>', 'cmp r8d,0x50', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'lea rcx,<MEM>', 'lea rsi,<MEM>', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov rsi,rcx', 'mov rdx,<MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov r11d,0x1b', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x14', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'mov rcx,rax', 'mov rax,<MEM>', 'lea r8,<MEM>', 'mov rsi,rax', 'call <curl_getformdata>', 'mov r11d,eax', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'mov edx,0x0', 'test rax,rax', 'lea rax,<MEM>', 'cmovne rax,rdx', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'js 13d68 <curl_http+OFFSET>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'xor edx,edx', 'mov rdi,<MEM>', 'call rax', 'test eax,eax', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'xor r15d,r15d', 'mov <MEM>,bl', 'mov <MEM>,r12', 'mov rbx,rbp', 'mov rbp,r15', 'mov r15,rcx', 'mov rdi,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov rcx,<MEM>', 'mov rdx,r12', 'mov esi,0x1', 'mov rdi,r15', 'call <MEM>', 'lea r9,<MEM>', 'mov rbp,r9', 'test rax,rax', '<JUMP> <LOC>', 'cmp r12,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'cmp rdi,r9', '<JUMP> <LOC>', 'sub rdi,rbp', 'mov r12d,0x4000', 'cmp rdi,0x4000', '<JUMP> <LOC>', 'call <curlx_sotouz>', 'mov r12,rax', '<JUMP> <LOC>', 'xchg ax,ax', 'cmp <MEM>,0x0', 'lea r12,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea r12,<MEM>', 'cmp eax,0x4', '<JUMP> <LOC>', '<JUMP> <LOC>', 'sub eax,0x2', 'lea r12,<MEM>', 'cmp eax,0x1', 'lea rax,<MEM>', 'cmovbe r12,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x5', 'lea r12,<MEM>', 'lea rax,<MEM>', 'cmovne r12,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call rax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'mov rdi,<MEM>', 'mov r15,rax', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'test r15,r15', '<JUMP> <LOC>', 'mov rsi,r15', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp al,0x5b', '<JUMP> <LOC>', 'mov esi,0x3a', 'mov rdi,rbx', 'call <strchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,rbx', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'test <MEM>,0x3', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0xa', '<JUMP> <LOC>', 'cmp <MEM>,0xa', 'mov rax,<MEM>', '<JUMP> <LOC>', 'cmp rax,0x1', '<JUMP> <LOC>', 'test rax,rax', '<JUMP> <LOC>', 'sub rax,0x1', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'lea rax,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'xor ebx,ebx', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,r14', 'call <strlen@plt>', 'mov rsi,r14', 'mov rdi,r15', 'mov rdx,rax', 'call <curl_add_buffer>', 'mov r11d,eax', '<JUMP> <LOC>', 'xchg ax,ax', 'mov rdi,<MEM>', 'lea rax,<MEM>', 'test rdi,rdi', 'cmove rdi,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkproxyheaders>', 'test rax,rax', '<JUMP> <LOC>', 'lea r14,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r14', 'call <strstr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'test dl,dl', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movzx ebx,<MEM>', 'test bl,bl', '<JUMP> <LOC>', 'movzx ebx,<MEM>', 'xor ebx,0x1', '<JUMP> <LOC>', 'nop <MEM>', 'mov r12,<MEM>', 'lea rax,<MEM>', 'test r12,r12', 'cmove r12,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x14', '<JUMP> <LOC>', 'cmp <MEM>,0x3', 'mov r11d,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', 'lea rcx,<MEM>', 'lea rsi,<MEM>', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov rsi,rcx', 'mov rdx,<MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov rsi,r15', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov r11d,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'mov rdi,r13', 'call <curl_checkheaders>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'xchg ax,ax', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'cmp <MEM>,0x0', 'js 14091 <curl_http+OFFSET>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'add rcx,rdx', 'lea rdi,<MEM>', 'xor eax,eax', 'lea rdx,<MEM>', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rdi,rbx', 'call <strlen@plt>', 'lea rsi,<MEM>', 'mov rdi,rbx', 'lea rdx,<MEM>', 'call <memmove@plt>', 'mov esi,0x5d', 'mov rdi,rbx', 'call <strchr@plt>', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'lea rax,<MEM>', 'lea rdi,<MEM>', 'call <MEM>', '<JUMP> <LOC>', 'mov rbp,rbx', 'mov r12,<MEM>', 'movzx ebx,<MEM>', 'nop <MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'sub rax,<MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,0x12', '<JUMP> <LOC>', 'nop <MEM>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'xor esi,esi', 'mov rdi,r12', 'call <curl_cookie_freelist>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'test ebx,ebx', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'xor esi,esi', 'mov rdi,r12', 'mov <MEM>,eax', 'call <curl_cookie_freelist>', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'movsx edi,dl', 'call <curl_raw_toupper>', 'lea ecx,<MEM>', 'cmp cl,0x8', '<JUMP> <LOC>', 'mov eax,0x1', 'shl rax,cl', 'test eax,0x109', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea r15,<MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,r14', 'call <strlen@plt>', 'cmp <MEM>,0x2f', '<JUMP> <LOC>', 'mov <MEM>,0x2f', 'lea r15,<MEM>', 'cmp <MEM>,0x1', 'lea rdx,<MEM>', 'mov esi,0x8', 'mov rdi,r15', 'sbb ecx,ecx', 'xor eax,eax', 'and ecx,0x8', 'add ecx,0x61', 'call <curl_msnprintf@plt>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'mov <MEM>,r11d', 'call <curl_checkheaders>', 'mov r11d,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'xor edx,edx', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_bufferf>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov r11d,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'lea rsi,<MEM>', 'call <curl_maprintf@plt>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,r9', 'lea rsi,<MEM>', 'mov rdi,rbx', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,0x1a', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov r12,<MEM>', 'cmp r12,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'mov <MEM>,r11d', 'call <curl_checkheaders>', 'mov r11d,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,r13', 'lea rsi,<MEM>', 'mov <MEM>,r11d', 'call <curl_checkheaders>', 'mov r11d,<MEM>', 'test rax,rax', 'mov rdi,rax', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov <MEM>,r11d', 'call <curl_compareheader>', 'mov r11d,<MEM>', 'mov <MEM>,al', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x14', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'cmp r12,0xffff', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'mov rsi,r12', 'mov rdi,rbp', 'mov <MEM>,r11d', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,r12', 'mov <MEM>,0x2', 'mov <MEM>,rax', 'mov <MEM>,r13', 'call <curl_pgrssetuploadsize>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_buffer>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'xor ebx,ebx', 'xor r8d,r8d', 'mov rcx,rbx', 'lea rdx,<MEM>', 'mov rsi,r13', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer_send>', 'mov r11d,<MEM>', 'test eax,eax', 'mov ebx,eax', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'xor r9d,r9d', 'mov <MEM>,r11d', 'sub rsp,0x8', 'xor esi,esi', 'mov rdi,r13', 'push rax', 'mov rax,<MEM>', 'mov ecx,0x1', 'mov rdx,0xffffffffffffffff', 'lea r8,<MEM>', 'call <curl_setup_transfer>', 'pop rsi', 'pop rdi', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor r12d,r12d', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,r12', 'mov rdi,rbp', 'call <curl_pgrssetuploadsize>', 'xor r8d,r8d', 'xor ecx,ecx', 'mov rsi,r13', 'lea rdx,<MEM>', 'mov rdi,r15', 'call <curl_add_buffer_send>', 'mov r11d,<MEM>', 'test eax,eax', 'mov ebx,eax', '<JUMP> <LOC>', 'test r12,r12', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor r9d,r9d', 'add rax,0x30', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_bufferf>', 'test eax,eax', '<JUMP> <LOC>', 'xor r8d,r8d', 'xor ecx,ecx', 'lea rdx,<MEM>', 'mov rsi,r13', 'mov rdi,r15', 'call <curl_add_buffer_send>', 'mov r11d,<MEM>', 'test eax,eax', 'mov ebx,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,ebx', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,0x19', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,0x1a', '<JUMP> <LOC>', 'mov r12,<MEM>', 'cmp r12,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test r12,r12', '<JUMP> <LOC>', 'mov rdx,r15', 'mov rsi,r13', 'mov rdi,rbp', 'mov <MEM>,r11d', 'call <expect100>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'cmp r12,0x400', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_bufferf>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,r11d', 'lea r12,<MEM>', 'mov rdi,r12', 'call <curl_forminit>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rbx,<MEM>', 'cmp <MEM>,0x0', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,r12', 'mov <MEM>,rax', 'mov <MEM>,0x2', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'mov <MEM>,r11d', 'call <curl_checkheaders>', 'mov r11d,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,r15', 'mov rsi,r13', 'mov rdi,rbp', 'mov <MEM>,r11d', 'call <expect100>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r12', 'mov <MEM>,0x0', 'call <curl_formpostheader>', 'mov r11d,<MEM>', 'test rax,rax', 'mov rsi,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer>', 'test eax,eax', '<JUMP> <LOC>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_buffer>', 'test eax,eax', '<JUMP> <LOC>', 'mov r14,<MEM>', 'mov rdi,rbp', 'mov rsi,<MEM>', 'call <curl_pgrssetuploadsize>', 'xor r8d,r8d', 'xor ecx,ecx', 'mov rsi,r13', 'lea rdx,<MEM>', 'mov rdi,r15', 'call <curl_add_buffer_send>', 'mov r11d,<MEM>', 'test eax,eax', 'mov ebx,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov rdi,r14', 'call <curl_formclean>', 'mov r11d,ebx', '<JUMP> <LOC>', 'test ebx,ebx', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'mov <MEM>,r11d', 'call <curl_checkheaders>', 'mov r11d,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,r12', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_bufferf>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov <MEM>,r11d', 'push r9', 'or r9d,0xffffffff', 'push 0x0', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'xor eax,eax', 'or r9d,0xffffffff', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,ebx', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,ebx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'xor eax,eax', 'mov rcx,r12', 'repnz scas al,es:<MEM>', 'mov rax,rcx', 'not rax', 'lea r12,<MEM>', '<JUMP> <LOC>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test r12,r12', 'mov rsi,0xffffffffffffffff', 'mov rdi,rbp', 'mov <MEM>,r11d', 'cmovne rsi,r12', 'call <curl_pgrssetuploadsize>', 'cmp <MEM>,0x0', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,r12', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,r15', 'mov rsi,r13', 'mov rdi,rbp', 'mov <MEM>,r11d', 'call <expect100>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,ebx', '<JUMP> <LOC>', 'or r9d,0xffffffff', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r13', 'mov <MEM>,r11d', 'call <curl_checkheaders>', 'mov r11d,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,r12', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_bufferf>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'xor ebx,ebx', 'test r12,r12', '<JUMP> <LOC>', 'mov edx,0x5', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_buffer>', 'mov r11d,<MEM>', 'add rbx,0x5', 'mov <MEM>,r11d', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,r12', 'mov rdi,rbp', 'call <curl_pgrssetuploadsize>', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'or r9d,0xffffffff', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', 'mov r11d,0x22', '<JUMP> <LOC>', 'mov edx,0x5', 'lea rsi,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov rdx,<MEM>', 'xor eax,eax', 'call <curl_add_bufferf>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov <MEM>,r11d', 'xor r9d,r9d', 'push r8', 'mov rbx,<MEM>', 'lea rax,<MEM>', 'lea r8,<MEM>', 'push rax', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', 'mov eax,0x22', '<JUMP> <LOC>', 'xor eax,eax', 'mov edx,r12d', 'lea rsi,<MEM>', 'mov rdi,r15', 'mov <MEM>,r11d', 'call <curl_add_bufferf>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdx,r12', 'mov rdi,r15', 'lea rbx,<MEM>', 'call <curl_add_buffer>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov edx,0x2', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_add_buffer>', 'mov r11d,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdx,r12', 'mov rdi,r15', 'mov rbx,r12', 'call <curl_add_buffer>', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'nop <MEM>']
filter_and_generate_data_items: 100%|██████████| 583/583 [00:00<00:00, 1126.73it/s]
2024-04-26 03:37:04.258 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 583 ---> 3
2024-04-26 03:37:04.260 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['Curl_http']
2024-04-26 03:37:04.260 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['Curl_http']
2024-04-26 03:37:04.261 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  5.46it/s]
2024-04-26 03:37:10.482 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9909342527389526, Curl_http ---> ossl_connect_common
2024-04-26 03:37:10.482 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:37:10.483 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:37:10.553 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.6411204934120178, fix prob: 0.35887953639030457
2024-04-26 03:37:10.554 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:37:10.554 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:37:10.554 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:37:10.554 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:37:10.555 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 222 CVE-2016-8625
filter_and_generate_data_items: 100%|██████████| 1749/1749 [00:00<00:00, 2133.15it/s]
2024-04-26 03:37:20.183 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1749 ---> 231
2024-04-26 03:37:20.186 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['global_init', '*curl_version', '*curl_version_info']
2024-04-26 03:37:20.186 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['global_init', 'Curl_strerror', 'curl_version', 'curl_version_info']
2024-04-26 03:37:20.187 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.60s/it]
2024-04-26 03:37:31.860 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.666863739490509, global_init ---> Curl_client_chop_write
2024-04-26 03:37:31.860 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.3067920506000519, curl_version ---> Curl_dedotdotify
2024-04-26 03:37:31.860 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7779508829116821, curl_version_info ---> AddFormData
2024-04-26 03:37:31.861 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 44 ---> 3
2024-04-26 03:37:31.861 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:37:31.862 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:37:31.862 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:37:31.862 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:37:31.862 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:37:31.862 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:37:31.863 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 223 CVE-2016-9586
filter_and_generate_data_items:  16%|█▌        | 185/1166 [00:00<00:01, 948.68it/s]2024-04-26 03:37:39.804 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: dprintf_formatf, 2, 1
2024-04-26 03:37:39.805 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int dprintf_formatf(', 'void *data, /* untouched by format(), just sent to the stream() function in', 'int (*stream)(int, FILE *),', '{', 'const char *digits = lower_digits;', 'char *f;', 'int done = 0;', 'va_stack_t vto[MAX_PARAMETERS];', 'char *endpos[MAX_PARAMETERS];', 'char **end;', 'char work[BUFFSIZE];', 'va_stack_t *p;', 'byte as margin to avoid the (false?) warning Coverity gives us', 'char *workend = &work[sizeof(work) - 2];', 'if(dprintf_Pass1(format, vto, endpos, ap_save))', 'return -1;', 'end = &endpos[0]; /* the initial end-position from the list dprintf_Pass1()', 'f = (char *)format;', "while(*f != '\\0') {", 'int is_alt;', 'long width;', 'long prec;', 'int is_neg;', 'long base;', 'mp_uintmax_t num;', 'mp_intmax_t signed_num;', 'char *w;', "if(*f != '%') {", 'do {', 'OUTCHAR(*f);', "} while(*++f && ('%' != *f));", 'continue;', '}', '++f;', '\'%\' as a conversion specifier, it says "The complete format', 'specification shall be `%%\'," so we can avoid all the width', "if(*f == '%') {", '++f;', "OUTCHAR('%');", 'continue;', '}', 'param=dprintf_DollarString(f, &f);', 'if(!param)', 'param = param_num;', 'else', '--param;', 'param_num++; /* increase this always to allow "STR" and then the', 'p = &vto[param];', 'if(p->flags & FLAGS_WIDTHPARAM) {', 'width = (long)vto[p->width].data.num.as_signed;', 'param_num++; /* since the width is extracted from a parameter, we', 'if(width < 0) {', 'width = -width;', 'p->flags |= FLAGS_LEFT;', 'p->flags &= ~FLAGS_PAD_NIL;', '}', '}', 'else', 'width = p->width;', 'if(p->flags & FLAGS_PRECPARAM) {', 'prec = (long)vto[p->precision].data.num.as_signed;', 'param_num++; /* since the precision is extracted from a parameter, we', 'if(prec < 0)', 'prec = -1;', '}', 'else if(p->flags & FLAGS_PREC)', 'prec = p->precision;', 'else', 'prec = -1;', 'is_alt = (p->flags & FLAGS_ALT) ? 1 : 0;', 'switch (p->type) {', 'case FORMAT_INT:', 'num = p->data.num.as_unsigned;', 'if(p->flags & FLAGS_CHAR) {', 'if(!(p->flags & FLAGS_LEFT))', 'while(--width > 0)', "OUTCHAR(' ');", 'OUTCHAR((char) num);', 'if(p->flags & FLAGS_LEFT)', 'while(--width > 0)', "OUTCHAR(' ');", 'break;', '}', 'if(p->flags & FLAGS_OCTAL) {', 'base = 8;', 'goto unsigned_number;', '}', 'else if(p->flags & FLAGS_HEX) {', 'digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;', 'base = 16;', 'goto unsigned_number;', '}', 'else if(p->flags & FLAGS_UNSIGNED) {', 'base = 10;', 'goto unsigned_number;', '}', 'base = 10;', 'is_neg = (p->data.num.as_signed < (mp_intmax_t)0) ? 1 : 0;', 'if(is_neg) {', 'signed_num = p->data.num.as_signed + (mp_intmax_t)1;', 'signed_num = -signed_num;', 'num = (mp_uintmax_t)signed_num;', 'num += (mp_uintmax_t)1;', '}', 'goto number;', 'unsigned_number:', 'is_neg = 0;', 'number:', 'if(prec == -1)', 'prec = 1;', 'w = workend;', 'while(num > 0) {', '*w-- = digits[num % base];', 'num /= base;', '}', 'width -= (long)(workend - w);', 'prec -= (long)(workend - w);', 'if(is_alt && base == 8 && prec <= 0) {', "*w-- = '0';", '--width;', '}', 'if(prec > 0) {', 'width -= prec;', 'while(prec-- > 0)', "*w-- = '0';", '}', 'if(is_alt && base == 16)', 'width -= 2;', 'if(is_neg || (p->flags & FLAGS_SHOWSIGN) || (p->flags & FLAGS_SPACE))', '--width;', 'if(!(p->flags & FLAGS_LEFT) && !(p->flags & FLAGS_PAD_NIL))', 'while(width-- > 0)', "OUTCHAR(' ');", 'if(is_neg)', "OUTCHAR('-');", 'else if(p->flags & FLAGS_SHOWSIGN)', "OUTCHAR('+');", 'else if(p->flags & FLAGS_SPACE)', "OUTCHAR(' ');", 'if(is_alt && base == 16) {', "OUTCHAR('0');", 'if(p->flags & FLAGS_UPPER)', "OUTCHAR('X');", 'else', "OUTCHAR('x');", '}', 'if(!(p->flags & FLAGS_LEFT) && (p->flags & FLAGS_PAD_NIL))', 'while(width-- > 0)', "OUTCHAR('0');", 'while(++w <= workend) {', 'OUTCHAR(*w);', '}', 'if(p->flags & FLAGS_LEFT)', 'while(width-- > 0)', "OUTCHAR(' ');", 'break;', 'case FORMAT_STRING:', '{', 'static const char null[] = "STR";', 'const char *str;', 'size_t len;', 'str = (char *) p->data.str;', 'if(str == NULL) {', 'if(prec == -1 || prec >= (long) sizeof(null) - 1) {', 'str = null;', 'len = sizeof(null) - 1;', 'p->flags &= (~FLAGS_ALT);', '}', 'else {', 'str = "STR";', 'len = 0;', '}', '}', 'else if(prec != -1)', 'len = (size_t)prec;', 'else', 'len = strlen(str);', 'width -= (len > LONG_MAX) ? LONG_MAX : (long)len;', 'if(p->flags & FLAGS_ALT)', 'OUTCHAR(\'"\');', 'if(!(p->flags&FLAGS_LEFT))', 'while(width-- > 0)', "OUTCHAR(' ');", 'while((len-- > 0) && *str)', 'OUTCHAR(*str++);', 'if(p->flags&FLAGS_LEFT)', 'while(width-- > 0)', "OUTCHAR(' ');", 'if(p->flags & FLAGS_ALT)', 'OUTCHAR(\'"\');', '}', 'break;', 'case FORMAT_PTR:', '{', 'void *ptr;', 'ptr = (void *) p->data.ptr;', 'if(ptr != NULL) {', 'base = 16;', 'digits = (p->flags & FLAGS_UPPER)? upper_digits : lower_digits;', 'is_alt = 1;', 'num = (size_t) ptr;', 'is_neg = 0;', 'goto number;', '}', 'else {', 'static const char strnil[] = "STR";', 'const char *point;', 'width -= (long)(sizeof(strnil) - 1);', 'if(p->flags & FLAGS_LEFT)', 'while(width-- > 0)', "OUTCHAR(' ');", "for(point = strnil; *point != '\\0'; ++point)", 'OUTCHAR(*point);', 'if(! (p->flags & FLAGS_LEFT))', 'while(width-- > 0)', "OUTCHAR(' ');", '}', '}', 'break;', 'case FORMAT_DOUBLE:', '{', 'char formatbuf[32]="STR";', 'char *fptr = &formatbuf[1];', 'size_t left = sizeof(formatbuf)-strlen(formatbuf);', 'int len;', 'width = -1;', 'if(p->flags & FLAGS_WIDTH)', 'width = p->width;', 'else if(p->flags & FLAGS_WIDTHPARAM)', 'width = (long)vto[p->width].data.num.as_signed;', 'prec = -1;', 'if(p->flags & FLAGS_PREC)', 'prec = p->precision;', 'else if(p->flags & FLAGS_PRECPARAM)', 'prec = (long)vto[p->precision].data.num.as_signed;', 'if(p->flags & FLAGS_LEFT)', "*fptr++ = '-';", 'if(p->flags & FLAGS_SHOWSIGN)', "*fptr++ = '+';", 'if(p->flags & FLAGS_SPACE)', "*fptr++ = ' ';", 'if(p->flags & FLAGS_ALT)', "*fptr++ = '#';", '*fptr = 0;', 'if(width >= 0) {', 'len = curl_msnprintf(fptr, left, "STR", width);', 'fptr += len;', 'left -= len;', '}', 'if(prec >= 0) {', 'len = curl_msnprintf(fptr, left, "STR", prec);', 'fptr += len;', '}', 'if(p->flags & FLAGS_LONG)', "*fptr++ = 'l';", 'if(p->flags & FLAGS_FLOATE)', "*fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'E':'e');", 'else if(p->flags & FLAGS_FLOATG)', "*fptr++ = (char)((p->flags & FLAGS_UPPER) ? 'G' : 'g');", 'else', "*fptr++ = 'f';", '(sprintf)(work, formatbuf, p->data.dnum);', 'for(fptr=work; *fptr; fptr++)', 'OUTCHAR(*fptr);', '}', 'break;', 'case FORMAT_INTPTR:', '#ifdef HAVE_LONG_LONG_TYPE', 'if(p->flags & FLAGS_LONGLONG)', '*(LONG_LONG_TYPE *) p->data.ptr = (LONG_LONG_TYPE)done;', 'else', '#endif', 'if(p->flags & FLAGS_LONG)', '*(long *) p->data.ptr = (long)done;', 'else if(!(p->flags & FLAGS_SHORT))', '*(int *) p->data.ptr = (int)done;', 'else', '*(short *) p->data.ptr = (short)done;', 'break;', 'default:', 'break;', '}', '}', 'return done;', '}']
2024-04-26 03:37:39.813 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'push r14', 'push r13', 'push r12', 'push rbp', 'push rbx', 'sub rsp,0x1000', 'or <MEM>,0x0', 'sub rsp,0x588', 'xor r11d,r11d', 'xor r14d,r14d', 'mov ebx,r11d', 'mov <MEM>,rsi', 'lea rsi,<MEM>', 'mov r13,rdi', 'mov rbp,rdx', 'mov rdi,rdx', 'mov r9,rcx', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,rdx', 'movzx eax,<MEM>', 'mov <MEM>,rsi', 'mov <MEM>,rsi', '<JUMP> <LOC>', 'nop <MEM>', 'lea r12,<MEM>', 'mov <MEM>,r12', 'cmp <MEM>,0x25', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov rdi,r12', 'test al,al', '<JUMP> <LOC>', 'mov rbx,r9', 'test r14,r14', '<JUMP> <LOC>', 'lea rax,<MEM>', 'shl r14,0x5', 'lea rsi,<MEM>', 'add r14,rax', 'nop <MEM>', 'mov ecx,<MEM>', 'test ch,0x40', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov edi,edx', 'add edx,0x8', 'add rdi,<MEM>', 'mov <MEM>,edx', 'mov rdx,<MEM>', 'movsxd rdi,<MEM>', 'shl rdx,0x5', 'mov <MEM>,rdi', 'test ecx,0x10000', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov edi,edx', 'add edx,0x8', 'add rdi,<MEM>', 'mov <MEM>,edx', 'mov rdx,<MEM>', 'movsxd rdi,<MEM>', 'shl rdx,0x5', 'mov <MEM>,rdi', 'cmp <MEM>,0x9', '<JUMP> <LOC>', 'mov edx,<MEM>', 'movsxd rdx,<MEM>', 'add rdx,rsi', 'notrack jmp rdx', 'nop <MEM>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'add rax,0x20', 'cmp r14,rax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov <MEM>,rbp', 'test al,al', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov <MEM>,0x0', 'xor r15d,r15d', 'mov rbx,<MEM>', 'mov <MEM>,rcx', 'lea rcx,<MEM>', 'mov <MEM>,rcx', 'lea rcx,<MEM>', 'mov <MEM>,rcx', 'cmp al,0x25', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov <MEM>,rdi', 'cmp <MEM>,0x25', '<JUMP> <LOC>', 'add rbp,0x2', 'mov rsi,r13', 'mov edi,0x25', 'mov <MEM>,rbp', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov rbp,<MEM>', 'add r15d,0x1', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x1588', 'mov eax,r15d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'mov edi,ecx', 'mov edx,<MEM>', 'and edi,0x240', 'cmp edi,0x240', '<JUMP> <LOC>', 'test cl,0x40', '<JUMP> <LOC>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov ecx,edx', 'add edx,0x8', 'add rcx,<MEM>', 'mov <MEM>,edx', '<JUMP> <LOC>', 'nop <MEM>', 'mov edx,<MEM>', 'cmp edx,0xaf', '<JUMP> <LOC>', 'mov ecx,edx', 'add edx,0x10', 'add rcx,<MEM>', 'mov <MEM>,edx', 'movsd xmm0,<MEM>', 'movsd <MEM>,xmm0', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x3', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edi,al', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add r15d,0x1', 'lea rbp,<MEM>', 'mov <MEM>,rbp', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'cmp al,0x25', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'call <dprintf_dollarstring>', 'mov rsi,<MEM>', 'lea rcx,<MEM>', 'test rax,rax', 'lea r14,<MEM>', 'cmove r14,rsi', 'mov rax,r14', 'shl rax,0x5', 'mov r8d,<MEM>', 'lea rdx,<MEM>', 'test r8d,0x4000', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rsi,0x2', 'mov <MEM>,rsi', 'shl rax,0x5', 'mov rax,<MEM>', 'mov <MEM>,rax', 'test rax,rax', 'js 27ad8 <dprintf_formatf+OFFSET>', 'mov ecx,r8d', 'and ecx,0x10000', '<JUMP> <LOC>', 'mov rax,r14', 'mov r12,0xffffffffffffffff', 'add <MEM>,0x1', 'shl rax,0x5', 'mov rsi,r12', 'mov rdx,<MEM>', 'shl rdx,0x5', 'cmp <MEM>,0x0', 'cmovns rsi,<MEM>', 'mov rax,r14', 'shl rax,0x5', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdi,<MEM>', 'movsxd rax,<MEM>', 'add rax,rdi', 'notrack jmp rax', 'nop <MEM>', 'mov rax,<MEM>', 'lea r14,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea r12,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'add rbp,0x1', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'lea rax,<MEM>', 'add r15d,0x1', 'cmp rbp,rax', '<JUMP> <LOC>', 'movzx edi,<MEM>', 'test dil,dil', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'test ecx,ecx', '<JUMP> <LOC>', 'mov edx,<MEM>', 'test edx,edx', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x22', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'add r15d,0x1', 'nop <MEM>', 'mov rsi,<MEM>', 'mov rbp,<MEM>', 'lea rcx,<MEM>', 'mov <MEM>,rcx', 'mov <MEM>,rbp', 'movzx eax,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x25', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx eax,<MEM>', 'mov rdi,rdx', '<JUMP> <LOC>', 'nop', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop <MEM>', 'mov rsi,0xffffffffffffffff', 'test r8d,0x8000', '<JUMP> <LOC>', 'mov rax,r14', 'shl rax,0x5', 'mov rsi,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add <MEM>,0x1', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov edi,ecx', 'and edi,0x220', 'cmp edi,0x220', '<JUMP> <LOC>', 'test cl,0x20', '<JUMP> <LOC>', 'and ch,0x2', '<JUMP> <LOC>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov ecx,edx', 'add edx,0x8', 'add rcx,<MEM>', 'mov <MEM>,edx', 'mov ecx,<MEM>', 'mov <MEM>,rcx', '<JUMP> <LOC>', 'nop <MEM>', 'and r8d,0xfffffeff', 'neg rax', 'or r8d,0x4', 'mov <MEM>,rax', 'mov <MEM>,r8d', '<JUMP> <LOC>', 'nop <MEM>', 'lea rax,<MEM>', 'mov rdi,r12', 'mov <MEM>,r9', 'add ebx,0x1', 'mov rsi,rax', 'mov <MEM>,rax', 'call <dprintf_dollarstring>', 'mov rdi,<MEM>', 'mov r9,<MEM>', 'lea r8,<MEM>', 'mov r12,rax', 'movsxd rax,ebx', 'lea r10,<MEM>', 'test r12,r12', 'cmove r12,rax', 'cmp r14,r12', 'cmovl r14,r12', 'xor r15d,r15d', 'xor r11d,r11d', 'xor ecx,ecx', 'nop <MEM>', 'movzx eax,<MEM>', 'lea edx,<MEM>', 'cmp dl,0x5a', '<JUMP> <LOC>', 'movzx edx,dl', 'movsxd rdx,<MEM>', 'add rdx,r8', 'notrack jmp rdx', 'sub r12,0x1', 'cmp r12,0x7f', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'shl r12,0x5', 'mov r10,rsi', 'add r12,rsi', 'lea esi,<MEM>', 'cmp sil,0x33', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movzx esi,sil', 'movsxd rsi,<MEM>', 'add rsi,rdx', 'notrack jmp rsi', 'nop <MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'movzx esi,<MEM>', 'lea edx,<MEM>', 'cmp dl,0x5a', '<JUMP> <LOC>', 'movzx edx,dl', 'movsxd rdx,<MEM>', 'add rdx,r10', 'notrack jmp rdx', 'cmp <MEM>,0x2a', 'mov <MEM>,r9', 'mov <MEM>,rcx', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov edx,0xa', 'mov rdi,rax', 'or r15d,0x8000', 'call <strtol@plt>', 'mov r11,rax', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'lea r8,<MEM>', 'lea r10,<MEM>', 'mov r9,<MEM>', 'nop cs:<MEM>', 'mov rdi,rax', '<JUMP> <LOC>', 'mov eax,r15d', 'or ah,0x1', 'test r15b,0x4', 'cmove r15d,eax', 'mov rsi,<MEM>', 'mov edx,0xa', 'mov <MEM>,r9', 'or r15d,0x2000', 'mov <MEM>,r11', 'call <strtol@plt>', 'mov r11,<MEM>', 'mov r9,<MEM>', 'lea r8,<MEM>', 'mov rcx,rax', 'mov rax,<MEM>', 'lea r10,<MEM>', 'mov rdi,rax', '<JUMP> <LOC>', 'xchg ax,ax', 'or r15d,0x20', 'mov rdi,rax', '<JUMP> <LOC>', 'or r15b,0x80', 'mov rdi,rax', '<JUMP> <LOC>', 'mov edx,r15d', 'mov esi,r15d', 'mov rdi,rax', 'or edx,0x40', 'or esi,0x20', 'and r15d,0x20', 'cmove edx,esi', 'mov r15d,edx', '<JUMP> <LOC>', 'or r15d,0x10', 'mov rdi,rax', '<JUMP> <LOC>', 'or r15d,0x40', 'mov rdi,rax', '<JUMP> <LOC>', 'and r15d,0xfffffeff', 'mov rdi,rax', 'or r15d,0x4', '<JUMP> <LOC>', 'or r15d,0x2', 'mov rdi,rax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,rax', 'mov <MEM>,r9', 'add ebx,0x1', 'mov <MEM>,r11', 'or r15d,0x4000', 'call <dprintf_dollarstring>', 'mov r9,<MEM>', 'mov r11,<MEM>', 'lea r10,<MEM>', 'mov rcx,rax', 'movsxd rax,ebx', 'lea r8,<MEM>', 'test rcx,rcx', 'cmove rcx,rax', 'mov rax,<MEM>', 'cmp r14,rcx', 'mov rdi,rax', 'cmovl r14,rcx', '<JUMP> <LOC>', 'or r15d,0x8', 'mov rdi,rax', '<JUMP> <LOC>', 'or r15d,0x1', 'mov rdi,rax', '<JUMP> <LOC>', 'nop', 'shl r14,0x5', 'mov rbp,<MEM>', 'test rbp,rbp', '<JUMP> <LOC>', 'mov rax,<MEM>', 'and r8d,0x4', 'mov ebp,r8d', 'lea r12,<MEM>', '<JUMP> <LOC>', 'sub rax,0x6', 'mov r14,rax', 'test r12,r12', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'sub r14,0x1', 'add r15d,0x1', 'cmp r14,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov eax,r8d', 'shl r14,0x5', 'and eax,0x20000', 'mov rbp,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'and r8d,0x4', '<JUMP> <LOC>', 'movzx edi,bpl', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov rbp,<MEM>', 'add r15d,0x1', 'sub rbp,0x1', 'test rbp,rbp', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'add r15d,0x1', 'sub rbp,0x1', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'test r8b,0x40', '<JUMP> <LOC>', 'test r8b,0x20', '<JUMP> <LOC>', 'shl r14,0x5', 'and r8d,0x10', 'mov rax,<MEM>', '<JUMP> <LOC>', 'mov <MEM>,r15d', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x25', 'pxor xmm0,xmm0', 'mov <MEM>,0x0', 'movaps xmmword ptr <MEM>,xmm0', 'test r8d,0x2000', '<JUMP> <LOC>', 'mov rax,r14', 'shl rax,0x5', 'mov r9,<MEM>', 'test r8d,0x8000', '<JUMP> <LOC>', 'mov rax,r14', 'shl rax,0x5', 'mov r12,<MEM>', 'lea rdi,<MEM>', 'test r8b,0x4', '<JUMP> <LOC>', 'mov <MEM>,0x2d', 'lea rdi,<MEM>', 'test r8b,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x2b', 'add rdi,0x1', 'test r8b,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x20', 'add rdi,0x1', 'test r8b,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x23', 'add rdi,0x1', 'mov <MEM>,0x0', 'mov ebp,0x1f', 'test r9,r9', 'js 27f78 <dprintf_formatf+OFFSET>', 'mov rcx,r9', 'mov esi,0x1f', 'xor eax,eax', 'mov <MEM>,r8d', 'lea rdx,<MEM>', 'mov <MEM>,rdi', 'call <curl_msnprintf@plt>', 'mov rdi,<MEM>', 'mov r8d,<MEM>', 'cdqe', 'add rdi,rax', 'sub rbp,rax', 'test r12,r12', 'js 27faa <dprintf_formatf+OFFSET>', 'mov rcx,r12', 'lea rdx,<MEM>', 'mov rsi,rbp', 'xor eax,eax', 'mov <MEM>,r8d', 'mov <MEM>,rdi', 'call <curl_msnprintf@plt>', 'mov rdi,<MEM>', 'mov r8d,<MEM>', 'cdqe', 'add rdi,rax', 'lea rax,<MEM>', 'test r8b,0x20', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov <MEM>,0x6c', 'mov rdi,rax', 'mov rax,rdx', 'test r8d,0x40000', '<JUMP> <LOC>', 'and r8d,0x1000', 'cmp r8d,0x1', 'sbb edx,edx', 'and edx,0x20', 'add edx,0x45', 'mov <MEM>,dl', 'mov <MEM>,0x0', 'shl r14,0x5', 'lea rbp,<MEM>', 'lea rcx,<MEM>', 'mov edx,0x100', 'mov esi,0x1', 'mov rdi,rbp', 'mov eax,0x1', 'movsd xmm0,<MEM>', 'call <__sprintf_chk@plt>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'movzx eax,<MEM>', 'add rbp,0x1', 'add r15d,0x1', 'test al,al', '<JUMP> <LOC>', 'movzx edi,al', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rax,r14', 'shl rax,0x5', 'mov rbp,<MEM>', 'test rbp,rbp', '<JUMP> <LOC>', 'mov eax,r8d', 'and eax,0x8', 'mov <MEM>,eax', 'cmp rsi,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,rsi', 'test rsi,rsi', 'jns 28aab <dprintf_formatf+OFFSET>', 'movabs rax,0x8000000000000001', 'add <MEM>,rax', 'mov esi,<MEM>', 'test esi,esi', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rsi,r13', 'mov edi,0x22', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'add r15d,0x1', 'and r8d,0x4', 'mov <MEM>,r8d', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea r12,<MEM>', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'sub r12,0x1', 'add r15d,0x1', 'cmp r12,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'xchg ax,ax', 'mov rsi,<MEM>', 'add rdi,0x2', 'add ebx,0x1', 'or r15d,0x18000', 'mov <MEM>,rdi', 'call <dprintf_dollarstring>', 'mov r11,rax', 'movsxd rax,ebx', 'test r11,r11', 'cmove r11,rax', 'cmp r14,r11', 'cmovl r14,r11', '<JUMP> <LOC>', 'nop cs:<MEM>', 'shl r14,0x5', 'movsxd rdx,r15d', 'mov rax,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov r12,rax', 'nop <MEM>', 'lea r14,<MEM>', 'mov eax,0x28', '<JUMP> <LOC>', 'xchg ax,ax', 'movzx eax,<MEM>', 'add r14,0x1', 'add r15d,0x1', 'test al,al', '<JUMP> <LOC>', 'movzx edi,al', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'test r8d,0x80000', '<JUMP> <LOC>', 'and r8d,0x1000', 'cmp r8d,0x1', 'sbb edx,edx', 'and edx,0x20', 'add edx,0x47', 'mov <MEM>,dl', '<JUMP> <LOC>', 'nop <MEM>', 'mov r12,0xffffffffffffffff', 'test ecx,ecx', '<JUMP> <LOC>', 'mov rax,r14', 'shl rax,0x5', 'mov rax,<MEM>', 'shl rax,0x5', 'mov r12,<MEM>', '<JUMP> <LOC>', 'nop', 'mov r9,0xffffffffffffffff', 'test r8d,0x4000', '<JUMP> <LOC>', 'mov rax,r14', 'shl rax,0x5', 'mov rax,<MEM>', 'shl rax,0x5', 'mov r9,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov ecx,edx', 'add edx,0x8', 'add rcx,<MEM>', 'mov <MEM>,edx', 'movsxd rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop <MEM>', 'test r8d,0x1000', 'mov <MEM>,0x1', 'lea rax,<MEM>', 'lea rcx,<MEM>', 'cmovne rax,rcx', 'mov edi,0x10', 'xor r9d,r9d', 'xor r10d,r10d', 'mov <MEM>,0x0', 'mov <MEM>,rax', 'cmp rsi,0xffffffffffffffff', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rcx,<MEM>', 'mov <MEM>,rax', 'mov r12,rax', 'nop <MEM>', 'mov rax,rbp', 'xor edx,edx', 'sub r12,0x1', 'div rdi', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rdx,rbp', 'mov rbp,rax', 'cmp rdx,rdi', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r14,<MEM>', 'mov rdx,rsi', 'sub rax,r12', 'sub r14,rax', 'sub rdx,rax', 'test r9b,r9b', '<JUMP> <LOC>', 'test rdx,rdx', '<JUMP> <LOC>', 'mov r14,<MEM>', 'mov rax,rdx', 'sub r14,rsi', 'mov rsi,r12', 'sub rsi,rdx', 'nop <MEM>', 'mov <MEM>,0x30', 'sub rax,0x1', '<JUMP> <LOC>', 'mov rax,rdx', 'neg rax', 'test rdx,rdx', 'mov rdx,0xffffffffffffffff', 'cmovle rax,rdx', 'add r12,rax', 'lea rax,<MEM>', 'cmp <MEM>,0x0', 'cmovne r14,rax', 'mov eax,r8d', 'mov esi,r8d', 'and eax,0x3', 'and esi,0x104', 'or eax,r10d', 'mov <MEM>,esi', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'test r8b,0x2', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rsi,r13', 'mov edi,0x2b', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp rsi,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp rsi,0x4', 'mov ecx,r8d', 'mov <MEM>,0x0', 'lea rbp,<MEM>', 'setg al', 'and ecx,0x8', 'mov <MEM>,ecx', 'test al,al', '<JUMP> <LOC>', 'mov eax,r8d', 'shl r14,0x5', 'and eax,0xfffffff7', 'mov <MEM>,eax', 'mov rax,<MEM>', 'sub rax,0x5', 'and r8d,0x4', 'mov <MEM>,r8d', '<JUMP> <LOC>', 'mov <MEM>,rax', 'lea rbp,<MEM>', 'mov r14d,0x4', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'test rdx,rdx', '<JUMP> <LOC>', '<JUMP> <LOC>', 'xchg ax,ax', 'sub r14,0x1', 'test esi,esi', '<JUMP> <LOC>', 'mov edi,<MEM>', 'test edi,edi', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rsi,r13', 'mov edi,0x2d', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'add r15d,0x1', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rsi,r13', 'mov edi,0x30', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'lea ebp,<MEM>', 'test r8d,0x1000', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x58', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'add r15d,0x2', 'cmp <MEM>,0x100', '<JUMP> <LOC>', 'add r12,0x1', 'cmp r12,<MEM>', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rbp,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'add r12,0x1', 'add r15d,0x1', 'cmp r12,rbp', '<JUMP> <LOC>', 'movzx edi,<MEM>', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x0', 'nop <MEM>', 'mov <MEM>,r15d', 'mov <MEM>,rcx', 'mov <MEM>,r11', 'test r15d,0x4000', '<JUMP> <LOC>', 'sub rcx,0x1', 'mov <MEM>,rcx', 'shl rcx,0x5', 'add rcx,r10', 'mov <MEM>,0x9', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'and r15d,0x10000', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov <MEM>,rcx', 'shl rcx,0x5', 'add rcx,r10', 'mov <MEM>,0x9', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,rsi', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x66', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov <MEM>,0x30', 'sub r14,0x1', 'sub r12,0x1', '<JUMP> <LOC>', 'mov esi,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x3', '<JUMP> <LOC>', 'or r15d,0x8', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'lea rbp,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov r14d,r8d', '<JUMP> <LOC>', 'nop cs:<MEM>', 'sub rbp,0x1', 'add r15d,0x1', 'cmp rbp,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'or r15d,0x200', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'or r15d,0x20000', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'or r15d,0x1a00', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'or r15d,0x400', '<JUMP> <LOC>', 'mov <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x7', 'or r15d,0x41000', '<JUMP> <LOC>', 'mov <MEM>,0x7', 'or r15d,0x81000', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'or r15d,0xa00', '<JUMP> <LOC>', 'mov <MEM>,0x7', 'or r15d,0x40000', '<JUMP> <LOC>', 'mov <MEM>,0x7', '<JUMP> <LOC>', 'mov <MEM>,0x7', 'or r15d,0x80000', '<JUMP> <LOC>', 'mov <MEM>,0x4', '<JUMP> <LOC>', 'nop <MEM>', 'test ebp,ebp', '<JUMP> <LOC>', 'lea rbp,<MEM>', 'test r12,r12', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'sub rbp,0x1', 'add r15d,0x1', 'cmp rbp,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov r9d,r8d', 'sar r9d,0x3', 'and r9d,0x1', 'test r8d,0x400', '<JUMP> <LOC>', 'test r8d,0x800', '<JUMP> <LOC>', 'test r8d,0x200', '<JUMP> <LOC>', 'test rbp,rbp', 'jns 28a11 <dprintf_formatf+OFFSET>', 'mov <MEM>,0x0', 'neg rbp', 'xor r9d,r9d', 'mov edi,0xa', 'mov <MEM>,0x1', 'mov r10d,0x1', 'cmp rsi,0xffffffffffffffff', '<JUMP> <LOC>', 'nop <MEM>', 'test rbp,rbp', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov r14,<MEM>', 'mov rdx,rsi', 'mov <MEM>,rax', 'mov r12,rax', '<JUMP> <LOC>', 'xchg ax,ax', 'mov rax,<MEM>', 'lea r14,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,r12', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,rbp', 'mov <MEM>,r8d', 'call <strlen@plt>', 'mov r8d,<MEM>', 'sub <MEM>,rax', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'and r8d,0x4', '<JUMP> <LOC>', 'lea rbp,<MEM>', 'test r14,r14', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'sub rbp,0x1', 'add r15d,0x1', 'cmp rbp,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov r12,<MEM>', 'sub r12,0x1', 'test r12,r12', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'add r15d,0x1', 'sub r12,0x1', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea rbp,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov r14d,r8d', '<JUMP> <LOC>', 'nop <MEM>', 'sub rbp,0x1', 'add r15d,0x1', 'cmp rbp,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x30', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov r12,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rbp,<MEM>', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'sub rbp,0x1', 'add r15d,0x1', 'cmp rbp,0xffffffffffffffff', '<JUMP> <LOC>', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'test r8b,0x1', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rsi,r13', 'mov edi,0x20', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,r15w', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov rsi,r13', 'mov edi,0x78', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov r15d,ebp', '<JUMP> <LOC>', 'nop <MEM>', 'xor r15d,r15d', '<JUMP> <LOC>', 'movzx edi,bpl', 'mov rsi,r13', 'call rbx', 'cmp eax,0xffffffff', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'mov <MEM>,0x0', 'mov edi,0x8', 'xor r10d,r10d', 'cmp rsi,0xffffffffffffffff', '<JUMP> <LOC>', 'mov esi,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'xor r9d,r9d', 'mov edi,0xa', '<JUMP> <LOC>', 'mov r12,<MEM>', 'mov <MEM>,0x0', 'lea rbp,<MEM>', 'mov r14d,0x4', 'mov <MEM>,0x5', 'sub r12,0x6', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov r8d,r14d', 'mov r14,0xffffffffffffffff', '<JUMP> <LOC>', 'mov r8d,r14d', 'mov r14,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,r9b', 'mov edi,0x10', 'xor r9d,r9d', 'test r8d,0x1000', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov r15d,0xffffffff', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'sub <MEM>,rsi', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov r14,rbp', '<JUMP> <LOC>', 'mov r14,rbp', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>']
filter_and_generate_data_items: 100%|██████████| 1166/1166 [00:00<00:00, 1563.52it/s]
2024-04-26 03:37:41.058 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1166 ---> 269
2024-04-26 03:37:41.060 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['dprintf_formatf', 'test']
2024-04-26 03:37:41.061 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['dprintf_formatf']
2024-04-26 03:37:41.062 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 3/3 [00:03<00:00,  1.27s/it]
2024-04-26 03:37:44.892 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:37:44.893 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:37:44.901 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:37:44.901 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:37:44.901 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:37:44.901 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:37:44.901 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 224 CVE-2017-8816
filter_and_generate_data_items:  54%|█████▎    | 344/642 [00:00<00:00, 1739.68it/s]2024-04-26 03:37:52.929 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_ntlm_core_mk_ntlmv2_hash, 6, 1
2024-04-26 03:37:52.930 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['CURLcode Curl_ntlm_core_mk_ntlmv2_hash(const char *user, size_t userlen,', 'const char *domain, size_t domlen,', 'unsigned char *ntlmhash,', 'unsigned char *ntlmv2hash)', '{', 'size_t identity_len = (userlen + domlen) * 2;', 'unsigned char *identity = malloc(identity_len);', 'CURLcode result = CURLE_OK;', 'if(!identity)', 'return CURLE_OUT_OF_MEMORY;', 'ascii_uppercase_to_unicode_le(identity, user, userlen);', 'ascii_to_unicode_le(identity + (userlen << 1), domain, domlen);', 'result = Curl_hmac_md5(ntlmhash, 16, identity, curlx_uztoui(identity_len),', 'ntlmv2hash);', 'free(identity);', 'return result;', '}']
2024-04-26 03:37:52.930 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'lea r15,<MEM>', 'push r14', 'lea rax,<MEM>', 'mov r14,rsi', 'push r13', 'push r12', 'mov r12,rdi', 'mov rdi,rax', 'push rbp', 'mov rbp,rdx', 'push rbx', 'mov rbx,rcx', 'sub rsp,0x28', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,rsi', 'mov <MEM>,r8', 'mov <MEM>,r9', 'call <MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov r13,rax', 'mov rax,r14', 'test r14,r14', '<JUMP> <LOC>', 'mov r15,r12', 'lea r14,<MEM>', 'lea r12,<MEM>', 'nop <MEM>', 'movsx edi,<MEM>', 'add r15,0x1', 'add r14,0x2', 'call <curl_raw_toupper>', 'mov <MEM>,0x0', 'mov <MEM>,al', 'cmp r12,r15', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'test rbx,rbx', '<JUMP> <LOC>', 'xor eax,eax', 'nop <MEM>', 'movzx ecx,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,cl', 'add rax,0x1', 'cmp rbx,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curlx_uztoui>', 'mov rdi,<MEM>', 'mov r8,<MEM>', 'mov rdx,r13', 'mov ecx,eax', 'mov esi,0x10', 'call <curl_hmac_md5>', 'mov rdi,r13', 'mov r12d,eax', 'lea rax,<MEM>', 'call <MEM>', 'add rsp,0x28', 'mov eax,r12d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'mov r12d,0x1b', '<JUMP> <LOC>', 'nop <MEM>']
filter_and_generate_data_items: 100%|██████████| 642/642 [00:00<00:00, 1969.55it/s]
2024-04-26 03:37:53.808 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 642 ---> 0
2024-04-26 03:37:53.811 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['Curl_ntlm_core_mk_ntlmv2_hash']
2024-04-26 03:37:53.811 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['Curl_hmac_md5', 'Curl_ntlm_core_mk_ntlmv2_hash']
2024-04-26 03:37:53.813 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
2024-04-26 03:37:53.815 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:37:53.816 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:37:53.817 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:37:53.817 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:37:53.818 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:37:53.818 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:37:53.819 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 225 CVE-2019-5435
confirming functions(batch_size: 128):: 0it [00:00, ?it/s]
filter_and_generate_data_items:  52%|█████▏    | 370/707 [00:00<00:00, 1859.52it/s]2024-04-26 03:38:01.912 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_setstropt, 2, 1
2024-04-26 03:38:01.914 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['CURLcode Curl_setstropt(char **charp, const char *s)', '{', 'Curl_safefree(*charp);', 'if(s) {', 'char *str = strdup(s);', 'if(!str)', 'return CURLE_OUT_OF_MEMORY;', '*charp = str;', '}', 'return CURLE_OK;', '}']
2024-04-26 03:38:01.915 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'lea rax,<MEM>', 'push r12', 'xor r12d,r12d', 'push rbp', 'mov rbp,rsi', 'push rbx', 'mov rbx,rdi', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'test rbp,rbp', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,rbp', 'call <MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', 'mov eax,r12d', 'pop rbx', 'pop rbp', 'pop r12', 'ret', 'nop <MEM>', 'mov r12d,0x1b', '<JUMP> <LOC>']
filter_and_generate_data_items: 100%|██████████| 707/707 [00:00<00:00, 1937.43it/s]
2024-04-26 03:38:02.806 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 707 ---> 29
2024-04-26 03:38:02.810 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['Curl_setstropt']
2024-04-26 03:38:02.810 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['Curl_setstropt']
2024-04-26 03:38:02.811 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.80it/s]
2024-04-26 03:38:04.755 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9945435523986816, Curl_setstropt ---> Curl_base64_decode
2024-04-26 03:38:04.755 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 13 ---> 1
2024-04-26 03:38:04.756 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:38:04.825 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.4515662283276498e-10, fix prob: 1.0
2024-04-26 03:38:04.826 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:38:04.826 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:38:04.826 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:38:04.826 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:38:04.826 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 226 CVE-2020-8177
filter_and_generate_data_items:   0%|          | 0/250 [00:00<?, ?it/s]2024-04-26 03:38:12.579 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: tool_header_cb, 4, 1
2024-04-26 03:38:12.580 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['size_t tool_header_cb(char *ptr, size_t size, size_t nmemb, void *userdata)', '{', 'struct per_transfer *per = userdata;', 'struct HdrCbData *hdrcbdata = &per->hdrcbdata;', 'struct OutStruct *outs = &per->outs;', 'struct OutStruct *heads = &per->heads;', 'struct OutStruct *etag_save = &per->etag_save;', 'const char *str = ptr;', 'const size_t cb = size * nmemb;', 'const char *end = (char *)ptr + cb;', 'long protocol = 0;', 'size_t failure = (size && nmemb) ? 0 : 1;', 'if(!per->config)', 'return failure;', '#ifdef DEBUGBUILD', 'if(size * nmemb > (size_t)CURL_MAX_HTTP_HEADER) {', 'warnf(per->config->global, "STR"', '"STR");', 'return failure;', '}', '#endif', 'if(per->config->headerfile && heads->stream) {', 'size_t rc = fwrite(ptr, size, nmemb, heads->stream);', 'if(rc != cb)', 'return rc;', '(void)fflush(heads->stream);', '}', 'if(per->config->etag_save_file && etag_save->stream) {', 'if(curl_strnequal(str, "STR", 5)) {', 'char *etag_h = NULL;', 'char *first = NULL;', 'char *last = NULL;', 'size_t etag_length = 0;', 'etag_h = ptr;', 'first = memchr(etag_h, \'\\"\', cb);', 'if(!first) {', 'warnf(per->config->global,', '"STR");', 'return 1;', '}', 'else {', 'first++;', '}', 'last = memchr(first, \'\\"\', cb);', 'if(!last) {', 'warnf(per->config->global,', '"STR");', 'return 1;', '}', 'etag_length = (size_t)last - (size_t)first;', 'fwrite(first, size, etag_length, etag_save->stream);', "fputc('\\n', etag_save->stream);", '}', '(void)fflush(etag_save->stream);', '}', 'curl_easy_getinfo(per->curl, CURLINFO_PROTOCOL, &protocol);', 'if(hdrcbdata->honor_cd_filename &&', '(cb > 20) && checkprefix("STR", str) &&', '(protocol & (CURLPROTO_HTTPS|CURLPROTO_HTTP))) {', 'const char *p = str + 20;', 'for(;;) {', 'char *filename;', 'size_t len;', 'while(*p && (p < end) && !ISALPHA(*p))', 'p++;', 'if(p > end - 9)', 'break;', 'if(memcmp(p, "STR", 9)) {', "while((p < end) && (*p != ';'))", 'p++;', 'continue;', '}', 'p += 9;', 'warning: signed and unsigned type in conditional expression', 'len = (ssize_t)cb - (p - str);', 'filename = parse_filename(p, len);', 'if(filename) {', 'if(outs->stream) {', 'int rc;', 'if(outs->fopened)', 'fclose(outs->stream);', 'outs->stream = NULL;', 'rc = rename(outs->filename, filename);', 'if(rc != 0) {', 'warnf(per->config->global, "STR",', 'outs->filename, filename, strerror(errno));', '}', 'if(outs->alloc_filename)', 'Curl_safefree(outs->filename);', 'if(rc != 0) {', 'free(filename);', 'return failure;', '}', '}', 'outs->is_cd_filename = TRUE;', 'outs->s_isreg = TRUE;', 'outs->fopened = FALSE;', 'outs->filename = filename;', 'outs->alloc_filename = TRUE;', 'if(!tool_create_output_file(outs, per->config))', 'return failure;', '}', 'break;', '}', 'if(!outs->stream && !tool_create_output_file(outs, per->config))', 'return failure;', '}', 'if(hdrcbdata->config->show_headers &&', '(protocol &', '(CURLPROTO_HTTP|CURLPROTO_HTTPS|CURLPROTO_RTSP|CURLPROTO_FILE))) {', 'char *value = NULL;', 'if(!outs->stream && !tool_create_output_file(outs, per->config))', 'return failure;', 'if(hdrcbdata->global->isatty && hdrcbdata->global->styled_output)', "value = memchr(ptr, ':', cb);", 'if(value) {', 'size_t namelen = value - ptr;', 'fprintf(outs->stream, BOLD "STR" BOLDOFF "STR", namelen, ptr);', 'fwrite(&value[1], cb - namelen - 1, 1, outs->stream);', '}', 'else', 'fwrite(ptr, cb, 1, outs->stream);', '}', 'return cb;', '}']
2024-04-26 03:38:12.581 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'push r14', 'push r13', 'mov r13,rsi', 'push r12', 'imul r13,rdx', 'push rbp', 'push rbx', 'mov rbx,rcx', 'sub rsp,0x28', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'test rsi,rsi', 'mov <MEM>,0x0', 'sete al', 'test rdx,rdx', 'sete cl', 'or eax,ecx', 'movzx r14d,al', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov r12,rdi', 'mov rbp,rsi', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'call <fwrite@plt>', 'cmp r13,rax', '<JUMP> <LOC>', 'mov r13,rax', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x28', 'mov rax,r13', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'mov rdi,<MEM>', 'call <fflush@plt>', 'mov rax,<MEM>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,0x5', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_strnequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdx,r13', 'mov esi,0x22', 'mov rdi,r12', 'call <memchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'lea r15,<MEM>', 'mov rdx,r13', 'mov esi,0x22', 'mov rdi,r15', 'call <memchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'sub rax,r15', 'mov rcx,<MEM>', 'mov rsi,rbp', 'mov rdi,r15', 'mov rdx,rax', 'call <fwrite@plt>', 'mov rsi,<MEM>', 'mov edi,0xa', 'call <fputc@plt>', 'mov rdi,<MEM>', 'call <fflush@plt>', 'mov rdi,<MEM>', 'xor eax,eax', 'lea rdx,<MEM>', 'mov esi,0x200030', 'lea rbp,<MEM>', 'call <curl_easy_getinfo@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp r13,0x14', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test <MEM>,0x40403', '<JUMP> <LOC>', 'mov r15,<MEM>', 'test r15,r15', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdx,r13', 'mov esi,0x3a', 'mov rdi,r12', 'call <memchr@plt>', 'mov rbp,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r14,rax', 'mov rcx,r12', 'mov rdi,r15', 'xor eax,eax', 'sub r14,r12', 'lea rsi,<MEM>', 'mov rdx,r14', 'call <curl_mfprintf@plt>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov rcx,<MEM>', 'sub rsi,r14', 'mov edx,0x1', 'call <fwrite@plt>', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov edx,0x14', 'mov rsi,r12', 'lea rdi,<MEM>', 'call <curl_strnequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'test <MEM>,0x3', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movzx eax,<MEM>', 'lea r15,<MEM>', 'movabs rsi,0x656d616e656c6966', 'lea rcx,<MEM>', 'cmp r15,rdx', '<JUMP> <LOC>', 'test al,al', '<JUMP> <LOC>', 'cmp r15,rcx', '<JUMP> <LOC>', 'cmp <MEM>,rsi', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cmp r15,rdx', '<JUMP> <LOC>', 'nop <MEM>', 'cmp al,0x3b', '<JUMP> <LOC>', 'add r15,0x1', 'movzx eax,<MEM>', 'cmp rdx,r15', '<JUMP> <LOC>', 'mov r15,rdx', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rcx,r15', 'mov edx,0x1', 'mov rsi,r13', 'mov rdi,r12', 'call <fwrite@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x3d', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov r15,r13', 'mov rax,rsi', 'mov <MEM>,rsi', 'sub rax,r12', 'sub r15,rax', 'lea rdi,<MEM>', 'call <malloc@plt>', 'mov rsi,<MEM>', 'test rax,rax', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rdx,r15', 'call <memcpy@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov r15,rax', 'movzx eax,<MEM>', 'cmp al,0x27', '<JUMP> <LOC>', 'mov esi,0x3b', 'cmp al,0x22', '<JUMP> <LOC>', 'mov rdi,r15', 'call <strchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov esi,0x2f', 'mov rdi,r15', 'call <strrchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'lea r15,<MEM>', '<JUMP> <LOC>', 'mov esi,0x5c', 'mov rdi,r15', 'call <strrchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'lea r15,<MEM>', '<JUMP> <LOC>', 'mov esi,0xd', 'mov rdi,r15', 'call <strchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov esi,0xa', 'mov rdi,r15', 'call <strchr@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'cmp <MEM>,r15', '<JUMP> <LOC>', 'mov rdi,r15', 'call <strlen@plt>', 'mov rdi,<MEM>', 'mov rsi,r15', 'lea rdx,<MEM>', 'call <memmove@plt>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'call <rename@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rdi,rbp', 'mov <MEM>,0x10101', 'mov rsi,<MEM>', 'mov <MEM>,rax', 'call <tool_create_output_file>', 'test al,al', '<JUMP> <LOC>', 'nop <MEM>', 'mov r13,r14', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov r13d,0x1', 'mov rdi,<MEM>', 'xor eax,eax', 'call <warnf>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'call <tool_create_output_file>', 'test al,al', '<JUMP> <LOC>', 'mov r15,<MEM>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <free@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'call <tool_create_output_file>', 'test al,al', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rsi,<MEM>', 'lea r15,<MEM>', 'movsx esi,al', '<JUMP> <LOC>', 'movzx edi,al', 'mov <MEM>,rcx', 'mov <MEM>,rdx', 'call <curl_isalpha>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'movabs rsi,0x656d616e656c6966', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add r15,0x1', '<JUMP> <LOC>', 'call <__errno_location@plt>', 'mov edi,<MEM>', 'call <strerror@plt>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'lea rsi,<MEM>', 'mov r8,rax', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'xor eax,eax', 'call <warnf>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov r13,r14', 'call <free@plt>', '<JUMP> <LOC>', 'call <fclose@plt>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <free@plt>', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>']
filter_and_generate_data_items: 100%|██████████| 250/250 [00:00<00:00, 766.19it/s]
2024-04-26 03:38:13.674 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 250 ---> 2
2024-04-26 03:38:13.677 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['tool_header_cb', 'getparameter']
2024-04-26 03:38:13.678 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['tool_header_cb', 'getparameter']
2024-04-26 03:38:13.678 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['getparameter']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  6.54it/s]
2024-04-26 03:38:17.600 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9983206391334534, getparameter ---> getparameter
2024-04-26 03:38:17.601 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:38:17.601 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:38:17.672 | SUCCESS  | __main__:run_tc:491 - vul prob: 6.2142171373125166e-06, fix prob: 0.9999938011169434
2024-04-26 03:38:17.673 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:38:17.673 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:38:17.673 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:38:17.673 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:38:17.674 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 227 CVE-2021-22890
filter_and_generate_data_items:  59%|█████▉    | 6636/11220 [00:02<00:02, 2235.80it/s]2024-04-26 03:38:28.379 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ossl_new_session_cb, 2, 1
2024-04-26 03:38:28.380 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int ossl_new_session_cb(SSL *ssl, SSL_SESSION *ssl_sessionid)', '{', 'int res = 0;', 'struct connectdata *conn;', 'struct Curl_easy *data;', 'int sockindex;', 'curl_socket_t *sockindex_ptr;', 'int data_idx = ossl_get_ssl_data_index();', 'int connectdata_idx = ossl_get_ssl_conn_index();', 'int sockindex_idx = ossl_get_ssl_sockindex_index();', 'if(data_idx < 0 || connectdata_idx < 0 || sockindex_idx < 0)', 'return 0;', 'conn = (struct connectdata*) SSL_get_ex_data(ssl, connectdata_idx);', 'if(!conn)', 'return 0;', 'data = (struct Curl_easy *) SSL_get_ex_data(ssl, data_idx);', 'sockindex_ptr = (curl_socket_t*) SSL_get_ex_data(ssl, sockindex_idx);', 'sockindex = (int)(sockindex_ptr - conn->sock);', 'if(SSL_SET_OPTION(primary.sessionid)) {', 'bool incache;', 'void *old_ssl_sessionid = NULL;', 'Curl_ssl_sessionid_lock(data);', 'incache = !(Curl_ssl_getsessionid(data, conn, &old_ssl_sessionid, NULL,', 'sockindex));', 'if(incache) {', 'if(old_ssl_sessionid != ssl_sessionid) {', 'infof(data, "STR");', 'Curl_ssl_delsessionid(data, old_ssl_sessionid);', 'incache = FALSE;', '}', '}', 'if(!incache) {', 'if(!Curl_ssl_addsessionid(data, conn, ssl_sessionid,', '0 , sockindex)) {', 'res = 1;', '}', 'else', 'failf(data, "STR");', '}', 'Curl_ssl_sessionid_unlock(data);', '}', 'return res;', '}']
2024-04-26 03:38:28.381 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'push r14', 'mov r14,rsi', 'push r13', 'mov r13,rdi', 'push r12', 'push rbp', 'sub rsp,0x20', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'call <ossl_get_ssl_data_index>', 'mov r12d,eax', 'call <ossl_get_ssl_conn_index>', 'mov ebp,eax', 'call <ossl_get_ssl_sockindex_index>', 'mov edx,r12d', 'shr edx,0x1f', 'mov r15d,eax', 'mov eax,ebp', 'shr eax,0x1f', 'mov ecx,edx', 'or cl,al', '<JUMP> <LOC>', 'test r15d,r15d', 'js 5f7f0 <ossl_new_session_cb+OFFSET>', 'mov esi,ebp', 'mov rdi,r13', 'call <ssl_get_ex_data@plt>', 'mov rbp,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov esi,r12d', 'mov rdi,r13', 'call <ssl_get_ex_data@plt>', 'mov esi,r15d', 'mov rdi,r13', 'mov r12,rax', 'call <ssl_get_ex_data@plt>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'shr dl,0x3', 'and edx,0x1', 'test dl,dl', '<JUMP> <LOC>', 'nop <MEM>', 'xor eax,eax', 'mov rcx,<MEM>', 'xor rcx,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x20', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'xor ecx,ecx', 'cmp <MEM>,0xffffffff', 'setne cl', 'lea rdx,<MEM>', 'add rdx,rcx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'shr dl,0x3', 'and edx,0x1', '<JUMP> <LOC>', 'nop cs:<MEM>', 'lea rdx,<MEM>', 'mov rdi,r12', 'mov <MEM>,0x0', 'sub rax,rdx', 'sar rax,0x2', 'mov r13,rax', 'call <curl_ssl_sessionid_lock>', 'xor ecx,ecx', 'lea rdx,<MEM>', 'mov r8d,r13d', 'mov rsi,rbp', 'mov rdi,r12', 'call <curl_ssl_getsessionid>', 'test al,al', '<JUMP> <LOC>', 'xor eax,eax', 'cmp <MEM>,r14', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_infof>', 'mov rsi,<MEM>', 'mov rdi,r12', 'call <curl_ssl_delsessionid>', 'mov r8d,r13d', 'xor ecx,ecx', 'mov rdx,r14', 'mov rsi,rbp', 'mov rdi,r12', 'call <curl_ssl_addsessionid>', 'mov r8d,eax', 'mov eax,0x1', 'test r8d,r8d', '<JUMP> <LOC>', 'mov rdi,r12', 'mov <MEM>,eax', 'call <curl_ssl_sessionid_unlock>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_failf>', 'xor eax,eax', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'data16 nop cs:<MEM>', 'nop <MEM>']
filter_and_generate_data_items:  67%|██████▋   | 7533/11220 [00:03<00:01, 2165.25it/s]2024-04-26 03:38:28.787 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ossl_connect_step1, 3, 1
2024-04-26 03:38:28.788 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static CURLcode ossl_connect_step1(struct Curl_easy *data,', 'struct connectdata *conn, int sockindex)', '{', 'CURLcode result = CURLE_OK;', 'char *ciphers;', 'SSL_METHOD_QUAL SSL_METHOD *req_method = NULL;', 'X509_LOOKUP *lookup = NULL;', 'curl_socket_t sockfd = conn->sock[sockindex];', 'struct ssl_connect_data *connssl = &conn->ssl[sockindex];', 'ctx_option_t ctx_options = 0;', '#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME', 'bool sni;', 'const char * const hostname = SSL_HOST_NAME();', '#ifdef ENABLE_IPV6', 'struct in6_addr addr;', '#else', 'struct in_addr addr;', '#endif', '#endif', 'const long int ssl_version = SSL_CONN_CONFIG(version);', '#ifdef USE_OPENSSL_SRP', 'const enum CURL_TLSAUTH ssl_authtype = SSL_SET_OPTION(authtype);', '#endif', 'char * const ssl_cert = SSL_SET_OPTION(primary.clientcert);', 'const struct curl_blob *ssl_cert_blob = SSL_SET_OPTION(primary.cert_blob);', 'const char * const ssl_cert_type = SSL_SET_OPTION(cert_type);', 'const char * const ssl_cafile = SSL_CONN_CONFIG(CAfile);', 'const char * const ssl_capath = SSL_CONN_CONFIG(CApath);', 'const bool verifypeer = SSL_CONN_CONFIG(verifypeer);', 'const char * const ssl_crlfile = SSL_SET_OPTION(CRLfile);', 'char error_buffer[256];', 'struct ssl_backend_data *backend = connssl->backend;', 'bool imported_native_ca = false;', 'DEBUGASSERT(ssl_connect_1 == connssl->connecting_state);', 'result = ossl_seed(data);', 'if(result)', 'return result;', 'SSL_SET_OPTION_LVALUE(certverifyresult) = !X509_V_OK;', 'switch(ssl_version) {', 'case CURL_SSLVERSION_DEFAULT:', 'case CURL_SSLVERSION_TLSv1:', 'case CURL_SSLVERSION_TLSv1_0:', 'case CURL_SSLVERSION_TLSv1_1:', 'case CURL_SSLVERSION_TLSv1_2:', 'case CURL_SSLVERSION_TLSv1_3:', '#if (OPENSSL_VERSION_NUMBER >= 0x10100000L)', 'req_method = TLS_client_method();', '#else', 'req_method = SSLv23_client_method();', '#endif', 'use_sni(TRUE);', 'break;', 'case CURL_SSLVERSION_SSLv2:', '#ifdef OPENSSL_NO_SSL2', 'failf(data, OSSL_PACKAGE "STR");', 'return CURLE_NOT_BUILT_IN;', '#else', '#ifdef USE_OPENSSL_SRP', 'if(ssl_authtype == CURL_TLSAUTH_SRP)', 'return CURLE_SSL_CONNECT_ERROR;', '#endif', 'req_method = SSLv2_client_method();', 'use_sni(FALSE);', 'break;', '#endif', 'case CURL_SSLVERSION_SSLv3:', '#ifdef OPENSSL_NO_SSL3_METHOD', 'failf(data, OSSL_PACKAGE "STR");', 'return CURLE_NOT_BUILT_IN;', '#else', '#ifdef USE_OPENSSL_SRP', 'if(ssl_authtype == CURL_TLSAUTH_SRP)', 'return CURLE_SSL_CONNECT_ERROR;', '#endif', 'req_method = SSLv3_client_method();', 'use_sni(FALSE);', 'break;', '#endif', 'default:', 'failf(data, "STR");', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'if(backend->ctx)', 'SSL_CTX_free(backend->ctx);', 'backend->ctx = SSL_CTX_new(req_method);', 'if(!backend->ctx) {', 'failf(data, "STR",', 'ossl_strerror(ERR_peek_error(), error_buffer, sizeof(error_buffer)));', 'return CURLE_OUT_OF_MEMORY;', '}', '#ifdef SSL_MODE_RELEASE_BUFFERS', 'SSL_CTX_set_mode(backend->ctx, SSL_MODE_RELEASE_BUFFERS);', '#endif', '#ifdef SSL_CTRL_SET_MSG_CALLBACK', 'if(data->set.fdebug && data->set.verbose) {', 'SSL_CTX_set_msg_callback(backend->ctx, ssl_tls_trace);', 'SSL_CTX_set_msg_callback_arg(backend->ctx, conn);', '}', '#endif', 'SSL-implementations. SSL_CTX_set_options() is used to enabled those', 'work-arounds. The man page for this option states that SSL_OP_ALL enables', 'all the work-arounds and that "It is usually safe to use SSL_OP_ALL to', 'enable the bug workaround options if compatibility with somewhat broken', 'implementations is desired."', 'The "STR" option was introduced in Openssl0.9.8j. It\'s a flag to', 'disable "STR".  rfc4507bis was later turned', 'into the proper RFC5077 it seems: https://tools.ietf.org/html/rfc5077', 'The enabled extension concerns the session management. I wonder how often', 'libcurl stops a connection and then resumes a TLS session. also, sending', 'the session data is some overhead. .I suggest that you just use your', 'proposed patch (which explicitly disables TICKET).', 'If someone writes an application with libcurl and openssl who wants to', 'enable the feature, one can do this in the SSL callback.', 'SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG option enabling allowed proper', 'interoperability with web server Netscape Enterprise Server 2.0.1 which', 'was released back in 1996.', 'Due to CVE-2010-4180, option SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG has', 'become ineffective as of OpenSSL 0.9.8q and 1.0.0c. In order to mitigate', 'CVE-2010-4180 when using previous OpenSSL versions we no longer enable', 'this option regardless of OpenSSL version and SSL_OP_ALL definition.', 'OpenSSL added a work-around for a SSL 3.0/TLS 1.0 CBC vulnerability', '(https://www.openssl.org/~bodo/tls-cbc.txt). In 0.9.6e they added a bit to', 'SSL_OP_ALL that _disables_ that work-around despite the fact that', 'SSL_OP_ALL is documented to do "STR" workarounds. In order to', 'keep the secure work-around, the SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS bit', 'must not be set.', 'ctx_options = SSL_OP_ALL;', '#ifdef SSL_OP_NO_TICKET', 'ctx_options |= SSL_OP_NO_TICKET;', '#endif', '#ifdef SSL_OP_NO_COMPRESSION', 'ctx_options |= SSL_OP_NO_COMPRESSION;', '#endif', '#ifdef SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG', 'ctx_options &= ~SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG;', '#endif', '#ifdef SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS', 'if(!SSL_SET_OPTION(enable_beast))', 'ctx_options &= ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;', '#endif', 'switch(ssl_version) {', 'case CURL_SSLVERSION_SSLv2:', 'SSL_CTX_set_min_proto_version(backend->ctx, SSL2_VERSION);', 'SSL_CTX_set_max_proto_version(backend->ctx, SSL2_VERSION);', '#else', 'ctx_options |= SSL_OP_NO_SSLv3;', 'ctx_options |= SSL_OP_NO_TLSv1;', '#  if OPENSSL_VERSION_NUMBER >= 0x1000100FL', 'ctx_options |= SSL_OP_NO_TLSv1_1;', 'ctx_options |= SSL_OP_NO_TLSv1_2;', '#    ifdef TLS1_3_VERSION', 'ctx_options |= SSL_OP_NO_TLSv1_3;', '#    endif', '#  endif', '#endif', 'break;', 'case CURL_SSLVERSION_SSLv3:', 'SSL_CTX_set_min_proto_version(backend->ctx, SSL3_VERSION);', 'SSL_CTX_set_max_proto_version(backend->ctx, SSL3_VERSION);', '#else', 'ctx_options |= SSL_OP_NO_SSLv2;', 'ctx_options |= SSL_OP_NO_TLSv1;', '#  if OPENSSL_VERSION_NUMBER >= 0x1000100FL', 'ctx_options |= SSL_OP_NO_TLSv1_1;', 'ctx_options |= SSL_OP_NO_TLSv1_2;', '#    ifdef TLS1_3_VERSION', 'ctx_options |= SSL_OP_NO_TLSv1_3;', '#    endif', '#  endif', '#endif', 'break;', 'case CURL_SSLVERSION_DEFAULT:', 'ctx_options |= SSL_OP_NO_SSLv2;', 'ctx_options |= SSL_OP_NO_SSLv3;', 'result = set_ssl_version_min_max(backend->ctx, conn);', '#else', 'result = set_ssl_version_min_max_legacy(&ctx_options, data, conn,', 'sockindex);', '#endif', 'if(result != CURLE_OK)', 'return result;', 'break;', 'default:', 'failf(data, "STR");', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'SSL_CTX_set_options(backend->ctx, ctx_options);', '#ifdef HAS_NPN', 'if(conn->bits.tls_enable_npn)', 'SSL_CTX_set_next_proto_select_cb(backend->ctx, select_next_proto_cb, data);', '#endif', '#ifdef HAS_ALPN', 'if(conn->bits.tls_enable_alpn) {', 'int cur = 0;', 'unsigned char protocols[128];', '#ifdef USE_NGHTTP2', 'if(data->set.httpversion >= CURL_HTTP_VERSION_2', '#ifndef CURL_DISABLE_PROXY', '&& (!SSL_IS_PROXY() || !conn->bits.tunnel_proxy)', '#endif', ') {', 'protocols[cur++] = NGHTTP2_PROTO_VERSION_ID_LEN;', 'memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,', 'NGHTTP2_PROTO_VERSION_ID_LEN);', 'cur += NGHTTP2_PROTO_VERSION_ID_LEN;', 'infof(data, "STR", NGHTTP2_PROTO_VERSION_ID);', '}', '#endif', 'protocols[cur++] = ALPN_HTTP_1_1_LENGTH;', 'memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);', 'cur += ALPN_HTTP_1_1_LENGTH;', 'infof(data, "STR", ALPN_HTTP_1_1);', 'SSL_CTX_set_alpn_protos(backend->ctx, protocols, cur);', '}', '#endif', 'if(ssl_cert || ssl_cert_blob || ssl_cert_type) {', 'BIO *ssl_cert_bio = NULL;', 'BIO *ssl_key_bio = NULL;', 'if(ssl_cert_blob) {', 'ssl_cert_bio = BIO_new_mem_buf(ssl_cert_blob->data,', '(int)ssl_cert_blob->len);', 'if(!ssl_cert_bio)', 'result = CURLE_OUT_OF_MEMORY;', '}', 'if(!result && SSL_SET_OPTION(key_blob)) {', 'ssl_key_bio = BIO_new_mem_buf(SSL_SET_OPTION(key_blob)->data,', '(int)SSL_SET_OPTION(key_blob)->len);', 'if(!ssl_key_bio)', 'result = CURLE_OUT_OF_MEMORY;', '}', 'if(!result &&', '!cert_stuff(data, backend->ctx,', 'ssl_cert, ssl_cert_bio, ssl_cert_type,', 'SSL_SET_OPTION(key), ssl_key_bio,', 'SSL_SET_OPTION(key_type), SSL_SET_OPTION(key_passwd)))', 'result = CURLE_SSL_CERTPROBLEM;', 'if(ssl_cert_bio)', 'BIO_free(ssl_cert_bio);', 'if(ssl_key_bio)', 'BIO_free(ssl_key_bio);', 'if(result)', 'return result;', '}', 'ciphers = SSL_CONN_CONFIG(cipher_list);', 'if(!ciphers)', 'ciphers = (char *)DEFAULT_CIPHER_SELECTION;', 'if(ciphers) {', 'if(!SSL_CTX_set_cipher_list(backend->ctx, ciphers)) {', 'failf(data, "STR", ciphers);', 'return CURLE_SSL_CIPHER;', '}', 'infof(data, "STR", ciphers);', '}', '#ifdef HAVE_SSL_CTX_SET_CIPHERSUITES', '{', 'char *ciphers13 = SSL_CONN_CONFIG(cipher_list13);', 'if(ciphers13) {', 'if(!SSL_CTX_set_ciphersuites(backend->ctx, ciphers13)) {', 'failf(data, "STR", ciphers13);', 'return CURLE_SSL_CIPHER;', '}', 'infof(data, "STR", ciphers13);', '}', '}', '#endif', '#ifdef HAVE_SSL_CTX_SET_POST_HANDSHAKE_AUTH', 'SSL_CTX_set_post_handshake_auth(backend->ctx, 1);', '#endif', '#ifdef HAVE_SSL_CTX_SET_EC_CURVES', '{', 'char *curves = SSL_CONN_CONFIG(curves);', 'if(curves) {', 'if(!SSL_CTX_set1_curves_list(backend->ctx, curves)) {', 'failf(data, "STR", curves);', 'return CURLE_SSL_CIPHER;', '}', '}', '}', '#endif', '#ifdef USE_OPENSSL_SRP', 'if(ssl_authtype == CURL_TLSAUTH_SRP) {', 'char * const ssl_username = SSL_SET_OPTION(username);', 'infof(data, "STR", ssl_username);', 'if(!SSL_CTX_set_srp_username(backend->ctx, ssl_username)) {', 'failf(data, "STR");', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '}', 'if(!SSL_CTX_set_srp_password(backend->ctx, SSL_SET_OPTION(password))) {', 'failf(data, "STR");', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '}', 'if(!SSL_CONN_CONFIG(cipher_list)) {', 'infof(data, "STR");', 'if(!SSL_CTX_set_cipher_list(backend->ctx, "STR")) {', 'failf(data, "STR");', 'return CURLE_SSL_CIPHER;', '}', '}', '}', '#endif', '#if defined(USE_WIN32_CRYPTO)', 'https://stackoverflow.com/questions/9507184/', 'https://github.com/d3x0r/SACK/blob/master/src/netlib/ssl_layer.c#L1037', 'if((SSL_CONN_CONFIG(verifypeer) || SSL_CONN_CONFIG(verifyhost)) &&', '(SSL_SET_OPTION(native_ca_store))) {', 'X509_STORE *store = SSL_CTX_get_cert_store(backend->ctx);', 'HCERTSTORE hStore = CertOpenSystemStore((HCRYPTPROV_LEGACY)NULL,', 'TEXT("STR"));', 'if(hStore) {', 'PCCERT_CONTEXT pContext = NULL;', 'declared outside of the loop so that rather than malloc/free each', 'CERT_ENHKEY_USAGE *enhkey_usage = NULL;', 'DWORD enhkey_usage_size = 0;', 'the MS root store. If a certificate cannot be imported it is skipped.', "'result' is used to store only hard-fail conditions (such as out of", 'result = CURLE_OK;', 'for(;;) {', 'X509 *x509;', 'FILETIME now;', 'BYTE key_usage[2];', 'DWORD req_size;', 'const unsigned char *encoded_cert;', '#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)', 'char cert_name[256];', '#endif', 'pContext = CertEnumCertificatesInStore(hStore, pContext);', 'if(!pContext)', 'break;', '#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)', 'if(!CertGetNameStringA(pContext, CERT_NAME_SIMPLE_DISPLAY_TYPE, 0,', 'NULL, cert_name, sizeof(cert_name))) {', 'strcpy(cert_name, "STR");', '}', 'infof(data, "STR"%s\\"STR", cert_name);', '#endif', 'encoded_cert = (const unsigned char *)pContext->pbCertEncoded;', 'if(!encoded_cert)', 'continue;', 'GetSystemTimeAsFileTime(&now);', 'if(CompareFileTime(&pContext->pCertInfo->NotBefore, &now) > 0 ||', 'CompareFileTime(&now, &pContext->pCertInfo->NotAfter) > 0)', 'continue;', 'if(CertGetIntendedKeyUsage(pContext->dwCertEncodingType,', 'pContext->pCertInfo,', 'key_usage, sizeof(key_usage))) {', 'if(!(key_usage[0] & CERT_KEY_CERT_SIGN_KEY_USAGE))', 'continue;', '}', 'else if(GetLastError())', 'continue;', 'if(CertGetEnhancedKeyUsage(pContext, 0, NULL, &req_size)) {', 'if(req_size && req_size > enhkey_usage_size) {', 'void *tmp = realloc(enhkey_usage, req_size);', 'if(!tmp) {', 'failf(data, "STR");', 'result = CURLE_OUT_OF_MEMORY;', 'break;', '}', 'enhkey_usage = (CERT_ENHKEY_USAGE *)tmp;', 'enhkey_usage_size = req_size;', '}', 'if(CertGetEnhancedKeyUsage(pContext, 0, enhkey_usage, &req_size)) {', 'if(!enhkey_usage->cUsageIdentifier) {', 'good for all uses. If it returns zero, the certificate has no', 'if((HRESULT)GetLastError() != CRYPT_E_NOT_FOUND)', 'continue;', '}', 'else {', 'DWORD i;', 'bool found = false;', 'for(i = 0; i < enhkey_usage->cUsageIdentifier; ++i) {', 'if(!strcmp("STR" ,', 'enhkey_usage->rgpszUsageIdentifier[i])) {', 'found = true;', 'break;', '}', '}', 'if(!found)', 'continue;', '}', '}', 'else', 'continue;', '}', 'else', 'continue;', 'x509 = d2i_X509(NULL, &encoded_cert, pContext->cbCertEncoded);', 'if(!x509)', 'continue;', 'such as duplicate certificate, which is allowed by MS but not', 'if(X509_STORE_add_cert(store, x509) == 1) {', '#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)', 'infof(data, "STR"%s\\"STR", cert_name);', '#endif', 'imported_native_ca = true;', '}', 'X509_free(x509);', '}', 'free(enhkey_usage);', 'CertFreeCertificateContext(pContext);', 'CertCloseStore(hStore, 0);', 'if(result)', 'return result;', '}', 'if(imported_native_ca)', 'infof(data, "STR");', 'else', 'infof(data, "STR");', '}', '#endif', '#if defined(OPENSSL_VERSION_MAJOR) && (OPENSSL_VERSION_MAJOR >= 3)', '{', 'if(ssl_cafile) {', 'if(!SSL_CTX_load_verify_file(backend->ctx, ssl_cafile)) {', 'if(verifypeer && !imported_native_ca) {', 'failf(data, "STR", ssl_cafile);', 'return CURLE_SSL_CACERT_BADFILE;', '}', 'infof(data, "STR");', '}', 'infof(data, "STR", ssl_cafile);', '}', 'if(ssl_capath) {', 'if(!SSL_CTX_load_verify_dir(backend->ctx, ssl_capath)) {', 'if(verifypeer && !imported_native_ca) {', 'failf(data, "STR", ssl_capath);', 'return CURLE_SSL_CACERT_BADFILE;', '}', 'infof(data, "STR");', '}', 'infof(data, "STR", ssl_capath);', '}', '}', '#else', 'if(ssl_cafile || ssl_capath) {', 'if(!SSL_CTX_load_verify_locations(backend->ctx, ssl_cafile, ssl_capath)) {', 'if(verifypeer && !imported_native_ca) {', 'failf(data, "STR"', '"STR",', 'ssl_cafile ? ssl_cafile : "STR",', 'ssl_capath ? ssl_capath : "STR");', 'return CURLE_SSL_CACERT_BADFILE;', '}', 'infof(data, "STR"', '"STR");', '}', 'else {', 'infof(data, "STR");', '}', 'infof(data, "STR", ssl_cafile ? ssl_cafile : "STR");', 'infof(data, "STR", ssl_capath ? ssl_capath : "STR");', '}', '#endif', '#ifdef CURL_CA_FALLBACK', 'if(verifypeer && !ssl_cafile && !ssl_capath && !imported_native_ca) {', 'SSL_CTX_set_default_verify_paths(backend->ctx);', '}', '#endif', 'if(ssl_crlfile) {', 'lookup = X509_STORE_add_lookup(SSL_CTX_get_cert_store(backend->ctx),', 'X509_LOOKUP_file());', 'if(!lookup ||', '(!X509_load_crl_file(lookup, ssl_crlfile, X509_FILETYPE_PEM)) ) {', 'failf(data, "STR", ssl_crlfile);', 'return CURLE_SSL_CRL_BADFILE;', '}', 'infof(data, "STR");', 'X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),', 'X509_V_FLAG_CRL_CHECK|X509_V_FLAG_CRL_CHECK_ALL);', 'infof(data, "STR", ssl_crlfile);', '}', 'if(verifypeer) {', 'problems with server-sent legacy intermediates.  Newer versions of', 'OpenSSL do alternate chain checking by default but we do not know how to', 'determine that in a reliable manner.', 'https://rt.openssl.org/Ticket/Display.html?id=3621&user=guest&pass=guest', '#if defined(X509_V_FLAG_TRUSTED_FIRST)', 'X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),', 'X509_V_FLAG_TRUSTED_FIRST);', '#endif', '#ifdef X509_V_FLAG_PARTIAL_CHAIN', 'if(!SSL_SET_OPTION(no_partialchain) && !ssl_crlfile) {', 'trust-anchors, in the same way as self-signed root CA certificates', 'are. This allows users to verify servers using the intermediate cert', 'only, instead of needing the whole chain.', 'Due to OpenSSL bug https://github.com/openssl/openssl/issues/5081 we', 'cannot do partial chains with CRL check.', 'X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),', 'X509_V_FLAG_PARTIAL_CHAIN);', '}', '#endif', '}', 'SSL_CTX_set_verify(backend->ctx,', 'verifypeer ? SSL_VERIFY_PEER : SSL_VERIFY_NONE, NULL);', '#ifdef HAVE_KEYLOG_CALLBACK', 'if(Curl_tls_keylog_enabled()) {', 'SSL_CTX_set_keylog_callback(backend->ctx, ossl_keylog_callback);', '}', '#endif', 'SSL_CTX_set_session_cache_mode(backend->ctx,', 'SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_NO_INTERNAL);', 'SSL_CTX_sess_set_new_cb(backend->ctx, ossl_new_session_cb);', 'if(data->set.ssl.fsslctx) {', 'Curl_set_in_callback(data, true);', 'result = (*data->set.ssl.fsslctx)(data, backend->ctx,', 'data->set.ssl.fsslctxp);', 'Curl_set_in_callback(data, false);', 'if(result) {', 'failf(data, "STR");', 'return result;', '}', '}', 'if(backend->handle)', 'SSL_free(backend->handle);', 'backend->handle = SSL_new(backend->ctx);', 'if(!backend->handle) {', 'failf(data, "STR");', 'return CURLE_OUT_OF_MEMORY;', '}', '#if (OPENSSL_VERSION_NUMBER >= 0x0090808fL) && !defined(OPENSSL_NO_TLSEXT) && \\', '!defined(OPENSSL_NO_OCSP)', 'if(SSL_CONN_CONFIG(verifystatus))', 'SSL_set_tlsext_status_type(backend->handle, TLSEXT_STATUSTYPE_ocsp);', '#endif', '#if defined(OPENSSL_IS_BORINGSSL) && defined(ALLOW_RENEG)', 'SSL_set_renegotiate_mode(backend->handle, ssl_renegotiate_freely);', '#endif', 'SSL_set_connect_state(backend->handle);', 'backend->server_cert = 0x0;', '#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME', 'if((0 == Curl_inet_pton(AF_INET, hostname, &addr)) &&', '#ifdef ENABLE_IPV6', '(0 == Curl_inet_pton(AF_INET6, hostname, &addr)) &&', '#endif', 'sni) {', 'size_t nlen = strlen(hostname);', 'if((long)nlen >= data->set.buffer_size)', 'return CURLE_SSL_CONNECT_ERROR;', 'send the data lowercase and subsequently there are now numerous servers', 'Curl_strntolower(data->state.buffer, hostname, nlen);', 'data->state.buffer[nlen] = 0;', 'if(!SSL_set_tlsext_host_name(backend->handle, data->state.buffer))', 'infof(data, "STR"', '"STR");', '}', '#endif', 'if(SSL_SET_OPTION(primary.sessionid)) {', 'void *ssl_sessionid = NULL;', 'int data_idx = ossl_get_ssl_data_index();', 'int connectdata_idx = ossl_get_ssl_conn_index();', 'int sockindex_idx = ossl_get_ssl_sockindex_index();', 'if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0) {', 'SSL_set_ex_data(backend->handle, data_idx, data);', 'SSL_set_ex_data(backend->handle, connectdata_idx, conn);', 'SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);', '}', 'Curl_ssl_sessionid_lock(data);', 'if(!Curl_ssl_getsessionid(data, conn, &ssl_sessionid, NULL, sockindex)) {', 'if(!SSL_set_session(backend->handle, ssl_sessionid)) {', 'Curl_ssl_sessionid_unlock(data);', 'failf(data, "STR",', 'ossl_strerror(ERR_get_error(), error_buffer,', 'sizeof(error_buffer)));', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'infof(data, "STR");', '}', 'Curl_ssl_sessionid_unlock(data);', '}', '#ifndef CURL_DISABLE_PROXY', 'if(conn->proxy_ssl[sockindex].use) {', 'BIO *const bio = BIO_new(BIO_f_ssl());', 'SSL *handle = conn->proxy_ssl[sockindex].backend->handle;', 'DEBUGASSERT(ssl_connection_complete == conn->proxy_ssl[sockindex].state);', 'DEBUGASSERT(handle != NULL);', 'DEBUGASSERT(bio != NULL);', 'BIO_set_ssl(bio, handle, FALSE);', 'SSL_set_bio(backend->handle, bio, bio);', '}', 'else', '#endif', 'if(!SSL_set_fd(backend->handle, (int)sockfd)) {', 'failf(data, "STR",', 'ossl_strerror(ERR_get_error(), error_buffer, sizeof(error_buffer)));', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'connssl->connecting_state = ssl_connect_2;', 'return CURLE_OK;', '}']
2024-04-26 03:38:28.789 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'push r14', 'push r13', 'push r12', 'movsxd r12,edx', 'push rbp', 'mov rbp,rdi', 'push rbx', 'mov rbx,rsi', 'sub rsp,0x1c8', 'mov eax,<MEM>', 'mov <MEM>,r12d', 'mov rcx,fs:0x28', 'mov <MEM>,rcx', 'xor ecx,ecx', 'cmp <MEM>,0x2', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r14,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'and eax,0x1', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov rdi,rbp', 'mov r13,<MEM>', 'call <ossl_seed>', 'mov r15d,eax', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x1', 'cmp r14,0x3', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp r14,0x2', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x4', 'call <curl_failf>', 'nop <MEM>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x1c8', 'mov eax,r15d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'test r14,r14', 'jns 62cda <ossl_connect_step1+OFFSET>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x23', 'call <curl_failf>', '<JUMP> <LOC>', 'xchg ax,ax', 'lea rax,<MEM>', 'cmp rax,0x3', '<JUMP> <LOC>', 'call <tls_client_method@plt>', 'mov rdi,<MEM>', 'mov r9,rax', 'test rdi,rdi', '<JUMP> <LOC>', 'mov <MEM>,rax', 'call <ssl_ctx_free@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <ssl_ctx_new@plt>', 'mov <MEM>,rax', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'xor ecx,ecx', 'mov edx,0x10', 'mov esi,0x21', 'call <ssl_ctx_ctrl@plt>', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'test <MEM>,0x40', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x2', 'xor eax,0x1', 'and eax,0x1', 'test al,al', 'mov r9d,0x80024854', 'mov eax,0x80024054', 'cmovne r9,rax', 'cmp r14,0x2', '<JUMP> <LOC>', 'cmp edx,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'cmp rcx,0x6', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdx,<MEM>', 'xor ecx,ecx', 'mov esi,0x7b', 'mov <MEM>,r9', 'mov <MEM>,rdi', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', 'mov r9,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp rax,0x60000', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov edx,0x301', 'cmp rax,0x40000', '<JUMP> <LOC>', 'cmp rax,0x50000', 'mov edx,0x0', 'mov eax,0x302', 'cmove rdx,rax', 'xor ecx,ecx', 'mov esi,0x7c', 'mov <MEM>,r9', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov r9,<MEM>', 'or r9,0x2000000', 'mov rdi,<MEM>', 'mov rsi,r9', 'call <ssl_ctx_set_options@plt>', 'movzx eax,<MEM>', 'test al,0x8', '<JUMP> <LOC>', 'test al,0x10', '<JUMP> <LOC>', 'mov rax,<MEM>', 'or rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rdi,<MEM>', 'call <bio_new_mem_buf@plt>', 'mov r14,rax', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'call <do_file_type>', 'mov rcx,<MEM>', 'or rcx,<MEM>', '<JUMP> <LOC>', 'cmp eax,0x2a', '<JUMP> <LOC>', 'test r14,r14', '<JUMP> <LOC>', 'mov rdi,r14', 'call <bio_free@plt>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r14', 'call <ssl_ctx_set_cipher_list@plt>', 'mov rdx,r14', 'test eax,eax', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_infof>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'mov rdi,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rsi,r14', 'call <ssl_ctx_set_ciphersuites@plt>', 'mov rdx,r14', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,<MEM>', 'mov esi,0x1', 'call <ssl_ctx_set_post_handshake_auth@plt>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor edx,edx', 'mov rcx,r14', 'mov esi,0x5c', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'or rax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <x509_lookup_file@plt>', 'mov rdi,<MEM>', 'mov r14,rax', 'call <ssl_ctx_get_cert_store@plt>', 'mov rsi,r14', 'mov rdi,rax', 'call <x509_store_add_lookup@plt>', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r14,<MEM>', 'mov edx,0x1', 'mov rsi,r14', 'call <x509_load_crl_file@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,<MEM>', 'call <ssl_ctx_get_cert_store@plt>', 'mov esi,0xc', 'mov rdi,rax', 'call <x509_store_set_flags@plt>', 'mov rdx,r14', 'mov rdi,rbp', 'xor eax,eax', 'lea rsi,<MEM>', 'call <curl_infof>', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'movzx esi,<MEM>', 'xor edx,edx', 'call <ssl_ctx_set_verify@plt>', 'call <curl_tls_keylog_enabled>', 'test al,al', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor ecx,ecx', 'mov edx,0x301', 'mov esi,0x2c', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_sess_set_new_cb@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov esi,0x1', 'mov rdi,rbp', 'call <curl_set_in_callback>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,<MEM>', 'call <MEM>', 'xor esi,esi', 'mov rdi,rbp', 'mov r14d,eax', 'call <curl_set_in_callback>', 'test r14d,r14d', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <ssl_free@plt>', 'mov rdi,<MEM>', 'call <ssl_new@plt>', 'mov <MEM>,rax', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x2', 'and eax,0x1', 'test al,al', '<JUMP> <LOC>', 'call <ssl_set_connect_state@plt>', 'mov rsi,<MEM>', 'mov edi,0x2', 'mov <MEM>,0x0', 'lea r14,<MEM>', 'mov rdx,r14', 'call <inet_pton@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x3', 'and eax,0x1', 'test al,al', '<JUMP> <LOC>', 'lea rax,<MEM>', 'lea r14,<MEM>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'call <bio_f_ssl@plt>', 'mov rdi,rax', 'call <bio_new@plt>', 'xor edx,edx', 'mov esi,0x6d', 'mov rbp,rax', 'mov rax,<MEM>', 'mov rdi,rbp', 'mov rcx,<MEM>', 'call <bio_ctrl@plt>', 'mov rdi,<MEM>', 'mov rdx,rbp', 'mov rsi,rbp', 'call <ssl_set_bio@plt>', 'lea rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x1', 'cmp r14,0x3', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x4', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r14,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'and eax,0x1', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'xor ecx,ecx', 'cmp <MEM>,0xffffffff', 'setne cl', 'lea rax,<MEM>', 'add rax,rcx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x2', 'xor eax,0x1', 'and eax,0x1', '<JUMP> <LOC>', 'xchg ax,ax', 'xor ecx,ecx', 'cmp <MEM>,0xffffffff', 'setne cl', 'lea rax,<MEM>', 'add rax,rcx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rcx', 'mov esi,<MEM>', 'call <bio_new_mem_buf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r15d,0x1b', '<JUMP> <LOC>', 'nop <MEM>', 'xor ecx,ecx', 'mov edx,0x2', 'mov esi,0x7b', 'mov <MEM>,r9', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', 'xor ecx,ecx', 'mov edx,0x2', 'mov esi,0x7c', 'call <ssl_ctx_ctrl@plt>', 'mov r9,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp rax,0x70000', 'mov edx,0x0', 'mov eax,0x304', 'cmove rdx,rax', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_msg_callback@plt>', 'mov rdi,<MEM>', 'mov rcx,rbx', 'xor edx,edx', 'mov esi,0x10', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'movabs rax,0x312e312f70747468', 'mov rdi,rbp', 'lea rdx,<MEM>', 'mov <MEM>,0x8', 'mov <MEM>,rax', 'lea rsi,<MEM>', 'xor eax,eax', 'lea r14,<MEM>', 'call <curl_infof>', 'mov rdi,<MEM>', 'mov edx,0x9', 'mov rsi,r14', 'call <ssl_ctx_set_alpn_protos@plt>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rdx,rbp', 'lea rsi,<MEM>', 'call <ssl_ctx_set_next_proto_select_cb@plt>', 'movzx eax,<MEM>', '<JUMP> <LOC>', 'nop', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov <MEM>,eax', 'call <ssl_ctx_set_default_passwd_cb_userdata@plt>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_default_passwd_cb@plt>', 'mov eax,<MEM>', 'cmp eax,0x2a', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'xor esi,esi', 'call <d2i_x509_bio@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,rax', 'mov <MEM>,rax', 'call <ssl_ctx_use_certificate@plt>', 'mov r8,<MEM>', 'mov <MEM>,eax', 'mov rdi,r8', 'call <x509_free@plt>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'or rax,r14', '<JUMP> <LOC>', 'mov edx,0x2', 'test rdi,rdi', '<JUMP> <LOC>', 'xor esi,esi', 'call <d2i_privatekey_bio@plt>', 'mov r8,rax', 'test r8,r8', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r8', 'mov <MEM>,r8', 'call <ssl_ctx_use_privatekey@plt>', 'mov r8,<MEM>', 'mov <MEM>,eax', 'mov rdi,r8', 'call <evp_pkey_free@plt>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <ssl_new@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,rax', 'mov <MEM>,rax', 'call <ssl_get_certificate@plt>', 'mov r8,<MEM>', 'test rax,rax', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdi,rax', 'mov <MEM>,r8', 'call <x509_get_pubkey@plt>', 'mov r8,<MEM>', 'mov <MEM>,rax', 'mov rdi,r8', 'call <ssl_get_privatekey@plt>', 'mov r9,<MEM>', 'mov rsi,rax', 'mov rdi,r9', 'call <evp_pkey_copy_parameters@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <evp_pkey_free@plt>', 'mov r8,<MEM>', 'mov rdi,r8', 'mov <MEM>,r8', 'call <ssl_get_privatekey@plt>', 'mov rdi,rax', 'mov <MEM>,rax', 'call <evp_pkey_id@plt>', 'mov rdi,<MEM>', 'mov r8,<MEM>', 'cmp eax,0x6', '<JUMP> <LOC>', 'mov rdi,r8', 'call <ssl_free@plt>', 'mov rdi,<MEM>', 'call <ssl_ctx_check_private_key@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <bio_free@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp eax,0x2b', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor esi,esi', 'call <d2i_pkcs12_bio@plt>', 'mov r9,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,r9', 'call <pkcs12_pbe_add@plt>', 'mov r9,<MEM>', 'mov rsi,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'lea r8,<MEM>', 'mov rdi,r9', 'call <pkcs12_parse@plt>', 'mov r9,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,r9', 'call <pkcs12_free@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_use_certificate@plt>', 'cmp eax,0x1', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', 'mov rdi,<MEM>', 'call <evp_pkey_free@plt>', 'mov rdi,<MEM>', 'call <x509_free@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <openssl_sk_pop_free@plt>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <bio_free@plt>', 'test r14,r14', '<JUMP> <LOC>', 'mov rdi,r14', 'call <bio_free@plt>', 'mov r15d,0x3a', '<JUMP> <LOC>', 'nop <MEM>', 'test rax,rax', '<JUMP> <LOC>', 'xor edx,edx', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'call <err_peek_error@plt>', 'lea rsi,<MEM>', 'mov r15d,0x1b', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov rdx,r14', 'call <curl_infof>', 'mov rdi,<MEM>', 'mov rsi,r14', 'call <ssl_ctx_set_srp_username@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_set_srp_password@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'sete al', 'test al,al', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_cipher_list@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_load_verify_locations@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'lea rsi,<MEM>', 'xor eax,eax', 'mov rdi,rbp', 'call <curl_infof>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'test rcx,rcx', 'cmovne rax,rcx', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'mov esi,<MEM>', 'call <ssl_set_fd@plt>', 'test eax,eax', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', 'nop cs:<MEM>', 'mov r15d,0x23', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'call <ssl_ctx_get_cert_store@plt>', 'mov esi,0x8000', 'mov rdi,rax', 'call <x509_store_set_flags@plt>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x4', 'xor eax,0x1', 'and eax,0x1', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'test al,al', '<JUMP> <LOC>', 'call <ssl_ctx_get_cert_store@plt>', 'mov esi,0x80000', 'mov rdi,rax', 'call <x509_store_set_flags@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_keylog_callback@plt>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x52', 'lea rsi,<MEM>', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x2', 'and eax,0x1', '<JUMP> <LOC>', 'mov rdx,r14', 'mov r14,<MEM>', 'mov edi,0xa', 'mov rsi,r14', 'call <inet_pton@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,r14', 'mov <MEM>,r14', 'call <strlen@plt>', 'mov r14,rax', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'mov rdx,rax', 'call <curl_strntolower>', 'mov rax,<MEM>', 'xor edx,edx', 'mov esi,0x37', 'mov <MEM>,0x0', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_infof>', '<JUMP> <LOC>', 'xor ecx,ecx', 'mov edx,0x1', 'mov esi,0x41', 'call <ssl_ctrl@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x3', 'and eax,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'call <ossl_get_ssl_data_index>', 'mov <MEM>,eax', 'call <ossl_get_ssl_conn_index>', 'mov r14d,eax', 'call <ossl_get_ssl_sockindex_index>', 'mov esi,<MEM>', 'mov r8d,eax', 'mov eax,r14d', 'mov edx,esi', 'not eax', 'not edx', 'shr eax,0x1f', 'shr edx,0x1f', 'test dl,al', '<JUMP> <LOC>', 'test r8d,r8d', 'js 63d36 <ossl_connect_step1+OFFSET>', 'mov rdi,<MEM>', 'mov rdx,rbp', 'mov <MEM>,r8d', 'call <ssl_set_ex_data@plt>', 'mov rdi,<MEM>', 'mov rdx,rbx', 'mov esi,r14d', 'call <ssl_set_ex_data@plt>', 'mov r8d,<MEM>', 'mov rdi,<MEM>', 'lea rdx,<MEM>', 'mov esi,r8d', 'call <ssl_set_ex_data@plt>', 'mov rdi,rbp', 'call <curl_ssl_sessionid_lock>', 'mov r8d,<MEM>', 'xor ecx,ecx', 'mov rsi,rbx', 'lea rdx,<MEM>', 'mov rdi,rbp', 'call <curl_ssl_getsessionid>', 'test al,al', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'call <ssl_set_session@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,rbp', 'call <curl_ssl_sessionid_unlock>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'mov edx,0x303', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <bio_free@plt>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor r8d,r8d', 'xor edx,edx', 'mov esi,0xd', 'lea rcx,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,rax', 'call <engine_ctrl@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor r8d,r8d', 'xor edx,edx', 'lea rcx,<MEM>', 'mov r9d,0x1', 'lea rsi,<MEM>', 'call <engine_ctrl_cmd@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <ssl_ctx_use_certificate@plt>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_failf>', 'mov rdi,<MEM>', 'call <x509_free@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <err_clear_error@plt>', 'mov rcx,<MEM>', 'xor esi,esi', 'mov rdi,<MEM>', 'lea rdx,<MEM>', 'call <pem_read_bio_x509_aux@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,rax', 'mov <MEM>,rax', 'call <ssl_ctx_use_certificate@plt>', 'mov <MEM>,eax', 'call <err_peek_error@plt>', 'mov r8,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,r8', 'call <x509_free@plt>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rsi,<MEM>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'sete al', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'test rcx,rcx', 'cmovne rax,rcx', 'mov <MEM>,rax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'lea rsi,<MEM>', 'mov r15d,0x4d', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x4', 'xor eax,0x1', 'and eax,0x1', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,r14d', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdx,r14', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x2b', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x2b', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edi,edi', 'call <x509_free@plt>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rdi,<MEM>', 'call <do_file_type>', 'cmp eax,0x2a', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'cmp eax,0x2b', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <x509_free@plt>', 'mov rax,<MEM>', 'or rax,r14', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <ui_create_method@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', 'call <ui_openssl@plt>', 'mov rdi,rax', 'call <ui_method_get_opener@plt>', 'mov r9,<MEM>', 'mov rsi,rax', 'mov rdi,r9', 'call <ui_method_set_opener@plt>', 'call <ui_openssl@plt>', 'mov rdi,rax', 'call <ui_method_get_closer@plt>', 'mov r9,<MEM>', 'mov rsi,rax', 'mov rdi,r9', 'call <ui_method_set_closer@plt>', 'mov r9,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r9', 'call <ui_method_set_reader@plt>', 'mov r9,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r9', 'call <ui_method_set_writer@plt>', 'mov r9,<MEM>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'mov rdx,r9', 'mov <MEM>,r9', 'call <engine_load_private_key@plt>', 'mov r9,<MEM>', 'mov <MEM>,rax', 'mov rdi,r9', 'call <ui_destroy_method@plt>', 'mov r8,<MEM>', 'test r8,r8', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r8', 'mov <MEM>,r8', 'call <ssl_ctx_use_privatekey@plt>', 'mov r8,<MEM>', 'sub eax,0x1', '<JUMP> <LOC>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_failf>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <evp_pkey_free@plt>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov edx,0x2', 'call <ssl_ctx_use_certificate_file@plt>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_use_certificate_chain_file@plt>', 'mov <MEM>,eax', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'or rax,r14', '<JUMP> <LOC>', 'mov edx,0x1', 'test rdi,rdi', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_use_privatekey_file@plt>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x1b', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,0x7', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <curl_strncasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <ossl_set_engine>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'test rcx,rcx', 'cmovne rax,rcx', 'test rsi,rsi', 'mov rcx,rax', 'lea rax,<MEM>', 'cmovne rax,rsi', 'lea rsi,<MEM>', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', '<JUMP> <LOC>', 'mov <MEM>,r9', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <pkcs12_free@plt>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edi,edi', 'call <x509_free@plt>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_use_privatekey@plt>', 'mov <MEM>,eax', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,r14', 'mov <MEM>,rax', '<JUMP> <LOC>', 'call <bio_s_file@plt>', 'mov rdi,rax', 'call <bio_new@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov edx,0x3', 'mov esi,0x6c', 'mov rdi,rax', 'mov <MEM>,rax', 'call <bio_ctrl@plt>', 'mov r8,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,r8', 'xor esi,esi', 'mov <MEM>,r8', 'call <d2i_pkcs12_bio@plt>', 'mov r8,<MEM>', 'mov <MEM>,rax', 'mov rdi,r8', 'call <bio_free@plt>', 'mov r9,<MEM>', 'test r9,r9', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rdi,rbp', 'mov r15d,0x23', 'call <curl_ssl_sessionid_unlock>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,r14', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov <MEM>,r8', 'call <evp_pkey_get1_rsa@plt>', 'mov rdi,rax', 'mov <MEM>,rax', 'call <rsa_flags@plt>', 'mov rdi,<MEM>', 'mov <MEM>,eax', 'call <rsa_free@plt>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <ssl_free@plt>', 'test <MEM>,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rcx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <ssl_ctx_check_private_key@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,rbx', 'mov rbx,<MEM>', 'mov <MEM>,rbp', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <openssl_sk_pop@plt>', 'mov rdi,rbx', 'mov rsi,rax', 'mov rbp,rax', 'call <ssl_ctx_add_client_ca@plt>', 'test eax,eax', '<JUMP> <LOC>', 'xor edx,edx', 'mov rcx,rbp', 'mov esi,0xe', 'mov rdi,rbx', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <openssl_sk_num@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rbp,<MEM>', 'mov rbx,<MEM>', 'mov rdi,<MEM>', 'call <evp_pkey_free@plt>', 'mov rdi,<MEM>', 'call <x509_free@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <openssl_sk_pop_free@plt>', 'mov rax,<MEM>', 'or rax,r14', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,0x7', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <curl_strncasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <ossl_set_engine>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,r8', 'call <evp_pkey_free@plt>', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'xor esi,esi', 'call <pem_read_bio_privatekey@plt>', 'mov r8,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor ecx,ecx', 'xor edx,edx', 'mov esi,0x58', 'mov <MEM>,r8', 'call <ssl_ctx_ctrl@plt>', 'mov r8,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,r8', 'mov <MEM>,rbx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor edx,edx', 'mov rcx,rbx', 'mov esi,0x59', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'lea rdx,<MEM>', 'xor esi,esi', 'call <pem_read_bio_x509@plt>', 'mov rbx,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'call <err_peek_last_error@plt>', 'mov r8,<MEM>', 'mov edx,eax', 'shr edx,0x18', 'cmp edx,0x9', '<JUMP> <LOC>', 'and eax,0xfff', 'cmp eax,0x6c', '<JUMP> <LOC>', 'mov <MEM>,r8', 'call <err_clear_error@plt>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <x509_free@plt>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov <MEM>,r8', 'lea rsi,<MEM>', 'call <curl_failf>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <bio_free@plt>', '<JUMP> <LOC>', 'mov r8,<MEM>', 'mov rdi,rbx', 'mov <MEM>,r8', 'call <x509_free@plt>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <x509_free@plt>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', '<JUMP> <LOC>', 'mov r8,rbp', 'mov rbp,<MEM>', 'mov rdi,r8', 'call <x509_free@plt>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov r8,rbp', 'mov rbp,<MEM>', 'mov rdi,r8', 'call <x509_free@plt>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'data16 nop cs:<MEM>', 'nop <MEM>']
filter_and_generate_data_items:  86%|████████▌ | 9596/11220 [00:04<00:00, 2453.23it/s]2024-04-26 03:38:29.658 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_ssl_getsessionid, 4, 2
2024-04-26 03:38:29.659 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['bool Curl_ssl_getsessionid(struct Curl_easy *data,', 'struct connectdata *conn,', 'void **ssl_sessionid,', 'int sockindex)', '{', 'struct Curl_ssl_session *check;', 'size_t i;', 'long *general_age;', 'bool no_match = TRUE;', '#ifndef CURL_DISABLE_PROXY', 'const bool isProxy = CONNECT_PROXY_SSL();', 'struct ssl_primary_config * const ssl_config = isProxy ?', '&conn->proxy_ssl_config :', '&conn->ssl_config;', 'const char * const name = isProxy ?', 'conn->http_proxy.host.name : conn->host.name;', 'int port = isProxy ? (int)conn->port : conn->remote_port;', '#else', 'struct ssl_primary_config * const ssl_config = &conn->ssl_config;', 'const char * const name = conn->host.name;', 'int port = conn->remote_port;', '(void)sockindex;', '#endif', '*ssl_sessionid = NULL;', 'DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));', 'if(!SSL_SET_OPTION(primary.sessionid))', 'return TRUE;', 'if(SSLSESSION_SHARED(data))', 'general_age = &data->share->sessionage;', 'else', 'general_age = &data->state.sessionage;', 'for(i = 0; i < data->set.general_ssl.max_ssl_sessions; i++) {', 'check = &data->state.session[i];', 'if(!check->sessionid)', 'continue;', 'if(strcasecompare(name, check->name) &&', '((!conn->bits.conn_to_host && !check->conn_to_host) ||', '(conn->bits.conn_to_host && check->conn_to_host &&', 'strcasecompare(conn->conn_to_host.name, check->conn_to_host))) &&', '((!conn->bits.conn_to_port && check->conn_to_port == -1) ||', '(conn->bits.conn_to_port && check->conn_to_port != -1 &&', 'conn->conn_to_port == check->conn_to_port)) &&', '(port == check->remote_port) &&', 'strcasecompare(conn->handler->scheme, check->scheme) &&', 'Curl_ssl_config_matches(ssl_config, &check->ssl_config)) {', '*ssl_sessionid = check->sessionid;', 'if(idsize)', '*idsize = check->idsize;', 'no_match = FALSE;', 'break;', '}', '}', 'return no_match;', '}']
2024-04-26 03:38:29.667 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'mov r15,rdi', 'push r14', 'push r13', 'push r12', 'push rbp', 'push rbx', 'mov rbx,rsi', 'sub rsp,0x38', 'cmp <MEM>,0x2', 'mov <MEM>,rdx', 'mov <MEM>,rcx', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rbp,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'movzx r12d,<MEM>', 'shr r12b,0x3', 'xor r12d,0x1', 'and r12d,0x1', 'test r12b,r12b', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'test <MEM>,0x10', '<JUMP> <LOC>', 'add rax,0xc8', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor r13d,r13d', 'nop <MEM>', 'lea rdx,<MEM>', 'shl rdx,0x5', 'add rdx,<MEM>', 'cmp <MEM>,0x0', 'mov r14,rdx', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'call <curl_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov rsi,<MEM>', 'test al,0x1', '<JUMP> <LOC>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov esi,<MEM>', 'test al,0x2', '<JUMP> <LOC>', 'cmp esi,0xffffffff', '<JUMP> <LOC>', 'cmp <MEM>,esi', '<JUMP> <LOC>', 'nop <MEM>', 'add r13,0x1', 'cmp <MEM>,r13', '<JUMP> <LOC>', 'mov r12d,0x1', 'add rsp,0x38', 'mov eax,r12d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp esi,0xffffffff', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <curl_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <curl_ssl_config_matches>', 'test al,al', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'add rax,0x1', 'mov <MEM>,rax', 'mov rcx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rcx,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop cs:<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'add r13,0x1', 'cmp <MEM>,r13', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'mov eax,<MEM>', 'movsxd r8,r8d', 'cmp <MEM>,0x0', 'mov <MEM>,eax', 'mov eax,<MEM>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rbp,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx r12d,<MEM>', 'shr r12b,0x3', 'xor r12d,0x1', 'and r12d,0x1', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov rbp,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,rcx', 'mov rcx,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>']
filter_and_generate_data_items:  94%|█████████▎| 10497/11220 [00:04<00:00, 2555.29it/s]2024-04-26 03:38:29.928 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_ssl_addsessionid, 5, 2
2024-04-26 03:38:29.930 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['CURLcode Curl_ssl_addsessionid(struct Curl_easy *data,', 'struct connectdata *conn,', 'void *ssl_sessionid,', 'size_t idsize,', 'int sockindex)', '{', 'size_t i;', 'struct Curl_ssl_session *store = &data->state.session[0];', 'char *clone_host;', 'char *clone_conn_to_host;', 'int conn_to_port;', 'long *general_age;', '#ifndef CURL_DISABLE_PROXY', 'const bool isProxy = CONNECT_PROXY_SSL();', 'struct ssl_primary_config * const ssl_config = isProxy ?', '&conn->proxy_ssl_config :', '&conn->ssl_config;', 'const char *hostname = isProxy ? conn->http_proxy.host.name :', 'conn->host.name;', '#else', 'const bool isProxy = FALSE;', 'struct ssl_primary_config * const ssl_config = &conn->ssl_config;', 'const char *hostname = conn->host.name;', '(void)sockindex;', '#endif', 'DEBUGASSERT(SSL_SET_OPTION(primary.sessionid));', 'clone_host = strdup(hostname);', 'if(!clone_host)', 'if(conn->bits.conn_to_host) {', 'clone_conn_to_host = strdup(conn->conn_to_host.name);', 'if(!clone_conn_to_host) {', 'free(clone_host);', '}', '}', 'else', 'clone_conn_to_host = NULL;', 'if(conn->bits.conn_to_port)', 'conn_to_port = conn->conn_to_port;', 'else', 'conn_to_port = -1;', 'if(SSLSESSION_SHARED(data)) {', 'general_age = &data->share->sessionage;', '}', 'else {', 'general_age = &data->state.sessionage;', '}', 'for(i = 1; (i < data->set.general_ssl.max_ssl_sessions) &&', 'data->state.session[i].sessionid; i++) {', 'if(data->state.session[i].age < oldest_age) {', 'oldest_age = data->state.session[i].age;', 'store = &data->state.session[i];', '}', '}', 'if(i == data->set.general_ssl.max_ssl_sessions)', 'Curl_ssl_kill_session(store);', 'else', 'store->sessionid = ssl_sessionid;', 'store->idsize = idsize;', 'free(store->name);', 'free(store->conn_to_host);', 'store->remote_port = isProxy ? (int)conn->port : conn->remote_port;', 'store->scheme = conn->handler->scheme;', 'if(!Curl_clone_primary_ssl_config(ssl_config, &store->ssl_config)) {', 'Curl_free_primary_ssl_config(&store->ssl_config);', 'free(clone_host);', 'free(clone_conn_to_host);', 'return CURLE_OUT_OF_MEMORY;', '}', 'return CURLE_OK;', '}']
2024-04-26 03:38:29.931 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'mov r15,rdi', 'push r14', 'push r13', 'push r12', 'mov r12,rsi', 'push rbp', 'push rbx', 'sub rsp,0x38', 'mov rbx,<MEM>', 'cmp <MEM>,0x2', 'mov <MEM>,rdx', 'mov <MEM>,rcx', 'mov r14,<MEM>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x0', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'lea r13,<MEM>', 'call <MEM>', 'mov rbp,rax', 'test rax,rax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'test al,0x1', '<JUMP> <LOC>', 'xor r13d,r13d', 'mov r11d,0xffffffff', 'test al,0x2', '<JUMP> <LOC>', 'mov r11d,<MEM>', 'mov r8,<MEM>', 'test r8,r8', '<JUMP> <LOC>', 'test <MEM>,0x10', '<JUMP> <LOC>', 'add r8,0xc8', 'mov rdi,<MEM>', 'cmp rdi,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9d,0x1', 'add rax,0xa0', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdx,<MEM>', 'cmp rdx,r14', '<JUMP> <LOC>', 'mov r14,rdx', 'mov rbx,rax', 'add r9,0x1', 'add rax,0xa0', 'cmp rdi,r9', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov r15,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rbx,<MEM>', 'mov <MEM>,r11d', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'call <MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov edx,<MEM>', 'mov r11d,<MEM>', 'mov <MEM>,rbp', 'mov eax,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,r13', 'test edx,edx', 'mov <MEM>,r11d', 'cmovne eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'lea r12,<MEM>', 'mov rsi,r12', 'mov rax,<MEM>', 'mov <MEM>,rax', 'call <curl_clone_primary_ssl_config>', 'mov r8d,eax', 'xor eax,eax', 'test r8b,r8b', '<JUMP> <LOC>', 'add rsp,0x38', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov r13,rax', 'test rax,rax', '<JUMP> <LOC>', 'movzx eax,<MEM>', '<JUMP> <LOC>', 'xchg ax,ax', 'lea r8,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'movsxd r8,r8d', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x1', 'mov rdi,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea r15,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,rbx', 'mov <MEM>,r8', 'mov r15,rbx', 'mov <MEM>,r11d', 'call <curl_ssl_kill_session>', 'mov r8,<MEM>', 'mov r11d,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'add rsp,0x38', 'mov eax,0x1b', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'mov rdi,r12', 'call <curl_free_primary_ssl_config>', 'mov rdi,rbp', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,r13', 'call <MEM>', 'add rsp,0x38', 'mov eax,0x1b', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'lea rax,<MEM>', 'mov rdi,rbp', 'call <MEM>', 'mov eax,0x1b', '<JUMP> <LOC>', 'data16 nop cs:<MEM>', 'nop']
filter_and_generate_data_items: 100%|██████████| 11220/11220 [00:04<00:00, 2389.75it/s]
2024-04-26 03:38:31.010 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 11220 ---> 250
2024-04-26 03:38:31.014 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['bearssl_connect_step1', 'bearssl_connect_step3', 'gtls_connect_step3', 'mbed_connect_step1', 'mbed_connect_step3', 'mesalink_connect_step1', 'mesalink_connect_step3', 'ossl_init', 'ossl_new_session_cb', 'ossl_connect_step1', 'schannel_connect_step1', 'schannel_connect_step3', 'Curl_ssl_getsessionid', 'Curl_ssl_addsessionid', 'wolfssl_connect_step1']
2024-04-26 03:38:31.015 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_init', 'ossl_new_session_cb', 'ossl_connect_step1', 'Curl_ssl_getsessionid', 'Curl_ssl_addsessionid']
2024-04-26 03:38:31.015 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.80s/it]
2024-04-26 03:39:07.334 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.39064331352710724, gtls_connect_step3 ---> Curl_proxyCONNECT
2024-04-26 03:39:07.335 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5428206324577332, mbed_connect_step1 ---> Curl_proxyCONNECT
2024-04-26 03:39:07.335 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.49444611370563507, mbed_connect_step3 ---> Curl_proxyCONNECT
2024-04-26 03:39:07.335 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7369465827941895, mesalink_connect_step1 ---> Curl_proxyCONNECT
2024-04-26 03:39:07.335 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5722289681434631, mesalink_connect_step3 ---> Curl_http_readwrite_headers
2024-04-26 03:39:07.335 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5064445734024048, ossl_connect_step1 ---> servercert
2024-04-26 03:39:07.335 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6575794219970703, schannel_connect_step1 ---> servercert
2024-04-26 03:39:07.336 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5924668510754904, schannel_connect_step3 ---> servercert
2024-04-26 03:39:07.336 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6372289657592773, Curl_ssl_getsessionid ---> curl_share_setopt
2024-04-26 03:39:07.336 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6022125482559204, wolfssl_connect_step1 ---> Curl_proxyCONNECT
2024-04-26 03:39:07.336 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.38403552770614624, bearssl_connect_step1 ---> servercert
2024-04-26 03:39:07.336 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 32 ---> 11
2024-04-26 03:39:07.336 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:39:07.409 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.9870083928108215, fix prob: 0.01299164816737175
2024-04-26 03:39:07.409 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:39:07.410 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:39:07.410 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:39:07.410 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:39:07.412 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 228 CVE-2021-22901
filter_and_generate_data_items: 100%|██████████| 751/751 [00:00<00:00, 1332.66it/s]
2024-04-26 03:39:15.723 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ossl_connect_step1, 3, 1
2024-04-26 03:39:15.725 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static CURLcode ossl_connect_step1(struct Curl_easy *data,', 'struct connectdata *conn, int sockindex)', '{', 'CURLcode result = CURLE_OK;', 'char *ciphers;', 'SSL_METHOD_QUAL SSL_METHOD *req_method = NULL;', 'X509_LOOKUP *lookup = NULL;', 'curl_socket_t sockfd = conn->sock[sockindex];', 'struct ssl_connect_data *connssl = &conn->ssl[sockindex];', 'ctx_option_t ctx_options = 0;', '#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME', 'bool sni;', 'const char * const hostname = SSL_HOST_NAME();', '#ifdef ENABLE_IPV6', 'struct in6_addr addr;', '#else', 'struct in_addr addr;', '#endif', '#endif', 'const long int ssl_version = SSL_CONN_CONFIG(version);', '#ifdef USE_OPENSSL_SRP', 'const enum CURL_TLSAUTH ssl_authtype = SSL_SET_OPTION(authtype);', '#endif', 'char * const ssl_cert = SSL_SET_OPTION(primary.clientcert);', 'const struct curl_blob *ssl_cert_blob = SSL_SET_OPTION(primary.cert_blob);', 'const char * const ssl_cert_type = SSL_SET_OPTION(cert_type);', 'const char * const ssl_cafile = SSL_CONN_CONFIG(CAfile);', 'const char * const ssl_capath = SSL_CONN_CONFIG(CApath);', 'const bool verifypeer = SSL_CONN_CONFIG(verifypeer);', 'const char * const ssl_crlfile = SSL_SET_OPTION(CRLfile);', 'char error_buffer[256];', 'struct ssl_backend_data *backend = connssl->backend;', 'bool imported_native_ca = false;', 'DEBUGASSERT(ssl_connect_1 == connssl->connecting_state);', 'result = ossl_seed(data);', 'if(result)', 'return result;', 'SSL_SET_OPTION_LVALUE(certverifyresult) = !X509_V_OK;', 'switch(ssl_version) {', 'case CURL_SSLVERSION_DEFAULT:', 'case CURL_SSLVERSION_TLSv1:', 'case CURL_SSLVERSION_TLSv1_0:', 'case CURL_SSLVERSION_TLSv1_1:', 'case CURL_SSLVERSION_TLSv1_2:', 'case CURL_SSLVERSION_TLSv1_3:', '#if (OPENSSL_VERSION_NUMBER >= 0x10100000L)', 'req_method = TLS_client_method();', '#else', 'req_method = SSLv23_client_method();', '#endif', 'use_sni(TRUE);', 'break;', 'case CURL_SSLVERSION_SSLv2:', '#ifdef OPENSSL_NO_SSL2', 'failf(data, OSSL_PACKAGE "STR");', 'return CURLE_NOT_BUILT_IN;', '#else', '#ifdef USE_OPENSSL_SRP', 'if(ssl_authtype == CURL_TLSAUTH_SRP)', 'return CURLE_SSL_CONNECT_ERROR;', '#endif', 'req_method = SSLv2_client_method();', 'use_sni(FALSE);', 'break;', '#endif', 'case CURL_SSLVERSION_SSLv3:', '#ifdef OPENSSL_NO_SSL3_METHOD', 'failf(data, OSSL_PACKAGE "STR");', 'return CURLE_NOT_BUILT_IN;', '#else', '#ifdef USE_OPENSSL_SRP', 'if(ssl_authtype == CURL_TLSAUTH_SRP)', 'return CURLE_SSL_CONNECT_ERROR;', '#endif', 'req_method = SSLv3_client_method();', 'use_sni(FALSE);', 'break;', '#endif', 'default:', 'failf(data, "STR");', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'if(backend->ctx)', 'SSL_CTX_free(backend->ctx);', 'backend->ctx = SSL_CTX_new(req_method);', 'if(!backend->ctx) {', 'failf(data, "STR",', 'ossl_strerror(ERR_peek_error(), error_buffer, sizeof(error_buffer)));', 'return CURLE_OUT_OF_MEMORY;', '}', '#ifdef SSL_MODE_RELEASE_BUFFERS', 'SSL_CTX_set_mode(backend->ctx, SSL_MODE_RELEASE_BUFFERS);', '#endif', '#ifdef SSL_CTRL_SET_MSG_CALLBACK', 'if(data->set.fdebug && data->set.verbose) {', 'SSL_CTX_set_msg_callback(backend->ctx, ossl_trace);', 'SSL_CTX_set_msg_callback_arg(backend->ctx, conn);', 'set_logger(conn, data);', '}', '#endif', 'SSL-implementations. SSL_CTX_set_options() is used to enabled those', 'work-arounds. The man page for this option states that SSL_OP_ALL enables', 'all the work-arounds and that "It is usually safe to use SSL_OP_ALL to', 'enable the bug workaround options if compatibility with somewhat broken', 'implementations is desired."', 'The "STR" option was introduced in Openssl0.9.8j. It\'s a flag to', 'disable "STR".  rfc4507bis was later turned', 'into the proper RFC5077 it seems: https://tools.ietf.org/html/rfc5077', 'The enabled extension concerns the session management. I wonder how often', 'libcurl stops a connection and then resumes a TLS session. also, sending', 'the session data is some overhead. .I suggest that you just use your', 'proposed patch (which explicitly disables TICKET).', 'If someone writes an application with libcurl and openssl who wants to', 'enable the feature, one can do this in the SSL callback.', 'SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG option enabling allowed proper', 'interoperability with web server Netscape Enterprise Server 2.0.1 which', 'was released back in 1996.', 'Due to CVE-2010-4180, option SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG has', 'become ineffective as of OpenSSL 0.9.8q and 1.0.0c. In order to mitigate', 'CVE-2010-4180 when using previous OpenSSL versions we no longer enable', 'this option regardless of OpenSSL version and SSL_OP_ALL definition.', 'OpenSSL added a work-around for a SSL 3.0/TLS 1.0 CBC vulnerability', '(https://www.openssl.org/~bodo/tls-cbc.txt). In 0.9.6e they added a bit to', 'SSL_OP_ALL that _disables_ that work-around despite the fact that', 'SSL_OP_ALL is documented to do "STR" workarounds. In order to', 'keep the secure work-around, the SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS bit', 'must not be set.', 'ctx_options = SSL_OP_ALL;', '#ifdef SSL_OP_NO_TICKET', 'ctx_options |= SSL_OP_NO_TICKET;', '#endif', '#ifdef SSL_OP_NO_COMPRESSION', 'ctx_options |= SSL_OP_NO_COMPRESSION;', '#endif', '#ifdef SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG', 'ctx_options &= ~SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG;', '#endif', '#ifdef SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS', 'if(!SSL_SET_OPTION(enable_beast))', 'ctx_options &= ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;', '#endif', 'switch(ssl_version) {', 'case CURL_SSLVERSION_SSLv2:', 'SSL_CTX_set_min_proto_version(backend->ctx, SSL2_VERSION);', 'SSL_CTX_set_max_proto_version(backend->ctx, SSL2_VERSION);', '#else', 'ctx_options |= SSL_OP_NO_SSLv3;', 'ctx_options |= SSL_OP_NO_TLSv1;', '#  if OPENSSL_VERSION_NUMBER >= 0x1000100FL', 'ctx_options |= SSL_OP_NO_TLSv1_1;', 'ctx_options |= SSL_OP_NO_TLSv1_2;', '#    ifdef TLS1_3_VERSION', 'ctx_options |= SSL_OP_NO_TLSv1_3;', '#    endif', '#  endif', '#endif', 'break;', 'case CURL_SSLVERSION_SSLv3:', 'SSL_CTX_set_min_proto_version(backend->ctx, SSL3_VERSION);', 'SSL_CTX_set_max_proto_version(backend->ctx, SSL3_VERSION);', '#else', 'ctx_options |= SSL_OP_NO_SSLv2;', 'ctx_options |= SSL_OP_NO_TLSv1;', '#  if OPENSSL_VERSION_NUMBER >= 0x1000100FL', 'ctx_options |= SSL_OP_NO_TLSv1_1;', 'ctx_options |= SSL_OP_NO_TLSv1_2;', '#    ifdef TLS1_3_VERSION', 'ctx_options |= SSL_OP_NO_TLSv1_3;', '#    endif', '#  endif', '#endif', 'break;', 'case CURL_SSLVERSION_DEFAULT:', 'ctx_options |= SSL_OP_NO_SSLv2;', 'ctx_options |= SSL_OP_NO_SSLv3;', 'result = set_ssl_version_min_max(backend->ctx, conn);', '#else', 'result = set_ssl_version_min_max_legacy(&ctx_options, data, conn,', 'sockindex);', '#endif', 'if(result != CURLE_OK)', 'return result;', 'break;', 'default:', 'failf(data, "STR");', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'SSL_CTX_set_options(backend->ctx, ctx_options);', '#ifdef HAS_NPN', 'if(conn->bits.tls_enable_npn)', 'SSL_CTX_set_next_proto_select_cb(backend->ctx, select_next_proto_cb, data);', '#endif', '#ifdef HAS_ALPN', 'if(conn->bits.tls_enable_alpn) {', 'int cur = 0;', 'unsigned char protocols[128];', '#ifdef USE_NGHTTP2', 'if(data->state.httpwant >= CURL_HTTP_VERSION_2', '#ifndef CURL_DISABLE_PROXY', '&& (!SSL_IS_PROXY() || !conn->bits.tunnel_proxy)', '#endif', ') {', 'protocols[cur++] = NGHTTP2_PROTO_VERSION_ID_LEN;', 'memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,', 'NGHTTP2_PROTO_VERSION_ID_LEN);', 'cur += NGHTTP2_PROTO_VERSION_ID_LEN;', 'infof(data, "STR", NGHTTP2_PROTO_VERSION_ID);', '}', '#endif', 'protocols[cur++] = ALPN_HTTP_1_1_LENGTH;', 'memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);', 'cur += ALPN_HTTP_1_1_LENGTH;', 'infof(data, "STR", ALPN_HTTP_1_1);', 'if(SSL_CTX_set_alpn_protos(backend->ctx, protocols, cur)) {', 'failf(data, "STR");', 'return CURLE_SSL_CONNECT_ERROR;', '}', '}', '#endif', 'if(ssl_cert || ssl_cert_blob || ssl_cert_type) {', 'if(!result &&', '!cert_stuff(data, backend->ctx,', 'ssl_cert, ssl_cert_blob, ssl_cert_type,', 'SSL_SET_OPTION(key), SSL_SET_OPTION(key_blob),', 'SSL_SET_OPTION(key_type), SSL_SET_OPTION(key_passwd)))', 'result = CURLE_SSL_CERTPROBLEM;', 'if(result)', 'return result;', '}', 'ciphers = SSL_CONN_CONFIG(cipher_list);', 'if(!ciphers)', 'ciphers = (char *)DEFAULT_CIPHER_SELECTION;', 'if(ciphers) {', 'if(!SSL_CTX_set_cipher_list(backend->ctx, ciphers)) {', 'failf(data, "STR", ciphers);', 'return CURLE_SSL_CIPHER;', '}', 'infof(data, "STR", ciphers);', '}', '#ifdef HAVE_SSL_CTX_SET_CIPHERSUITES', '{', 'char *ciphers13 = SSL_CONN_CONFIG(cipher_list13);', 'if(ciphers13) {', 'if(!SSL_CTX_set_ciphersuites(backend->ctx, ciphers13)) {', 'failf(data, "STR", ciphers13);', 'return CURLE_SSL_CIPHER;', '}', 'infof(data, "STR", ciphers13);', '}', '}', '#endif', '#ifdef HAVE_SSL_CTX_SET_POST_HANDSHAKE_AUTH', 'SSL_CTX_set_post_handshake_auth(backend->ctx, 1);', '#endif', '#ifdef HAVE_SSL_CTX_SET_EC_CURVES', '{', 'char *curves = SSL_CONN_CONFIG(curves);', 'if(curves) {', 'if(!SSL_CTX_set1_curves_list(backend->ctx, curves)) {', 'failf(data, "STR", curves);', 'return CURLE_SSL_CIPHER;', '}', '}', '}', '#endif', '#ifdef USE_OPENSSL_SRP', 'if(ssl_authtype == CURL_TLSAUTH_SRP) {', 'char * const ssl_username = SSL_SET_OPTION(username);', 'infof(data, "STR", ssl_username);', 'if(!SSL_CTX_set_srp_username(backend->ctx, ssl_username)) {', 'failf(data, "STR");', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '}', 'if(!SSL_CTX_set_srp_password(backend->ctx, SSL_SET_OPTION(password))) {', 'failf(data, "STR");', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '}', 'if(!SSL_CONN_CONFIG(cipher_list)) {', 'infof(data, "STR");', 'if(!SSL_CTX_set_cipher_list(backend->ctx, "STR")) {', 'failf(data, "STR");', 'return CURLE_SSL_CIPHER;', '}', '}', '}', '#endif', '#if defined(USE_WIN32_CRYPTO)', 'https://stackoverflow.com/questions/9507184/', 'https://github.com/d3x0r/SACK/blob/master/src/netlib/ssl_layer.c#L1037', 'if((SSL_CONN_CONFIG(verifypeer) || SSL_CONN_CONFIG(verifyhost)) &&', '(SSL_SET_OPTION(native_ca_store))) {', 'X509_STORE *store = SSL_CTX_get_cert_store(backend->ctx);', 'HCERTSTORE hStore = CertOpenSystemStore((HCRYPTPROV_LEGACY)NULL,', 'TEXT("STR"));', 'if(hStore) {', 'PCCERT_CONTEXT pContext = NULL;', 'declared outside of the loop so that rather than malloc/free each', 'CERT_ENHKEY_USAGE *enhkey_usage = NULL;', 'DWORD enhkey_usage_size = 0;', 'the MS root store. If a certificate cannot be imported it is skipped.', "'result' is used to store only hard-fail conditions (such as out of", 'result = CURLE_OK;', 'for(;;) {', 'X509 *x509;', 'FILETIME now;', 'BYTE key_usage[2];', 'DWORD req_size;', 'const unsigned char *encoded_cert;', '#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)', 'char cert_name[256];', '#endif', 'pContext = CertEnumCertificatesInStore(hStore, pContext);', 'if(!pContext)', 'break;', '#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)', 'if(!CertGetNameStringA(pContext, CERT_NAME_SIMPLE_DISPLAY_TYPE, 0,', 'NULL, cert_name, sizeof(cert_name))) {', 'strcpy(cert_name, "STR");', '}', 'infof(data, "STR"%s\\"STR", cert_name);', '#endif', 'encoded_cert = (const unsigned char *)pContext->pbCertEncoded;', 'if(!encoded_cert)', 'continue;', 'GetSystemTimeAsFileTime(&now);', 'if(CompareFileTime(&pContext->pCertInfo->NotBefore, &now) > 0 ||', 'CompareFileTime(&now, &pContext->pCertInfo->NotAfter) > 0)', 'continue;', 'if(CertGetIntendedKeyUsage(pContext->dwCertEncodingType,', 'pContext->pCertInfo,', 'key_usage, sizeof(key_usage))) {', 'if(!(key_usage[0] & CERT_KEY_CERT_SIGN_KEY_USAGE))', 'continue;', '}', 'else if(GetLastError())', 'continue;', 'if(CertGetEnhancedKeyUsage(pContext, 0, NULL, &req_size)) {', 'if(req_size && req_size > enhkey_usage_size) {', 'void *tmp = realloc(enhkey_usage, req_size);', 'if(!tmp) {', 'failf(data, "STR");', 'result = CURLE_OUT_OF_MEMORY;', 'break;', '}', 'enhkey_usage = (CERT_ENHKEY_USAGE *)tmp;', 'enhkey_usage_size = req_size;', '}', 'if(CertGetEnhancedKeyUsage(pContext, 0, enhkey_usage, &req_size)) {', 'if(!enhkey_usage->cUsageIdentifier) {', 'good for all uses. If it returns zero, the certificate has no', 'if((HRESULT)GetLastError() != CRYPT_E_NOT_FOUND)', 'continue;', '}', 'else {', 'DWORD i;', 'bool found = false;', 'for(i = 0; i < enhkey_usage->cUsageIdentifier; ++i) {', 'if(!strcmp("STR" ,', 'enhkey_usage->rgpszUsageIdentifier[i])) {', 'found = true;', 'break;', '}', '}', 'if(!found)', 'continue;', '}', '}', 'else', 'continue;', '}', 'else', 'continue;', 'x509 = d2i_X509(NULL, &encoded_cert, pContext->cbCertEncoded);', 'if(!x509)', 'continue;', 'such as duplicate certificate, which is allowed by MS but not', 'if(X509_STORE_add_cert(store, x509) == 1) {', '#if defined(DEBUGBUILD) && !defined(CURL_DISABLE_VERBOSE_STRINGS)', 'infof(data, "STR"%s\\"STR", cert_name);', '#endif', 'imported_native_ca = true;', '}', 'X509_free(x509);', '}', 'free(enhkey_usage);', 'CertFreeCertificateContext(pContext);', 'CertCloseStore(hStore, 0);', 'if(result)', 'return result;', '}', 'if(imported_native_ca)', 'infof(data, "STR");', 'else', 'infof(data, "STR");', '}', '#endif', '#if defined(OPENSSL_VERSION_MAJOR) && (OPENSSL_VERSION_MAJOR >= 3)', '{', 'if(ssl_cafile) {', 'if(!SSL_CTX_load_verify_file(backend->ctx, ssl_cafile)) {', 'if(verifypeer && !imported_native_ca) {', 'failf(data, "STR", ssl_cafile);', 'return CURLE_SSL_CACERT_BADFILE;', '}', 'infof(data, "STR");', '}', 'infof(data, "STR", ssl_cafile);', '}', 'if(ssl_capath) {', 'if(!SSL_CTX_load_verify_dir(backend->ctx, ssl_capath)) {', 'if(verifypeer && !imported_native_ca) {', 'failf(data, "STR", ssl_capath);', 'return CURLE_SSL_CACERT_BADFILE;', '}', 'infof(data, "STR");', '}', 'infof(data, "STR", ssl_capath);', '}', '}', '#else', 'if(ssl_cafile || ssl_capath) {', 'if(!SSL_CTX_load_verify_locations(backend->ctx, ssl_cafile, ssl_capath)) {', 'if(verifypeer && !imported_native_ca) {', 'failf(data, "STR"', '"STR",', 'ssl_cafile ? ssl_cafile : "STR",', 'ssl_capath ? ssl_capath : "STR");', 'return CURLE_SSL_CACERT_BADFILE;', '}', 'infof(data, "STR"', '"STR");', '}', 'else {', 'infof(data, "STR");', '}', 'infof(data, "STR", ssl_cafile ? ssl_cafile : "STR");', 'infof(data, "STR", ssl_capath ? ssl_capath : "STR");', '}', '#endif', '#ifdef CURL_CA_FALLBACK', 'if(verifypeer && !ssl_cafile && !ssl_capath && !imported_native_ca) {', 'SSL_CTX_set_default_verify_paths(backend->ctx);', '}', '#endif', 'if(ssl_crlfile) {', 'lookup = X509_STORE_add_lookup(SSL_CTX_get_cert_store(backend->ctx),', 'X509_LOOKUP_file());', 'if(!lookup ||', '(!X509_load_crl_file(lookup, ssl_crlfile, X509_FILETYPE_PEM)) ) {', 'failf(data, "STR", ssl_crlfile);', 'return CURLE_SSL_CRL_BADFILE;', '}', 'infof(data, "STR");', 'X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),', 'X509_V_FLAG_CRL_CHECK|X509_V_FLAG_CRL_CHECK_ALL);', 'infof(data, "STR", ssl_crlfile);', '}', 'if(verifypeer) {', 'problems with server-sent legacy intermediates.  Newer versions of', 'OpenSSL do alternate chain checking by default but we do not know how to', 'determine that in a reliable manner.', 'https://rt.openssl.org/Ticket/Display.html?id=3621&user=guest&pass=guest', '#if defined(X509_V_FLAG_TRUSTED_FIRST)', 'X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),', 'X509_V_FLAG_TRUSTED_FIRST);', '#endif', '#ifdef X509_V_FLAG_PARTIAL_CHAIN', 'if(!SSL_SET_OPTION(no_partialchain) && !ssl_crlfile) {', 'trust-anchors, in the same way as self-signed root CA certificates', 'are. This allows users to verify servers using the intermediate cert', 'only, instead of needing the whole chain.', 'Due to OpenSSL bug https://github.com/openssl/openssl/issues/5081 we', 'cannot do partial chains with CRL check.', 'X509_STORE_set_flags(SSL_CTX_get_cert_store(backend->ctx),', 'X509_V_FLAG_PARTIAL_CHAIN);', '}', '#endif', '}', 'SSL_CTX_set_verify(backend->ctx,', 'verifypeer ? SSL_VERIFY_PEER : SSL_VERIFY_NONE, NULL);', '#ifdef HAVE_KEYLOG_CALLBACK', 'if(Curl_tls_keylog_enabled()) {', 'SSL_CTX_set_keylog_callback(backend->ctx, ossl_keylog_callback);', '}', '#endif', 'SSL_CTX_set_session_cache_mode(backend->ctx,', 'SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_NO_INTERNAL);', 'SSL_CTX_sess_set_new_cb(backend->ctx, ossl_new_session_cb);', 'if(data->set.ssl.fsslctx) {', 'Curl_set_in_callback(data, true);', 'result = (*data->set.ssl.fsslctx)(data, backend->ctx,', 'data->set.ssl.fsslctxp);', 'Curl_set_in_callback(data, false);', 'if(result) {', 'failf(data, "STR");', 'return result;', '}', '}', 'if(backend->handle)', 'SSL_free(backend->handle);', 'backend->handle = SSL_new(backend->ctx);', 'if(!backend->handle) {', 'failf(data, "STR");', 'return CURLE_OUT_OF_MEMORY;', '}', '#if (OPENSSL_VERSION_NUMBER >= 0x0090808fL) && !defined(OPENSSL_NO_TLSEXT) && \\', '!defined(OPENSSL_NO_OCSP)', 'if(SSL_CONN_CONFIG(verifystatus))', 'SSL_set_tlsext_status_type(backend->handle, TLSEXT_STATUSTYPE_ocsp);', '#endif', '#if defined(OPENSSL_IS_BORINGSSL) && defined(ALLOW_RENEG)', 'SSL_set_renegotiate_mode(backend->handle, ssl_renegotiate_freely);', '#endif', 'SSL_set_connect_state(backend->handle);', 'backend->server_cert = 0x0;', '#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME', 'if((0 == Curl_inet_pton(AF_INET, hostname, &addr)) &&', '#ifdef ENABLE_IPV6', '(0 == Curl_inet_pton(AF_INET6, hostname, &addr)) &&', '#endif', 'sni) {', 'size_t nlen = strlen(hostname);', 'if((long)nlen >= data->set.buffer_size)', 'return CURLE_SSL_CONNECT_ERROR;', 'send the data lowercase and subsequently there are now numerous servers', 'Curl_strntolower(data->state.buffer, hostname, nlen);', 'data->state.buffer[nlen] = 0;', 'if(!SSL_set_tlsext_host_name(backend->handle, data->state.buffer))', 'infof(data, "STR"', '"STR");', '}', '#endif', 'if(SSL_SET_OPTION(primary.sessionid)) {', 'void *ssl_sessionid = NULL;', 'int data_idx = ossl_get_ssl_data_index();', 'int connectdata_idx = ossl_get_ssl_conn_index();', 'int sockindex_idx = ossl_get_ssl_sockindex_index();', 'int proxy_idx = ossl_get_proxy_index();', 'if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&', 'proxy_idx >= 0) {', 'SSL_set_ex_data(backend->handle, data_idx, data);', 'SSL_set_ex_data(backend->handle, connectdata_idx, conn);', 'SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);', '#ifndef CURL_DISABLE_PROXY', 'SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:', 'NULL);', '#else', 'SSL_set_ex_data(backend->handle, proxy_idx, NULL);', '#endif', '}', 'Curl_ssl_sessionid_lock(data);', 'if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,', '&ssl_sessionid, NULL, sockindex)) {', 'if(!SSL_set_session(backend->handle, ssl_sessionid)) {', 'Curl_ssl_sessionid_unlock(data);', 'failf(data, "STR",', 'ossl_strerror(ERR_get_error(), error_buffer,', 'sizeof(error_buffer)));', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'infof(data, "STR");', '}', 'Curl_ssl_sessionid_unlock(data);', '}', '#ifndef CURL_DISABLE_PROXY', 'if(conn->proxy_ssl[sockindex].use) {', 'BIO *const bio = BIO_new(BIO_f_ssl());', 'SSL *handle = conn->proxy_ssl[sockindex].backend->handle;', 'DEBUGASSERT(ssl_connection_complete == conn->proxy_ssl[sockindex].state);', 'DEBUGASSERT(handle != NULL);', 'DEBUGASSERT(bio != NULL);', 'BIO_set_ssl(bio, handle, FALSE);', 'SSL_set_bio(backend->handle, bio, bio);', '}', 'else', '#endif', 'if(!SSL_set_fd(backend->handle, (int)sockfd)) {', 'failf(data, "STR",', 'ossl_strerror(ERR_get_error(), error_buffer, sizeof(error_buffer)));', 'return CURLE_SSL_CONNECT_ERROR;', '}', 'connssl->connecting_state = ssl_connect_2;', 'return CURLE_OK;', '}']
2024-04-26 03:39:15.725 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'push r14', 'push r13', 'push r12', 'movsxd r12,edx', 'push rbp', 'mov rbp,rdi', 'push rbx', 'mov rbx,rsi', 'sub rsp,0x1c8', 'mov eax,<MEM>', 'mov <MEM>,r12d', 'mov rcx,fs:0x28', 'mov <MEM>,rcx', 'xor ecx,ecx', 'cmp <MEM>,0x2', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r14,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'and eax,0x1', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov rdi,rbp', 'mov r13,<MEM>', 'call <ossl_seed>', 'mov r15d,eax', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x1', 'cmp r14,0x3', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp r14,0x2', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x4', 'call <curl_failf>', 'nop <MEM>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x1c8', 'mov eax,r15d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'test r14,r14', 'jns 62dba <ossl_connect_step1+OFFSET>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x23', 'call <curl_failf>', '<JUMP> <LOC>', 'xchg ax,ax', 'lea rax,<MEM>', 'cmp rax,0x3', '<JUMP> <LOC>', 'call <tls_client_method@plt>', 'mov rdi,<MEM>', 'mov r9,rax', 'test rdi,rdi', '<JUMP> <LOC>', 'mov <MEM>,rax', 'call <ssl_ctx_free@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <ssl_ctx_new@plt>', 'mov <MEM>,rax', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'xor ecx,ecx', 'mov edx,0x10', 'mov esi,0x21', 'call <ssl_ctx_ctrl@plt>', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'test <MEM>,0x40', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x2', 'xor eax,0x1', 'and eax,0x1', 'test al,al', 'mov r9d,0x80024854', 'mov eax,0x80024054', 'cmovne r9,rax', 'cmp r14,0x2', '<JUMP> <LOC>', 'cmp edx,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'cmp rcx,0x6', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdx,<MEM>', 'xor ecx,ecx', 'mov esi,0x7b', 'mov <MEM>,r9', 'mov <MEM>,rdi', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', 'mov r9,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp rax,0x60000', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov edx,0x301', 'cmp rax,0x40000', '<JUMP> <LOC>', 'cmp rax,0x50000', 'mov edx,0x0', 'mov eax,0x302', 'cmove rdx,rax', 'xor ecx,ecx', 'mov esi,0x7c', 'mov <MEM>,r9', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov r9,<MEM>', 'or r9,0x2000000', 'mov rdi,<MEM>', 'mov rsi,r9', 'call <ssl_ctx_set_options@plt>', 'movzx eax,<MEM>', 'test al,0x8', '<JUMP> <LOC>', 'test al,0x10', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'or rdx,<MEM>', 'setne cl', 'or rdx,<MEM>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rdi,<MEM>', 'mov r14,<MEM>', 'mov <MEM>,cl', 'call <do_file_type>', 'mov r8d,eax', 'cmp eax,0x2a', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'test cl,cl', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r14', 'call <ssl_ctx_set_cipher_list@plt>', 'mov rdx,r14', 'test eax,eax', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_infof>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'mov rdi,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rsi,r14', 'call <ssl_ctx_set_ciphersuites@plt>', 'mov rdx,r14', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,<MEM>', 'mov esi,0x1', 'call <ssl_ctx_set_post_handshake_auth@plt>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor edx,edx', 'mov rcx,r14', 'mov esi,0x5c', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'or rax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <x509_lookup_file@plt>', 'mov rdi,<MEM>', 'mov r14,rax', 'call <ssl_ctx_get_cert_store@plt>', 'mov rsi,r14', 'mov rdi,rax', 'call <x509_store_add_lookup@plt>', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r14,<MEM>', 'mov edx,0x1', 'mov rsi,r14', 'call <x509_load_crl_file@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,<MEM>', 'call <ssl_ctx_get_cert_store@plt>', 'mov esi,0xc', 'mov rdi,rax', 'call <x509_store_set_flags@plt>', 'mov rdx,r14', 'mov rdi,rbp', 'xor eax,eax', 'lea rsi,<MEM>', 'call <curl_infof>', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'movzx esi,<MEM>', 'xor edx,edx', 'call <ssl_ctx_set_verify@plt>', 'call <curl_tls_keylog_enabled>', 'test al,al', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor ecx,ecx', 'mov edx,0x301', 'mov esi,0x2c', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_sess_set_new_cb@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov esi,0x1', 'mov rdi,rbp', 'call <curl_set_in_callback>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,<MEM>', 'call <MEM>', 'xor esi,esi', 'mov rdi,rbp', 'mov r14d,eax', 'call <curl_set_in_callback>', 'test r14d,r14d', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <ssl_free@plt>', 'mov rdi,<MEM>', 'call <ssl_new@plt>', 'mov <MEM>,rax', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'shr dl,0x2', 'and edx,0x1', 'test dl,dl', '<JUMP> <LOC>', 'call <ssl_set_connect_state@plt>', 'mov rsi,<MEM>', 'mov edi,0x2', 'mov <MEM>,0x0', 'lea r14,<MEM>', 'mov rdx,r14', 'call <inet_pton@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x3', 'and eax,0x1', 'test al,al', '<JUMP> <LOC>', 'lea rax,<MEM>', 'lea r14,<MEM>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'call <bio_f_ssl@plt>', 'mov rdi,rax', 'call <bio_new@plt>', 'xor edx,edx', 'mov esi,0x6d', 'mov rbp,rax', 'mov rax,<MEM>', 'mov rdi,rbp', 'mov rcx,<MEM>', 'call <bio_ctrl@plt>', 'mov rdi,<MEM>', 'mov rdx,rbp', 'mov rsi,rbp', 'call <ssl_set_bio@plt>', 'lea rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x1', 'cmp r14,0x3', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x4', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r14,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'and eax,0x1', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'xor ecx,ecx', 'cmp <MEM>,0xffffffff', 'setne cl', 'lea rax,<MEM>', 'add rax,rcx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x2', 'xor eax,0x1', 'and eax,0x1', '<JUMP> <LOC>', 'nop cs:<MEM>', 'xor ecx,ecx', 'cmp <MEM>,0xffffffff', 'setne cl', 'lea rax,<MEM>', 'add rax,rcx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'xor ecx,ecx', 'mov edx,0x2', 'mov esi,0x7b', 'mov <MEM>,r9', 'call <ssl_ctx_ctrl@plt>', 'mov rdi,<MEM>', 'xor ecx,ecx', 'mov edx,0x2', 'mov esi,0x7c', 'call <ssl_ctx_ctrl@plt>', 'mov r9,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp rax,0x70000', 'mov edx,0x0', 'mov eax,0x304', 'cmove rdx,rax', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_msg_callback@plt>', 'mov rdi,<MEM>', 'mov rcx,rbx', 'xor edx,edx', 'mov esi,0x10', 'call <ssl_ctx_ctrl@plt>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rbp', '<JUMP> <LOC>', 'nop <MEM>', 'movabs rax,0x312e312f70747468', 'lea rdx,<MEM>', 'mov rdi,rbp', 'mov <MEM>,0x8', 'mov <MEM>,rax', 'lea rsi,<MEM>', 'xor eax,eax', 'lea r14,<MEM>', 'call <curl_infof>', 'mov rdi,<MEM>', 'mov edx,0x9', 'mov rsi,r14', 'call <ssl_ctx_set_alpn_protos@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x23', 'call <curl_failf>', '<JUMP> <LOC>', 'nop', 'mov rdi,<MEM>', 'mov rdx,rbp', 'lea rsi,<MEM>', 'call <ssl_ctx_set_next_proto_select_cb@plt>', 'movzx eax,<MEM>', '<JUMP> <LOC>', 'nop', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,r14', 'mov <MEM>,r8d', 'call <ssl_ctx_set_default_passwd_cb_userdata@plt>', 'lea rsi,<MEM>', 'mov rdi,r14', 'call <ssl_ctx_set_default_passwd_cb@plt>', 'mov r8d,<MEM>', 'cmp r8d,0x2a', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp r8d,0x1', '<JUMP> <LOC>', 'cmp r8d,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,r8d', 'mov <MEM>,rcx', 'mov esi,<MEM>', 'call <bio_new_mem_buf@plt>', 'test rax,rax', '<JUMP> <LOC>', 'xor esi,esi', 'mov rdi,rax', 'mov <MEM>,rax', 'call <d2i_x509_bio@plt>', 'mov r10,<MEM>', 'mov r8d,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rsi,rax', 'mov rdi,r14', 'mov <MEM>,r8d', 'mov <MEM>,r10', 'mov <MEM>,rax', 'call <ssl_ctx_use_certificate@plt>', 'mov r9,<MEM>', 'mov <MEM>,eax', 'mov rdi,r9', 'call <x509_free@plt>', 'mov r10,<MEM>', 'mov rdi,r10', 'call <bio_free@plt>', 'mov edx,<MEM>', 'mov r8d,<MEM>', 'cmp edx,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'or rax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,r8d', 'mov <MEM>,rcx', 'mov esi,<MEM>', 'call <bio_new_mem_buf@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'cmp r8d,0x1', '<JUMP> <LOC>', 'xor esi,esi', 'mov rdi,rax', 'mov <MEM>,rax', 'call <d2i_privatekey_bio@plt>', 'mov r9,<MEM>', 'mov r8,rax', 'test r8,r8', '<JUMP> <LOC>', 'mov rsi,r8', 'mov rdi,r14', 'mov <MEM>,r9', 'mov <MEM>,r8', 'call <ssl_ctx_use_privatekey@plt>', 'mov r8,<MEM>', 'mov <MEM>,eax', 'mov rdi,r8', 'call <evp_pkey_free@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <bio_free@plt>', 'mov edx,<MEM>', 'cmp edx,0x1', '<JUMP> <LOC>', 'mov rdi,r14', 'call <ssl_new@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,rax', 'mov <MEM>,rax', 'call <ssl_get_certificate@plt>', 'mov r8,<MEM>', 'test rax,rax', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdi,rax', 'mov <MEM>,r8', 'call <x509_get_pubkey@plt>', 'mov r8,<MEM>', 'mov <MEM>,rax', 'mov rdi,r8', 'call <ssl_get_privatekey@plt>', 'mov r9,<MEM>', 'mov rsi,rax', 'mov rdi,r9', 'call <evp_pkey_copy_parameters@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <evp_pkey_free@plt>', 'mov r8,<MEM>', 'mov rdi,r8', 'mov <MEM>,r8', 'call <ssl_get_privatekey@plt>', 'mov rdi,rax', 'mov <MEM>,rax', 'call <evp_pkey_id@plt>', 'mov rdi,<MEM>', 'mov r8,<MEM>', 'cmp eax,0x6', '<JUMP> <LOC>', 'mov rdi,r8', 'call <ssl_free@plt>', 'mov rdi,r14', 'call <ssl_ctx_check_private_key@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', 'xchg ax,ax', 'mov r15d,0x3a', '<JUMP> <LOC>', 'nop <MEM>', 'cmp r8d,0x2b', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rcx', 'mov esi,<MEM>', 'call <bio_new_mem_buf@plt>', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'xor esi,esi', 'mov <MEM>,rax', 'call <d2i_pkcs12_bio@plt>', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'call <bio_free@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <pkcs12_pbe_add@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'lea r8,<MEM>', 'call <pkcs12_parse@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <pkcs12_free@plt>', 'mov rsi,<MEM>', 'mov rdi,r14', 'call <ssl_ctx_use_certificate@plt>', 'cmp eax,0x1', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', 'mov rdi,<MEM>', 'call <evp_pkey_free@plt>', 'mov rdi,<MEM>', 'call <x509_free@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <openssl_sk_pop_free@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'test rax,rax', '<JUMP> <LOC>', 'xor edx,edx', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'call <err_peek_error@plt>', 'lea rsi,<MEM>', 'mov r15d,0x1b', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov rdx,r14', 'call <curl_infof>', 'mov rdi,<MEM>', 'mov rsi,r14', 'call <ssl_ctx_set_srp_username@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctx_set_srp_password@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'sete al', 'test al,al', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_cipher_list@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rdi,<MEM>', 'mov esi,<MEM>', 'call <ssl_set_fd@plt>', 'test eax,eax', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', 'xchg ax,ax', 'mov r15d,0x23', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'call <ssl_ctx_load_verify_locations@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'lea rsi,<MEM>', 'xor eax,eax', 'mov rdi,rbp', 'call <curl_infof>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'test rcx,rcx', 'cmovne rax,rcx', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', '<JUMP> <LOC>', 'nop <MEM>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'mov r14,<MEM>', 'test r14,r14', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <ssl_ctx_set_keylog_callback@plt>', '<JUMP> <LOC>', 'call <ssl_ctx_get_cert_store@plt>', 'mov esi,0x8000', 'mov rdi,rax', 'call <x509_store_set_flags@plt>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x4', 'xor eax,0x1', 'and eax,0x1', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'test al,al', '<JUMP> <LOC>', 'call <ssl_ctx_get_cert_store@plt>', 'mov esi,0x80000', 'mov rdi,rax', 'call <x509_store_set_flags@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x52', 'lea rsi,<MEM>', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'shr dl,0x2', 'and edx,0x1', '<JUMP> <LOC>', 'mov rdx,r14', 'mov r14,<MEM>', 'mov edi,0xa', 'mov rsi,r14', 'call <inet_pton@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,r14', 'mov <MEM>,r14', 'call <strlen@plt>', 'mov r14,rax', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'mov rdx,rax', 'call <curl_strntolower>', 'mov rax,<MEM>', 'xor edx,edx', 'mov esi,0x37', 'mov <MEM>,0x0', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'call <ssl_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_infof>', '<JUMP> <LOC>', 'xor ecx,ecx', 'mov edx,0x1', 'mov esi,0x41', 'call <ssl_ctrl@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x3', 'and eax,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'call <ossl_get_ssl_data_index>', 'mov <MEM>,eax', 'call <ossl_get_ssl_conn_index>', 'mov r14d,eax', 'call <ossl_get_ssl_sockindex_index>', 'mov <MEM>,eax', 'call <ossl_get_proxy_index>', 'mov esi,<MEM>', 'mov r8d,eax', 'test esi,esi', 'js 63e4b <ossl_connect_step1+OFFSET>', 'test r14d,r14d', 'js 63e4b <ossl_connect_step1+OFFSET>', 'mov eax,<MEM>', 'test eax,eax', 'js 63e4b <ossl_connect_step1+OFFSET>', 'test r8d,r8d', 'mov <MEM>,r8d', 'js 63e4b <ossl_connect_step1+OFFSET>', 'mov rdi,<MEM>', 'mov rdx,rbp', 'call <ssl_set_ex_data@plt>', 'mov rdi,<MEM>', 'mov rdx,rbx', 'mov esi,r14d', 'call <ssl_set_ex_data@plt>', 'mov rdi,<MEM>', 'mov esi,<MEM>', 'lea rdx,<MEM>', 'call <ssl_set_ex_data@plt>', 'xor edx,edx', 'cmp <MEM>,0x2', 'mov r8d,<MEM>', '<JUMP> <LOC>', 'xor eax,eax', 'cmp <MEM>,0xffffffff', 'setne al', 'xor edx,edx', 'imul rax,rax,0x18', 'cmp <MEM>,0x2', 'setne dl', 'mov rdi,<MEM>', 'mov esi,r8d', 'call <ssl_set_ex_data@plt>', 'mov rdi,rbp', 'call <curl_ssl_sessionid_lock>', 'xor edx,edx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'xor edx,edx', 'cmp <MEM>,0x2', 'setne dl', 'mov r9d,<MEM>', 'xor r8d,r8d', 'mov rsi,rbx', 'mov rdi,rbp', 'lea rcx,<MEM>', 'call <curl_ssl_getsessionid>', 'test al,al', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'call <ssl_set_session@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', 'mov rdi,rbp', 'call <curl_ssl_sessionid_unlock>', '<JUMP> <LOC>', 'mov edx,0x303', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rcx', 'mov esi,<MEM>', 'call <bio_new_mem_buf@plt>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'call <err_clear_error@plt>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'xor esi,esi', 'lea rdx,<MEM>', 'call <pem_read_bio_x509_aux@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rsi,rax', 'mov rdi,r14', 'mov <MEM>,rax', 'call <ssl_ctx_use_certificate@plt>', 'mov <MEM>,eax', 'call <err_peek_error@plt>', 'mov r8d,<MEM>', 'mov r9,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'test r8d,r8d', '<JUMP> <LOC>', 'mov rdi,r9', 'call <x509_free@plt>', 'mov rdi,<MEM>', 'call <bio_free@plt>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor r8d,r8d', 'xor edx,edx', 'mov esi,0xd', 'lea rcx,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,rax', 'call <engine_ctrl@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor r8d,r8d', 'xor edx,edx', 'lea rcx,<MEM>', 'mov r9d,0x1', 'lea rsi,<MEM>', 'call <engine_ctrl_cmd@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,r14', 'call <ssl_ctx_use_certificate@plt>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_failf>', 'mov rdi,<MEM>', 'call <x509_free@plt>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov r14,<MEM>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rsi,<MEM>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'sete al', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'test rcx,rcx', 'cmovne rax,rcx', 'mov <MEM>,rax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'lea rsi,<MEM>', 'mov r15d,0x4d', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', 'setne dl', 'lea rax,<MEM>', 'add rax,rdx', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr al,0x4', 'xor eax,0x1', 'and eax,0x1', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,r14d', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_infof>', '<JUMP> <LOC>', 'mov rdx,r14', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x3b', 'call <curl_failf>', '<JUMP> <LOC>', 'xor edi,edi', 'call <x509_free@plt>', 'mov r10,<MEM>', 'mov rdi,r10', 'call <bio_free@plt>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x2b', 'call <curl_failf>', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rdi,<MEM>', 'call <do_file_type>', 'mov r8d,eax', 'cmp eax,0x2a', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'cmp eax,0x2b', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <x509_free@plt>', 'mov rax,<MEM>', 'or rax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <ui_create_method@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', 'call <ui_openssl@plt>', 'mov rdi,rax', 'call <ui_method_get_opener@plt>', 'mov r9,<MEM>', 'mov rsi,rax', 'mov rdi,r9', 'call <ui_method_set_opener@plt>', 'call <ui_openssl@plt>', 'mov rdi,rax', 'call <ui_method_get_closer@plt>', 'mov r9,<MEM>', 'mov rsi,rax', 'mov rdi,r9', 'call <ui_method_set_closer@plt>', 'mov r9,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r9', 'call <ui_method_set_reader@plt>', 'mov r9,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r9', 'call <ui_method_set_writer@plt>', 'mov r9,<MEM>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'mov rdx,r9', 'mov <MEM>,r9', 'call <engine_load_private_key@plt>', 'mov r9,<MEM>', 'mov <MEM>,rax', 'mov rdi,r9', 'call <ui_destroy_method@plt>', 'mov r8,<MEM>', 'test r8,r8', '<JUMP> <LOC>', 'mov rsi,r8', 'mov rdi,r14', 'mov <MEM>,r8', 'call <ssl_ctx_use_privatekey@plt>', 'mov r8,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_failf>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <evp_pkey_free@plt>', '<JUMP> <LOC>', 'call <bio_s_file@plt>', 'mov rdi,rax', 'call <bio_new@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov edx,0x3', 'mov esi,0x6c', 'mov rdi,rax', 'mov <MEM>,rax', 'call <bio_ctrl@plt>', 'mov r8,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'xor esi,esi', 'mov rdi,r8', 'mov <MEM>,r8', 'call <d2i_pkcs12_bio@plt>', 'mov r8,<MEM>', 'mov <MEM>,rax', 'mov rdi,r8', 'call <bio_free@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,0x7', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <curl_strncasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <ossl_set_engine>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov edx,0x2', 'mov rdi,r14', 'mov <MEM>,r8d', 'call <ssl_ctx_use_certificate_file@plt>', 'mov r8d,<MEM>', 'mov edx,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,r14', 'call <ssl_ctx_use_certificate_chain_file@plt>', 'mov r8d,eax', 'cmp r8d,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov r15d,0x2b', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,r9', 'call <bio_free@plt>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'mov rsi,<MEM>', 'mov rdi,rbp', 'test rcx,rcx', 'cmovne rax,rcx', 'test rsi,rsi', 'mov rcx,rax', 'lea rax,<MEM>', 'cmovne rax,rsi', 'lea rsi,<MEM>', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'mov r15d,0x1b', 'call <curl_failf>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', 'mov rdi,<MEM>', 'call <pkcs12_free@plt>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,r14', 'call <ssl_ctx_use_privatekey@plt>', 'mov <MEM>,eax', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'xor edi,edi', 'call <x509_free@plt>', 'mov rdi,<MEM>', 'call <bio_free@plt>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov edx,r8d', 'mov rdi,r14', 'call <ssl_ctx_use_privatekey_file@plt>', 'mov edx,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov <MEM>,r8', 'call <evp_pkey_get1_rsa@plt>', 'mov rdi,rax', 'mov <MEM>,rax', 'call <rsa_flags@plt>', 'mov rdi,<MEM>', 'mov <MEM>,eax', 'call <rsa_free@plt>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <ssl_free@plt>', 'test <MEM>,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rdi,rbp', 'mov r15d,0x23', 'call <curl_ssl_sessionid_unlock>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,0x7', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <curl_strncasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <ossl_set_engine>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rcx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,r14', 'call <ssl_ctx_check_private_key@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,rbx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <openssl_sk_pop@plt>', 'mov rdi,r14', 'mov rsi,rax', 'mov rbx,rax', 'call <ssl_ctx_add_client_ca@plt>', 'test eax,eax', '<JUMP> <LOC>', 'xor edx,edx', 'mov rcx,rbx', 'mov esi,0xe', 'mov rdi,r14', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <openssl_sk_num@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'mov rdi,<MEM>', 'call <evp_pkey_free@plt>', 'mov rdi,<MEM>', 'call <x509_free@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <openssl_sk_pop_free@plt>', 'mov rax,<MEM>', 'or rax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rdi,r8', 'call <evp_pkey_free@plt>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'xor esi,esi', 'mov rdi,rax', 'mov <MEM>,rax', 'lea rdx,<MEM>', 'call <pem_read_bio_privatekey@plt>', 'mov r9,<MEM>', 'mov r8,rax', '<JUMP> <LOC>', 'call <err_get_error@plt>', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <ossl_strerror.constprop.0>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'mov rdx,rax', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'xor ecx,ecx', 'xor edx,edx', 'mov esi,0x58', 'mov rdi,r14', 'mov <MEM>,r9', 'mov <MEM>,r8d', 'call <ssl_ctx_ctrl@plt>', 'mov r8d,<MEM>', 'mov r9,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,rbx', '<JUMP> <LOC>', 'xor edx,edx', 'mov rcx,rbx', 'mov esi,0x59', 'mov rdi,r14', 'call <ssl_ctx_ctrl@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'lea rdx,<MEM>', 'xor esi,esi', 'call <pem_read_bio_x509@plt>', 'mov rbx,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'call <err_peek_last_error@plt>', 'mov r9,<MEM>', 'mov r8d,<MEM>', 'mov edx,eax', 'shr edx,0x18', 'cmp edx,0x9', '<JUMP> <LOC>', 'and eax,0xfff', 'cmp eax,0x6c', '<JUMP> <LOC>', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'call <err_clear_error@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <x509_free@plt>', 'mov rdi,<MEM>', 'call <bio_free@plt>', 'mov r8d,<MEM>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rdi,rbp', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_failf>', 'mov r8,<MEM>', 'mov rdi,r8', 'call <bio_free@plt>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'call <curl_failf>', '<JUMP> <LOC>', 'mov r9,<MEM>', 'mov rdi,rbx', 'mov <MEM>,r9', 'call <x509_free@plt>', 'mov r9,<MEM>', 'mov rdi,r9', 'call <x509_free@plt>', 'mov rdi,<MEM>', 'call <bio_free@plt>', '<JUMP> <LOC>', 'mov rdi,rbx', 'call <x509_free@plt>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'mov rdi,rbx', 'call <x509_free@plt>', 'lea rsi,<MEM>', 'mov rdi,rbp', 'xor eax,eax', 'call <curl_failf>', '<JUMP> <LOC>', 'nop <MEM>']
2024-04-26 03:39:16.524 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 751 ---> 2
2024-04-26 03:39:16.527 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_connect_step1']
2024-04-26 03:39:16.528 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_connect_step1', 'Curl_ssl_addsessionid']
2024-04-26 03:39:16.528 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  4.13it/s]
2024-04-26 03:39:20.782 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.536705732345581, ossl_connect_step1 ---> servercert
2024-04-26 03:39:20.783 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:39:20.783 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:39:20.784 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:39:20.784 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:39:20.784 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:39:20.784 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:39:20.784 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:39:20.784 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 229 CVE-2021-22922
filter_and_generate_data_items:  22%|██▏       | 180/834 [00:00<00:00, 655.33it/s]2024-04-26 03:39:28.838 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: tool_version_info, 0, 1
2024-04-26 03:39:28.839 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['void tool_version_info(void)', '{', 'const char *const *proto;', 'printf(CURL_ID "STR", curl_version(), metalnk_version());', '#ifdef CURL_PATCHSTAMP', 'printf("STR",', 'LIBCURL_TIMESTAMP, CURL_PATCHSTAMP);', '#else', 'printf("STR", LIBCURL_TIMESTAMP);', '#endif', 'if(curlinfo->protocols) {', 'printf("STR");', 'for(proto = curlinfo->protocols; *proto; ++proto) {', 'printf("STR", *proto);', '}', '}', 'if(curlinfo->features) {', 'char *featp[ sizeof(feats) / sizeof(feats[0]) + 1];', 'size_t numfeat = 0;', 'unsigned int i;', 'printf("STR");', 'for(i = 0; i < sizeof(feats)/sizeof(feats[0]); i++) {', 'if(curlinfo->features & feats[i].bitmask)', 'featp[numfeat++] = (char *)feats[i].name;', '}', '#ifdef USE_METALINK', 'featp[numfeat++] = (char *)"STR";', '#endif', 'qsort(&featp[0], numfeat, sizeof(char *), featcomp);', 'for(i = 0; i< numfeat; i++)', 'printf("STR", featp[i]);', '}', 'if(strcmp(CURL_VERSION, curlinfo->version)) {', 'printf("STR"', '"STR");', '}', '}']
2024-04-26 03:39:28.839 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r13', 'push r12', 'push rbp', 'push rbx', 'sub rsp,0xf8', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'call <curl_version@plt>', 'lea rdx,<MEM>', 'lea rdi,<MEM>', 'mov rsi,rax', 'xor eax,eax', 'call <curl_mprintf@plt>', 'xor eax,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_mprintf@plt>', 'mov rax,<MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'xor eax,eax', 'lea rbp,<MEM>', 'call <curl_mprintf@plt>', 'mov rax,<MEM>', 'mov rbx,<MEM>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,rbp', 'xor eax,eax', 'add rbx,0x8', 'call <curl_mprintf@plt>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <puts@plt>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'test edx,edx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov ecx,0xb', 'lea rsi,<MEM>', 'repz cmps ds:<MEM>,es:<MEM>', 'seta al', 'sbb al,0x0', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0xf8', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'ret', 'nop <MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'xor ebx,ebx', 'call <curl_mprintf@plt>', 'mov rax,<MEM>', 'mov edx,0x80', 'mov esi,<MEM>', 'lea rax,<MEM>', 'lea rcx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edx,<MEM>', 'test esi,edx', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'add rbx,0x1', 'add rax,0x10', 'cmp rax,rcx', '<JUMP> <LOC>', 'mov rbp,rsp', 'lea rcx,<MEM>', 'mov edx,0x8', 'mov rsi,rbx', 'mov rdi,rbp', 'lea r13,<MEM>', 'lea r12,<MEM>', 'call <qsort@plt>', 'test rbx,rbx', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rsi,<MEM>', 'mov rdi,r12', 'xor eax,eax', 'add rbp,0x8', 'call <curl_mprintf@plt>', 'cmp rbp,r13', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <puts@plt>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'nop', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_mprintf@plt>', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'nop <MEM>']
filter_and_generate_data_items:  63%|██████▎   | 524/834 [00:00<00:00, 1305.72it/s]2024-04-26 03:39:29.029 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: post_per_transfer, 5, 1
2024-04-26 03:39:29.030 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static CURLcode post_per_transfer(struct GlobalConfig *global,', 'struct per_transfer *per,', 'CURLcode result,', 'bool *retryp,', '{', 'struct OutStruct *outs = &per->outs;', 'CURL *curl = per->curl;', 'struct OperationConfig *config = per->config;', 'if(!curl || !config)', 'return result;', '*retryp = FALSE;', 'if(per->infdopen)', 'close(per->infd);', '#ifdef __VMS', 'if(is_vms_shell()) {', 'if(!global->showerror)', 'vms_show = VMSSTS_HIDE;', '}', 'else', '#endif', 'if(!config->synthetic_error && result && global->showerror) {', 'fprintf(global->errors, "STR", result,', '(per->errorbuffer[0]) ? per->errorbuffer :', 'curl_easy_strerror(result));', 'if(result == CURLE_PEER_FAILED_VERIFICATION)', 'fputs(CURL_CA_CERT_ERRORMSG, global->errors);', '}', 'else if(config->failwithbody) {', 'long code = 0;', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &code);', 'if(code >= 400) {', 'if(global->showerror)', 'fprintf(global->errors,', '"STR",', 'CURLE_HTTP_RETURNED_ERROR, code);', 'result = CURLE_HTTP_RETURNED_ERROR;', '}', '}', 'if(!result && config->xattr && outs->fopened && outs->stream) {', 'int rc = fwrite_xattr(curl, fileno(outs->stream));', 'if(rc)', 'warnf(config->global, "STR",', 'outs->filename, strerror(errno));', '}', 'if(!result && !outs->stream && !outs->bytes) {', '==> force creation of an empty output file (if an output file', 'long cond_unmet = 0L;', 'curl_easy_getinfo(curl, CURLINFO_CONDITION_UNMET, &cond_unmet);', 'if(!cond_unmet && !tool_create_output_file(outs, config))', 'result = CURLE_WRITE_ERROR;', '}', 'if(!outs->s_isreg && outs->stream) {', 'int rc = fflush(outs->stream);', 'if(!result && rc) {', 'result = CURLE_WRITE_ERROR;', 'if(global->showerror)', 'fprintf(global->errors, "STR", result);', '}', '}', '#ifdef USE_METALINK', 'if(per->metalink && !per->metalink_next_res)', 'fprintf(global->errors, "STR",', 'per->mlfile->filename, per->this_url);', 'if(!per->metalink && config->use_metalink && result == CURLE_OK) {', 'int rv = parse_metalink(config, outs, per->this_url);', 'if(!rv) {', 'fprintf(config->global->errors, "STR",', 'per->this_url);', '}', 'else if(rv == -1)', 'fprintf(config->global->errors, "STR",', 'per->this_url);', '}', 'else if(per->metalink && result == CURLE_OK && !per->metalink_next_res) {', 'int rv;', '(void)fflush(outs->stream);', 'rv = metalink_check_hash(global, per->mlfile, outs->filename);', 'if(!rv)', 'per->metalink_next_res = 1;', '}', '#ifdef USE_METALINK', 'if(outs->metalink_parser)', 'metalink_parser_context_delete(outs->metalink_parser);', 'if(per->retry_numretries &&', '(!config->retry_maxtime ||', '(tvdiff(tvnow(), per->retrystart) <', 'config->retry_maxtime*1000L)) ) {', 'enum {', 'RETRY_NO,', 'RETRY_ALL_ERRORS,', 'RETRY_TIMEOUT,', 'RETRY_CONNREFUSED,', 'RETRY_HTTP,', 'RETRY_FTP,', '} retry = RETRY_NO;', 'long response = 0;', 'if((CURLE_OPERATION_TIMEDOUT == result) ||', '(CURLE_COULDNT_RESOLVE_HOST == result) ||', '(CURLE_COULDNT_RESOLVE_PROXY == result) ||', '(CURLE_FTP_ACCEPT_TIMEOUT == result))', 'retry = RETRY_TIMEOUT;', 'else if(config->retry_connrefused &&', '(CURLE_COULDNT_CONNECT == result)) {', 'long oserrno = 0;', 'curl_easy_getinfo(curl, CURLINFO_OS_ERRNO, &oserrno);', 'if(ECONNREFUSED == oserrno)', 'retry = RETRY_CONNREFUSED;', '}', 'else if((CURLE_OK == result) ||', '(config->failonerror &&', '(CURLE_HTTP_RETURNED_ERROR == result))) {', 'returned due to such an error, check for HTTP transient', 'long protocol = 0;', 'curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);', 'if((protocol == CURLPROTO_HTTP) || (protocol == CURLPROTO_HTTPS)) {', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);', 'switch(response) {', 'retry = RETRY_HTTP;', 'break;', '}', '}', 'else if(result) {', 'long protocol = 0;', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);', 'curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);', 'if((protocol == CURLPROTO_FTP || protocol == CURLPROTO_FTPS) &&', 'response / 100 == 4)', 'retry = RETRY_FTP;', '}', 'if(result && !retry && config->retry_all_errors)', 'retry = RETRY_ALL_ERRORS;', 'if(retry) {', 'long sleeptime = 0;', 'curl_off_t retry_after = 0;', 'static const char * const m[]={', 'NULL,', '"STR",', '"STR",', '"STR",', '"STR",', '"STR"', '};', 'sleeptime = per->retry_sleep;', 'if(RETRY_HTTP == retry) {', 'curl_easy_getinfo(curl, CURLINFO_RETRY_AFTER, &retry_after);', 'if(retry_after) {', 'if(retry_after > LONG_MAX/1000)', 'sleeptime = LONG_MAX;', 'else', '}', '}', 'warnf(config->global, "STR"', '"STR"', '"STR",', 'm[retry], sleeptime/1000L, per->retry_numretries);', 'per->retry_numretries--;', 'if(!config->retry_delay) {', 'per->retry_sleep *= 2;', 'if(per->retry_sleep > RETRY_SLEEP_MAX)', 'per->retry_sleep = RETRY_SLEEP_MAX;', '}', 'if(outs->bytes && outs->filename && outs->stream) {', 'int rc;', 'if(!global->mute)', 'fprintf(global->errors, "STR"', 'CURL_FORMAT_CURL_OFF_T "STR",', 'outs->bytes);', 'fflush(outs->stream);', '#ifdef HAVE_FTRUNCATE', 'if(ftruncate(fileno(outs->stream), outs->init)) {', 'if(global->showerror)', 'fprintf(global->errors,', '"STR");', 'return CURLE_WRITE_ERROR;', '}', 'rc = fseek(outs->stream, 0, SEEK_END);', '#else', "to the location we would have truncated it. This won't", 'work properly with large files on 32-bit systems, but', 'rc = fseek(outs->stream, (long)outs->init, SEEK_SET);', '#endif', 'if(rc) {', 'if(global->showerror)', 'fprintf(global->errors,', '"STR");', 'return CURLE_WRITE_ERROR;', '}', '}', '*retryp = TRUE;', '*delay = sleeptime;', 'return CURLE_OK;', '}', 'else if(per->metalink) {', 'long response = 0;', 'if(CURLE_OK == result) {', 'char *effective_url = NULL;', 'curl_easy_getinfo(curl, CURLINFO_EFFECTIVE_URL, &effective_url);', 'if(effective_url &&', 'curl_strnequal(effective_url, "STR", 4)) {', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);', 'if(response != 200 && response != 206) {', 'per->metalink_next_res = 1;', 'fprintf(global->errors,', '"STR"', '"STR",', 'per->mlfile->filename, per->this_url, response);', '}', '}', '}', 'else {', 'per->metalink_next_res = 1;', 'fprintf(global->errors,', '"STR",', 'per->mlfile->filename, per->this_url,', 'curl_easy_strerror(result));', '}', '}', 'if((global->progressmode == CURL_PROGRESS_BAR) &&', 'per->progressbar.calls)', 'fputs("STR", per->progressbar.out);', 'if(outs->fopened && outs->stream) {', 'int rc = fclose(outs->stream);', 'if(!result && rc) {', 'result = CURLE_WRITE_ERROR;', 'if(global->showerror)', 'fprintf(global->errors, "STR", result);', '}', '}', 'if(!result && config->remote_time && outs->s_isreg && outs->filename) {', 'curl_off_t filetime = -1;', 'curl_easy_getinfo(curl, CURLINFO_FILETIME_T, &filetime);', 'setfiletime(filetime, outs->filename, global);', '}', 'if(config->writeout)', 'ourWriteOut(config->writeout, per, result);', 'if(per->heads.fopened && per->heads.stream)', 'fclose(per->heads.stream);', 'if(per->heads.alloc_filename)', 'Curl_safefree(per->heads.filename);', 'if(per->etag_save.fopened && per->etag_save.stream)', 'fclose(per->etag_save.stream);', 'if(per->etag_save.alloc_filename)', 'Curl_safefree(per->etag_save.filename);', 'curl_easy_cleanup(per->curl);', 'if(outs->alloc_filename)', 'free(outs->filename);', 'free(per->this_url);', 'free(per->separator_err);', 'free(per->separator);', 'free(per->outfile);', 'free(per->uploadfile);', 'return result;', '}']
2024-04-26 03:39:29.031 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'push r14', 'push r13', 'push r12', 'mov r12d,edx', 'push rbp', 'push rbx', 'sub rsp,0x38', 'mov r14,<MEM>', 'mov rbx,<MEM>', 'mov <MEM>,rcx', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'test r14,r14', '<JUMP> <LOC>', 'test rbx,rbx', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', 'mov r13,rdi', 'mov r15,rsi', 'mov <MEM>,0x0', 'mov rbp,r8', '<JUMP> <LOC>', 'mov r10d,<MEM>', 'test r10d,r10d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <fileno@plt>', 'mov rdi,r14', 'mov esi,eax', 'call <fwrite_xattr>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'nop <MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'xor r12d,r12d', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov eax,r12d', 'and eax,0xffffffef', 'cmp eax,0xc', '<JUMP> <LOC>', 'lea eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp r12d,0x7', '<JUMP> <LOC>', 'mov esi,0x200019', 'xor eax,eax', 'lea rdx,<MEM>', 'mov rdi,r14', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'cmp <MEM>,0x6f', 'mov esi,0x3', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movabs rdx,0x20c49ba5e353f7cf', 'mov r12,<MEM>', 'mov <MEM>,0x0', 'mov rax,r12', 'imul rdx', 'mov rax,r12', 'sar rax,0x3f', 'sar rdx,0x7', 'mov rcx,rdx', 'lea rdx,<MEM>', 'sub rcx,rax', '<JUMP> <LOC>', 'nop <MEM>', 'call <tvnow>', 'mov rcx,<MEM>', 'mov rsi,rdx', 'mov rdx,<MEM>', 'mov rdi,rax', 'call <tvdiff>', 'mov r8,rax', 'imul rax,<MEM>,0x3e8', 'cmp r8,rax', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'test r12d,r12d', '<JUMP> <LOC>', 'mov rdi,r14', 'lea rdx,<MEM>', 'mov esi,0x100001', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov edx,0x4', 'lea rsi,<MEM>', 'call <curl_strnequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'xor eax,eax', 'call <curl_easy_getinfo@plt>', 'mov r8,<MEM>', 'cmp r8,0xc8', '<JUMP> <LOC>', 'cmp r8,0xce', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'lea rsi,<MEM>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov rdx,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', 'nop <MEM>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x60000e', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0xffffffffffffffff', 'call <curl_easy_getinfo@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov rdx,r13', 'call <setfiletime>', 'nop <MEM>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov edx,r12d', 'mov rsi,r15', 'call <ourwriteout>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <fclose@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <fclose@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_easy_cleanup@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x38', 'mov eax,r12d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rcx,<MEM>', 'cmp rcx,0x18f', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'test r8d,r8d', '<JUMP> <LOC>', 'mov r12d,0x16', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'test r12d,r12d', 'sete <MEM>', 'call <fflush@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov edi,<MEM>', 'mov r12d,0x17', 'test edi,edi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov edx,0x17', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edi,<MEM>', 'call <close@plt>', 'mov r10d,<MEM>', 'test r10d,r10d', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov r9d,<MEM>', 'test r9d,r9d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'lea rcx,<MEM>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor eax,eax', 'mov edx,r12d', 'lea rsi,<MEM>', 'call <curl_mfprintf@plt>', 'cmp r12d,0x3c', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov edx,0x108', 'mov esi,0x1', 'lea rdi,<MEM>', 'call <fwrite@plt>', '<JUMP> <LOC>', 'call <fclose@plt>', 'test r12d,r12d', '<JUMP> <LOC>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov r12d,0x17', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov edx,0x17', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop <MEM>', 'movabs rdx,0x20c49ba5e353f7cf', 'mov r12,<MEM>', 'mov <MEM>,0x0', 'mov rax,r12', 'imul rdx', 'mov rax,r12', 'sar rax,0x3f', 'sar rdx,0x7', 'mov rcx,rdx', 'lea rdx,<MEM>', 'sub rcx,rax', 'mov rdi,<MEM>', 'mov r8,<MEM>', 'xor eax,eax', 'lea rsi,<MEM>', 'call <warnf>', 'sub <MEM>,0x1', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,0x927c0', 'add rax,rax', 'cmp rax,0x927c0', 'cmovg rax,rdx', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'test rdx,rdx', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <fflush@plt>', 'mov rdi,<MEM>', 'mov r14,<MEM>', 'call <fileno@plt>', 'mov rsi,r14', 'mov edi,eax', 'call <ftruncate@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov esi,<MEM>', 'test esi,esi', '<JUMP> <LOC>', 'mov r12d,0x17', '<JUMP> <LOC>', 'nop <MEM>', 'xor r12d,r12d', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor eax,eax', 'lea rdx,<MEM>', 'mov esi,0x200023', 'mov rdi,r14', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp r12d,0x16', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'lea rdx,<MEM>', 'mov rdi,r14', 'xor eax,eax', 'mov esi,0x200030', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'sub rax,0x4', 'test rax,0xfffffffffffffffb', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov esi,0x5', 'sub rax,0x190', 'cmp rax,0x63', '<JUMP> <LOC>', 'mov r12,<MEM>', 'mov ecx,0x3e8', 'mov <MEM>,0x0', 'mov rax,r12', 'cqo', 'idiv rcx', 'mov rcx,rax', 'lea rax,<MEM>', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edx,<MEM>', 'test edx,edx', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov edi,0xa', 'call <fputc@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <free@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x0', 'nop <MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,r12', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x1', 'mov edi,r12d', 'call <curl_easy_strerror@plt>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'mov r8,rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'xor esi,esi', 'mov edx,0x2', 'call <fseek@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'test ecx,ecx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'xor eax,eax', 'mov r12d,0x17', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'lea r8,<MEM>', 'xor eax,eax', 'mov esi,0x200030', 'mov rdi,r14', 'mov rdx,r8', 'mov <MEM>,r8', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'sub rax,0x1', 'cmp rax,0x1', '<JUMP> <LOC>', 'xor eax,eax', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'mov <MEM>,r8', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'cmp rax,0x1f4', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp rax,0x198', '<JUMP> <LOC>', 'cmp rax,0x1ad', '<JUMP> <LOC>', 'test r12d,r12d', '<JUMP> <LOC>', '<JUMP> <LOC>', 'sub rax,0x1f6', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov rdx,r8', 'mov esi,0x600039', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0x0', 'mov r12,<MEM>', 'call <curl_easy_getinfo@plt>', 'mov rcx,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'movabs rax,0x20c49ba5e353f7', 'cmp rcx,rax', '<JUMP> <LOC>', 'imul r12,rcx,0x3e8', 'lea rdx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'mov edx,0x16', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edi,r12d', 'call <curl_easy_strerror@plt>', 'mov rcx,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'xchg ax,ax', 'movabs rdx,0x20c49ba5e353f7cf', 'mov rax,r12', 'imul rdx', 'mov rax,r12', 'sar rax,0x3f', 'sar rdx,0x7', 'mov rcx,rdx', 'lea rdx,<MEM>', 'sub rcx,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'call <__errno_location@plt>', 'mov edi,<MEM>', 'call <strerror@plt>', 'mov rdx,<MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'mov rcx,rax', 'xor eax,eax', 'call <warnf>', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov rsi,rbx', 'mov r12d,0x17', 'call <tool_create_output_file>', 'test al,al', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea r8,<MEM>', 'xor eax,eax', 'mov esi,0x200030', 'mov rdi,r14', 'mov rdx,r8', 'mov <MEM>,r8', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'sub rax,0x1', 'cmp rax,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'lea rdx,<MEM>', 'mov rcx,rax', 'movabs r12,0x7fffffffffffffff', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'nop cs:<MEM>']
filter_and_generate_data_items: 100%|██████████| 834/834 [00:00<00:00, 1150.19it/s]
2024-04-26 03:39:30.048 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 834 ---> 91
2024-04-26 03:39:30.050 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['getparameter', 'tool_version_info', 'main_free', 'post_per_transfer', 'serial_transfers', 'run_all_transfers']
2024-04-26 03:39:30.051 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['getparameter', 'tool_version_info', 'post_per_transfer']
2024-04-26 03:39:30.052 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['getparameter']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.40s/it]
2024-04-26 03:39:43.909 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9542640447616577, getparameter ---> getparameter
2024-04-26 03:39:43.910 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.3622990846633911, tool_version_info ---> glob_next_url
2024-04-26 03:39:43.910 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5518104434013367, main_free ---> create_transfer
2024-04-26 03:39:43.910 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8282856345176697, serial_transfers ---> parseconfig
2024-04-26 03:39:43.911 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.2081742286682129, run_all_transfers ---> get_param_part
2024-04-26 03:39:43.911 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 14 ---> 5
2024-04-26 03:39:43.911 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:39:43.989 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.0, fix prob: 2.934016571365383e-11
2024-04-26 03:39:43.990 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:39:43.990 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:39:43.990 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:39:43.990 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:39:43.991 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 230 CVE-2021-22923
filter_and_generate_data_items:  25%|██▍       | 207/834 [00:00<00:00, 760.45it/s]2024-04-26 03:39:52.069 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: tool_version_info, 0, 1
2024-04-26 03:39:52.070 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['void tool_version_info(void)', '{', 'const char *const *proto;', 'printf(CURL_ID "STR", curl_version(), metalnk_version());', '#ifdef CURL_PATCHSTAMP', 'printf("STR",', 'LIBCURL_TIMESTAMP, CURL_PATCHSTAMP);', '#else', 'printf("STR", LIBCURL_TIMESTAMP);', '#endif', 'if(curlinfo->protocols) {', 'printf("STR");', 'for(proto = curlinfo->protocols; *proto; ++proto) {', 'printf("STR", *proto);', '}', '}', 'if(curlinfo->features) {', 'char *featp[ sizeof(feats) / sizeof(feats[0]) + 1];', 'size_t numfeat = 0;', 'unsigned int i;', 'printf("STR");', 'for(i = 0; i < sizeof(feats)/sizeof(feats[0]); i++) {', 'if(curlinfo->features & feats[i].bitmask)', 'featp[numfeat++] = (char *)feats[i].name;', '}', '#ifdef USE_METALINK', 'featp[numfeat++] = (char *)"STR";', '#endif', 'qsort(&featp[0], numfeat, sizeof(char *), featcomp);', 'for(i = 0; i< numfeat; i++)', 'printf("STR", featp[i]);', '}', 'if(strcmp(CURL_VERSION, curlinfo->version)) {', 'printf("STR"', '"STR");', '}', '}']
2024-04-26 03:39:52.071 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r13', 'push r12', 'push rbp', 'push rbx', 'sub rsp,0xf8', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'call <curl_version@plt>', 'lea rdx,<MEM>', 'lea rdi,<MEM>', 'mov rsi,rax', 'xor eax,eax', 'call <curl_mprintf@plt>', 'xor eax,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_mprintf@plt>', 'mov rax,<MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'xor eax,eax', 'lea rbp,<MEM>', 'call <curl_mprintf@plt>', 'mov rax,<MEM>', 'mov rbx,<MEM>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,rbp', 'xor eax,eax', 'add rbx,0x8', 'call <curl_mprintf@plt>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <puts@plt>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'test edx,edx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov ecx,0xb', 'lea rsi,<MEM>', 'repz cmps ds:<MEM>,es:<MEM>', 'seta al', 'sbb al,0x0', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0xf8', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'ret', 'nop <MEM>', 'lea rdi,<MEM>', 'xor eax,eax', 'xor ebx,ebx', 'call <curl_mprintf@plt>', 'mov rax,<MEM>', 'mov edx,0x80', 'mov esi,<MEM>', 'lea rax,<MEM>', 'lea rcx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edx,<MEM>', 'test esi,edx', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'add rbx,0x1', 'add rax,0x10', 'cmp rax,rcx', '<JUMP> <LOC>', 'mov rbp,rsp', 'lea rcx,<MEM>', 'mov edx,0x8', 'mov rsi,rbx', 'mov rdi,rbp', 'lea r13,<MEM>', 'lea r12,<MEM>', 'call <qsort@plt>', 'test rbx,rbx', '<JUMP> <LOC>', 'nop cs:<MEM>', 'mov rsi,<MEM>', 'mov rdi,r12', 'xor eax,eax', 'add rbp,0x8', 'call <curl_mprintf@plt>', 'cmp rbp,r13', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <puts@plt>', 'mov rax,<MEM>', '<JUMP> <LOC>', 'nop', 'lea rdi,<MEM>', 'xor eax,eax', 'call <curl_mprintf@plt>', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'nop <MEM>']
filter_and_generate_data_items:  63%|██████▎   | 526/834 [00:00<00:00, 1258.61it/s]2024-04-26 03:39:52.279 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: post_per_transfer, 5, 1
2024-04-26 03:39:52.280 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static CURLcode post_per_transfer(struct GlobalConfig *global,', 'struct per_transfer *per,', 'CURLcode result,', 'bool *retryp,', '{', 'struct OutStruct *outs = &per->outs;', 'CURL *curl = per->curl;', 'struct OperationConfig *config = per->config;', 'if(!curl || !config)', 'return result;', '*retryp = FALSE;', 'if(per->infdopen)', 'close(per->infd);', '#ifdef __VMS', 'if(is_vms_shell()) {', 'if(!global->showerror)', 'vms_show = VMSSTS_HIDE;', '}', 'else', '#endif', 'if(!config->synthetic_error && result && global->showerror) {', 'fprintf(global->errors, "STR", result,', '(per->errorbuffer[0]) ? per->errorbuffer :', 'curl_easy_strerror(result));', 'if(result == CURLE_PEER_FAILED_VERIFICATION)', 'fputs(CURL_CA_CERT_ERRORMSG, global->errors);', '}', 'else if(config->failwithbody) {', 'long code = 0;', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &code);', 'if(code >= 400) {', 'if(global->showerror)', 'fprintf(global->errors,', '"STR",', 'CURLE_HTTP_RETURNED_ERROR, code);', 'result = CURLE_HTTP_RETURNED_ERROR;', '}', '}', 'if(!result && config->xattr && outs->fopened && outs->stream) {', 'int rc = fwrite_xattr(curl, fileno(outs->stream));', 'if(rc)', 'warnf(config->global, "STR",', 'outs->filename, strerror(errno));', '}', 'if(!result && !outs->stream && !outs->bytes) {', '==> force creation of an empty output file (if an output file', 'long cond_unmet = 0L;', 'curl_easy_getinfo(curl, CURLINFO_CONDITION_UNMET, &cond_unmet);', 'if(!cond_unmet && !tool_create_output_file(outs, config))', 'result = CURLE_WRITE_ERROR;', '}', 'if(!outs->s_isreg && outs->stream) {', 'int rc = fflush(outs->stream);', 'if(!result && rc) {', 'result = CURLE_WRITE_ERROR;', 'if(global->showerror)', 'fprintf(global->errors, "STR", result);', '}', '}', '#ifdef USE_METALINK', 'if(per->metalink && !per->metalink_next_res)', 'fprintf(global->errors, "STR",', 'per->mlfile->filename, per->this_url);', 'if(!per->metalink && config->use_metalink && result == CURLE_OK) {', 'int rv = parse_metalink(config, outs, per->this_url);', 'if(!rv) {', 'fprintf(config->global->errors, "STR",', 'per->this_url);', '}', 'else if(rv == -1)', 'fprintf(config->global->errors, "STR",', 'per->this_url);', '}', 'else if(per->metalink && result == CURLE_OK && !per->metalink_next_res) {', 'int rv;', '(void)fflush(outs->stream);', 'rv = metalink_check_hash(global, per->mlfile, outs->filename);', 'if(!rv)', 'per->metalink_next_res = 1;', '}', '#ifdef USE_METALINK', 'if(outs->metalink_parser)', 'metalink_parser_context_delete(outs->metalink_parser);', 'if(per->retry_numretries &&', '(!config->retry_maxtime ||', '(tvdiff(tvnow(), per->retrystart) <', 'config->retry_maxtime*1000L)) ) {', 'enum {', 'RETRY_NO,', 'RETRY_ALL_ERRORS,', 'RETRY_TIMEOUT,', 'RETRY_CONNREFUSED,', 'RETRY_HTTP,', 'RETRY_FTP,', '} retry = RETRY_NO;', 'long response = 0;', 'if((CURLE_OPERATION_TIMEDOUT == result) ||', '(CURLE_COULDNT_RESOLVE_HOST == result) ||', '(CURLE_COULDNT_RESOLVE_PROXY == result) ||', '(CURLE_FTP_ACCEPT_TIMEOUT == result))', 'retry = RETRY_TIMEOUT;', 'else if(config->retry_connrefused &&', '(CURLE_COULDNT_CONNECT == result)) {', 'long oserrno = 0;', 'curl_easy_getinfo(curl, CURLINFO_OS_ERRNO, &oserrno);', 'if(ECONNREFUSED == oserrno)', 'retry = RETRY_CONNREFUSED;', '}', 'else if((CURLE_OK == result) ||', '(config->failonerror &&', '(CURLE_HTTP_RETURNED_ERROR == result))) {', 'returned due to such an error, check for HTTP transient', 'long protocol = 0;', 'curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);', 'if((protocol == CURLPROTO_HTTP) || (protocol == CURLPROTO_HTTPS)) {', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);', 'switch(response) {', 'retry = RETRY_HTTP;', 'break;', '}', '}', 'else if(result) {', 'long protocol = 0;', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);', 'curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);', 'if((protocol == CURLPROTO_FTP || protocol == CURLPROTO_FTPS) &&', 'response / 100 == 4)', 'retry = RETRY_FTP;', '}', 'if(result && !retry && config->retry_all_errors)', 'retry = RETRY_ALL_ERRORS;', 'if(retry) {', 'long sleeptime = 0;', 'curl_off_t retry_after = 0;', 'static const char * const m[]={', 'NULL,', '"STR",', '"STR",', '"STR",', '"STR",', '"STR"', '};', 'sleeptime = per->retry_sleep;', 'if(RETRY_HTTP == retry) {', 'curl_easy_getinfo(curl, CURLINFO_RETRY_AFTER, &retry_after);', 'if(retry_after) {', 'if(retry_after > LONG_MAX/1000)', 'sleeptime = LONG_MAX;', 'else', '}', '}', 'warnf(config->global, "STR"', '"STR"', '"STR",', 'm[retry], sleeptime/1000L, per->retry_numretries);', 'per->retry_numretries--;', 'if(!config->retry_delay) {', 'per->retry_sleep *= 2;', 'if(per->retry_sleep > RETRY_SLEEP_MAX)', 'per->retry_sleep = RETRY_SLEEP_MAX;', '}', 'if(outs->bytes && outs->filename && outs->stream) {', 'int rc;', 'if(!global->mute)', 'fprintf(global->errors, "STR"', 'CURL_FORMAT_CURL_OFF_T "STR",', 'outs->bytes);', 'fflush(outs->stream);', '#ifdef HAVE_FTRUNCATE', 'if(ftruncate(fileno(outs->stream), outs->init)) {', 'if(global->showerror)', 'fprintf(global->errors,', '"STR");', 'return CURLE_WRITE_ERROR;', '}', 'rc = fseek(outs->stream, 0, SEEK_END);', '#else', "to the location we would have truncated it. This won't", 'work properly with large files on 32-bit systems, but', 'rc = fseek(outs->stream, (long)outs->init, SEEK_SET);', '#endif', 'if(rc) {', 'if(global->showerror)', 'fprintf(global->errors,', '"STR");', 'return CURLE_WRITE_ERROR;', '}', '}', '*retryp = TRUE;', '*delay = sleeptime;', 'return CURLE_OK;', '}', 'else if(per->metalink) {', 'long response = 0;', 'if(CURLE_OK == result) {', 'char *effective_url = NULL;', 'curl_easy_getinfo(curl, CURLINFO_EFFECTIVE_URL, &effective_url);', 'if(effective_url &&', 'curl_strnequal(effective_url, "STR", 4)) {', 'curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);', 'if(response != 200 && response != 206) {', 'per->metalink_next_res = 1;', 'fprintf(global->errors,', '"STR"', '"STR",', 'per->mlfile->filename, per->this_url, response);', '}', '}', '}', 'else {', 'per->metalink_next_res = 1;', 'fprintf(global->errors,', '"STR",', 'per->mlfile->filename, per->this_url,', 'curl_easy_strerror(result));', '}', '}', 'if((global->progressmode == CURL_PROGRESS_BAR) &&', 'per->progressbar.calls)', 'fputs("STR", per->progressbar.out);', 'if(outs->fopened && outs->stream) {', 'int rc = fclose(outs->stream);', 'if(!result && rc) {', 'result = CURLE_WRITE_ERROR;', 'if(global->showerror)', 'fprintf(global->errors, "STR", result);', '}', '}', 'if(!result && config->remote_time && outs->s_isreg && outs->filename) {', 'curl_off_t filetime = -1;', 'curl_easy_getinfo(curl, CURLINFO_FILETIME_T, &filetime);', 'setfiletime(filetime, outs->filename, global);', '}', 'if(config->writeout)', 'ourWriteOut(config->writeout, per, result);', 'if(per->heads.fopened && per->heads.stream)', 'fclose(per->heads.stream);', 'if(per->heads.alloc_filename)', 'Curl_safefree(per->heads.filename);', 'if(per->etag_save.fopened && per->etag_save.stream)', 'fclose(per->etag_save.stream);', 'if(per->etag_save.alloc_filename)', 'Curl_safefree(per->etag_save.filename);', 'curl_easy_cleanup(per->curl);', 'if(outs->alloc_filename)', 'free(outs->filename);', 'free(per->this_url);', 'free(per->separator_err);', 'free(per->separator);', 'free(per->outfile);', 'free(per->uploadfile);', 'return result;', '}']
2024-04-26 03:39:52.288 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'push r14', 'push r13', 'push r12', 'mov r12d,edx', 'push rbp', 'push rbx', 'sub rsp,0x38', 'mov r14,<MEM>', 'mov rbx,<MEM>', 'mov <MEM>,rcx', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'test r14,r14', '<JUMP> <LOC>', 'test rbx,rbx', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', 'mov r13,rdi', 'mov r15,rsi', 'mov <MEM>,0x0', 'mov rbp,r8', '<JUMP> <LOC>', 'mov r10d,<MEM>', 'test r10d,r10d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <fileno@plt>', 'mov rdi,r14', 'mov esi,eax', 'call <fwrite_xattr>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'nop <MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'xor r12d,r12d', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov eax,r12d', 'and eax,0xffffffef', 'cmp eax,0xc', '<JUMP> <LOC>', 'lea eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp r12d,0x7', '<JUMP> <LOC>', 'mov esi,0x200019', 'xor eax,eax', 'lea rdx,<MEM>', 'mov rdi,r14', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'cmp <MEM>,0x6f', 'mov esi,0x3', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movabs rdx,0x20c49ba5e353f7cf', 'mov r12,<MEM>', 'mov <MEM>,0x0', 'mov rax,r12', 'imul rdx', 'mov rax,r12', 'sar rax,0x3f', 'sar rdx,0x7', 'mov rcx,rdx', 'lea rdx,<MEM>', 'sub rcx,rax', '<JUMP> <LOC>', 'nop <MEM>', 'call <tvnow>', 'mov rcx,<MEM>', 'mov rsi,rdx', 'mov rdx,<MEM>', 'mov rdi,rax', 'call <tvdiff>', 'mov r8,rax', 'imul rax,<MEM>,0x3e8', 'cmp r8,rax', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'test r12d,r12d', '<JUMP> <LOC>', 'mov rdi,r14', 'lea rdx,<MEM>', 'mov esi,0x100001', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov edx,0x4', 'lea rsi,<MEM>', 'call <curl_strnequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'xor eax,eax', 'call <curl_easy_getinfo@plt>', 'mov r8,<MEM>', 'cmp r8,0xc8', '<JUMP> <LOC>', 'cmp r8,0xce', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'lea rsi,<MEM>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'mov rdx,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', 'nop <MEM>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x60000e', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0xffffffffffffffff', 'call <curl_easy_getinfo@plt>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov rdx,r13', 'call <setfiletime>', 'nop <MEM>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov edx,r12d', 'mov rsi,r15', 'call <ourwriteout>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <fclose@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'call <fclose@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_easy_cleanup@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x38', 'mov eax,r12d', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rcx,<MEM>', 'cmp rcx,0x18f', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'test r8d,r8d', '<JUMP> <LOC>', 'mov r12d,0x16', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'test r12d,r12d', 'sete <MEM>', 'call <fflush@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov edi,<MEM>', 'mov r12d,0x17', 'test edi,edi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov edx,0x17', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edi,<MEM>', 'call <close@plt>', 'mov r10d,<MEM>', 'test r10d,r10d', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov r9d,<MEM>', 'test r9d,r9d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'lea rcx,<MEM>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'xor eax,eax', 'mov edx,r12d', 'lea rsi,<MEM>', 'call <curl_mfprintf@plt>', 'cmp r12d,0x3c', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov edx,0x108', 'mov esi,0x1', 'lea rdi,<MEM>', 'call <fwrite@plt>', '<JUMP> <LOC>', 'call <fclose@plt>', 'test r12d,r12d', '<JUMP> <LOC>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov r12d,0x17', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov edx,0x17', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop <MEM>', 'movabs rdx,0x20c49ba5e353f7cf', 'mov r12,<MEM>', 'mov <MEM>,0x0', 'mov rax,r12', 'imul rdx', 'mov rax,r12', 'sar rax,0x3f', 'sar rdx,0x7', 'mov rcx,rdx', 'lea rdx,<MEM>', 'sub rcx,rax', 'mov rdi,<MEM>', 'mov r8,<MEM>', 'xor eax,eax', 'lea rsi,<MEM>', 'call <warnf>', 'sub <MEM>,0x1', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,0x927c0', 'add rax,rax', 'cmp rax,0x927c0', 'cmovg rax,rdx', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'test rdx,rdx', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <fflush@plt>', 'mov rdi,<MEM>', 'mov r14,<MEM>', 'call <fileno@plt>', 'mov rsi,r14', 'mov edi,eax', 'call <ftruncate@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov esi,<MEM>', 'test esi,esi', '<JUMP> <LOC>', 'mov r12d,0x17', '<JUMP> <LOC>', 'nop <MEM>', 'xor r12d,r12d', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor eax,eax', 'lea rdx,<MEM>', 'mov esi,0x200023', 'mov rdi,r14', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'test r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp r12d,0x16', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'lea rdx,<MEM>', 'mov rdi,r14', 'xor eax,eax', 'mov esi,0x200030', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'sub rax,0x4', 'test rax,0xfffffffffffffffb', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov esi,0x5', 'sub rax,0x190', 'cmp rax,0x63', '<JUMP> <LOC>', 'mov r12,<MEM>', 'mov ecx,0x3e8', 'mov <MEM>,0x0', 'mov rax,r12', 'cqo', 'idiv rcx', 'mov rcx,rax', 'lea rax,<MEM>', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edx,<MEM>', 'test edx,edx', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov edi,0xa', 'call <fputc@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <free@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <free@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x0', 'nop <MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,r12', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x1', 'mov edi,r12d', 'call <curl_easy_strerror@plt>', 'mov rcx,<MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'mov r8,rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'xor esi,esi', 'mov edx,0x2', 'call <fseek@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'test ecx,ecx', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'xor eax,eax', 'mov r12d,0x17', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'lea r8,<MEM>', 'xor eax,eax', 'mov esi,0x200030', 'mov rdi,r14', 'mov rdx,r8', 'mov <MEM>,r8', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'sub rax,0x1', 'cmp rax,0x1', '<JUMP> <LOC>', 'xor eax,eax', 'lea rdx,<MEM>', 'mov esi,0x200002', 'mov rdi,r14', 'mov <MEM>,r8', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'cmp rax,0x1f4', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp rax,0x198', '<JUMP> <LOC>', 'cmp rax,0x1ad', '<JUMP> <LOC>', 'test r12d,r12d', '<JUMP> <LOC>', '<JUMP> <LOC>', 'sub rax,0x1f6', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov rdx,r8', 'mov esi,0x600039', 'mov rdi,r14', 'xor eax,eax', 'mov <MEM>,0x0', 'mov r12,<MEM>', 'call <curl_easy_getinfo@plt>', 'mov rcx,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'movabs rax,0x20c49ba5e353f7', 'cmp rcx,rax', '<JUMP> <LOC>', 'imul r12,rcx,0x3e8', 'lea rdx,<MEM>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'mov edx,0x16', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'mov edi,r12d', 'call <curl_easy_strerror@plt>', 'mov rcx,rax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', 'mov rdi,<MEM>', '<JUMP> <LOC>', 'xchg ax,ax', 'movabs rdx,0x20c49ba5e353f7cf', 'mov rax,r12', 'imul rdx', 'mov rax,r12', 'sar rax,0x3f', 'sar rdx,0x7', 'mov rcx,rdx', 'lea rdx,<MEM>', 'sub rcx,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'xor eax,eax', 'call <curl_mfprintf@plt>', '<JUMP> <LOC>', 'nop <MEM>', 'call <__errno_location@plt>', 'mov edi,<MEM>', 'call <strerror@plt>', 'mov rdx,<MEM>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'mov rcx,rax', 'xor eax,eax', 'call <warnf>', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov rsi,rbx', 'mov r12d,0x17', 'call <tool_create_output_file>', 'test al,al', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea r8,<MEM>', 'xor eax,eax', 'mov esi,0x200030', 'mov rdi,r14', 'mov rdx,r8', 'mov <MEM>,r8', 'mov <MEM>,0x0', 'call <curl_easy_getinfo@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'sub rax,0x1', 'cmp rax,0x1', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'lea rdx,<MEM>', 'mov rcx,rax', 'movabs r12,0x7fffffffffffffff', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'nop cs:<MEM>']
filter_and_generate_data_items: 100%|██████████| 834/834 [00:00<00:00, 1169.72it/s]
2024-04-26 03:39:53.275 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 834 ---> 91
2024-04-26 03:39:53.277 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['getparameter', 'tool_version_info', 'main_free', 'post_per_transfer', 'serial_transfers', 'run_all_transfers']
2024-04-26 03:39:53.278 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['getparameter', 'tool_version_info', 'post_per_transfer']
2024-04-26 03:39:53.278 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['getparameter']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.47s/it]
2024-04-26 03:40:07.211 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9542640447616577, getparameter ---> getparameter
2024-04-26 03:40:07.212 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.3622990846633911, tool_version_info ---> glob_next_url
2024-04-26 03:40:07.212 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5518104434013367, main_free ---> create_transfer
2024-04-26 03:40:07.212 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8282856345176697, serial_transfers ---> parseconfig
2024-04-26 03:40:07.213 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.2081742286682129, run_all_transfers ---> get_param_part
2024-04-26 03:40:07.213 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 14 ---> 5
2024-04-26 03:40:07.213 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:40:07.286 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.0, fix prob: 2.934016571365383e-11
2024-04-26 03:40:07.286 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:40:07.287 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:40:07.287 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:40:07.287 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:40:07.289 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 231 CVE-2022-22576
filter_and_generate_data_items:  20%|██        | 638/3140 [00:00<00:01, 1571.53it/s]2024-04-26 03:40:15.406 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: conn_free, 1, 0
2024-04-26 03:40:15.408 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static void conn_free(struct connectdata *conn)', '{', 'DEBUGASSERT(conn);', 'Curl_free_idnconverted_hostname(&conn->host);', 'Curl_free_idnconverted_hostname(&conn->conn_to_host);', '#ifndef CURL_DISABLE_PROXY', 'Curl_free_idnconverted_hostname(&conn->http_proxy.host);', 'Curl_free_idnconverted_hostname(&conn->socks_proxy.host);', 'Curl_safefree(conn->http_proxy.user);', 'Curl_safefree(conn->socks_proxy.user);', 'Curl_safefree(conn->http_proxy.passwd);', 'Curl_safefree(conn->socks_proxy.passwd);', 'Curl_free_primary_ssl_config(&conn->proxy_ssl_config);', '#endif', 'Curl_safefree(conn->user);', 'Curl_safefree(conn->passwd);', 'Curl_safefree(conn->sasl_authzid);', 'Curl_safefree(conn->options);', 'Curl_dyn_free(&conn->trailer);', 'Curl_safefree(conn->hostname_resolve);', 'Curl_safefree(conn->secondaryhostname);', 'Curl_safefree(conn->connect_state);', 'conn_reset_all_postponed_data(conn);', 'Curl_llist_destroy(&conn->easyq, NULL);', 'Curl_safefree(conn->localdev);', 'Curl_free_primary_ssl_config(&conn->ssl_config);', '#ifdef USE_UNIX_SOCKETS', 'Curl_safefree(conn->unix_domain_socket);', '#endif', '#ifdef USE_SSL', 'Curl_safefree(conn->ssl_extra);', '#endif', '}']
2024-04-26 03:40:15.410 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push rbp', 'mov rbp,rdi', 'push rbx', 'sub rsp,0x8', 'lea rbx,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'lea rdi,<MEM>', 'mov <MEM>,0x0', 'call <curl_free_primary_ssl_config>', 'mov rdi,<MEM>', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'lea rdi,<MEM>', 'mov <MEM>,0x0', 'call <curl_dyn_free>', 'mov rdi,<MEM>', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'xor esi,esi', 'lea rdi,<MEM>', 'mov <MEM>,0x0', 'call <curl_llist_destroy>', 'mov rdi,<MEM>', 'call <MEM>', 'lea rdi,<MEM>', 'mov <MEM>,0x0', 'call <curl_free_primary_ssl_config>', 'mov rdi,<MEM>', 'call <MEM>', 'mov rdi,<MEM>', 'mov <MEM>,0x0', 'call <MEM>', 'mov rax,<MEM>', 'mov rdi,rbp', 'mov <MEM>,0x0', 'add rsp,0x8', 'pop rbx', 'pop rbp', 'jmp rax', 'nop <MEM>']
filter_and_generate_data_items:  47%|████▋     | 1476/3140 [00:00<00:00, 1953.15it/s]2024-04-26 03:40:15.811 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ConnectionExists, 5, 3
2024-04-26 03:40:15.812 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static bool', 'ConnectionExists(struct Curl_easy *data,', 'struct connectdata *needle,', 'struct connectdata **usethis,', 'bool *force_reuse,', 'bool *waitpipe)', '{', 'struct connectdata *check;', 'struct connectdata *chosen = 0;', 'bool foundPendingCandidate = FALSE;', 'bool canmultiplex = IsMultiplexingPossible(data, needle);', 'struct connectbundle *bundle;', 'const char *hostbundle;', '#ifdef USE_NTLM', 'bool wantNTLMhttp = ((data->state.authhost.want &', '(CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&', '(needle->handler->protocol & PROTO_FAMILY_HTTP));', '#ifndef CURL_DISABLE_PROXY', 'bool wantProxyNTLMhttp = (needle->bits.proxy_user_passwd &&', '((data->state.authproxy.want &', '(CURLAUTH_NTLM | CURLAUTH_NTLM_WB)) &&', '(needle->handler->protocol & PROTO_FAMILY_HTTP)));', '#else', 'bool wantProxyNTLMhttp = FALSE;', '#endif', '#endif', '*force_reuse = FALSE;', '*waitpipe = FALSE;', 'bundle = Curl_conncache_find_bundle(data, needle, data->state.conn_cache,', '&hostbundle);', 'if(bundle) {', 'struct Curl_llist_element *curr;', 'infof(data, "STR",', 'hostbundle, (void *)bundle, (bundle->multiuse == BUNDLE_MULTIPLEX ?', '"STR" : "STR"));', 'if(canmultiplex) {', 'if(bundle->multiuse == BUNDLE_UNKNOWN) {', 'if(data->set.pipewait) {', 'infof(data, "STR");', '*waitpipe = TRUE;', 'CONNCACHE_UNLOCK(data);', '}', 'infof(data, "STR");', 'canmultiplex = FALSE;', '}', 'if((bundle->multiuse == BUNDLE_MULTIPLEX) &&', '!Curl_multiplex_wanted(data->multi)) {', 'infof(data, "STR");', 'canmultiplex = FALSE;', '}', 'if(bundle->multiuse == BUNDLE_NO_MULTIUSE) {', 'infof(data, "STR");', 'canmultiplex = FALSE;', '}', '}', 'curr = bundle->conn_list.head;', 'while(curr) {', 'bool match = FALSE;', 'size_t multiplexed = 0;', 'check = curr->ptr;', 'curr = curr->next;', 'if(check->bits.connect_only || check->bits.close)', 'continue;', 'if(extract_if_dead(check, data)) {', 'Curl_disconnect(data, check, TRUE);', 'continue;', '}', 'if(data->set.ipver != CURL_IPRESOLVE_WHATEVER', '&& data->set.ipver != check->ip_version) {', 'continue;', '}', 'if(bundle->multiuse == BUNDLE_MULTIPLEX)', 'multiplexed = CONN_INUSE(check);', 'if(!canmultiplex) {', 'if(multiplexed) {', 'continue;', '}', 'if(Curl_resolver_asynch()) {', 'if(!check->primary_ip[0]) {', 'infof(data,', '"STR",', 'check->connection_id);', 'continue;', '}', '}', 'if(check->sock[FIRSTSOCKET] == CURL_SOCKET_BAD) {', 'foundPendingCandidate = TRUE;', 'infof(data, "STR",', 'check->connection_id);', 'continue;', '}', '}', '#ifdef USE_UNIX_SOCKETS', 'if(needle->unix_domain_socket) {', 'if(!check->unix_domain_socket)', 'continue;', 'if(strcmp(needle->unix_domain_socket, check->unix_domain_socket))', 'continue;', 'if(needle->bits.abstract_unix_socket !=', 'check->bits.abstract_unix_socket)', 'continue;', '}', 'else if(check->unix_domain_socket)', 'continue;', '#endif', 'if((needle->handler->flags&PROTOPT_SSL) !=', '(check->handler->flags&PROTOPT_SSL))', 'if(get_protocol_family(check->handler) !=', 'needle->handler->protocol || !check->bits.tls_upgraded)', 'continue;', '#ifndef CURL_DISABLE_PROXY', 'if(needle->bits.httpproxy != check->bits.httpproxy ||', 'needle->bits.socksproxy != check->bits.socksproxy)', 'continue;', 'if(needle->bits.socksproxy &&', '!socks_proxy_info_matches(&needle->socks_proxy,', '&check->socks_proxy))', 'continue;', '#endif', 'if(needle->bits.conn_to_host != check->bits.conn_to_host)', 'continue;', 'if(needle->bits.conn_to_port != check->bits.conn_to_port)', 'continue;', '#ifndef CURL_DISABLE_PROXY', 'if(needle->bits.httpproxy) {', 'if(!proxy_info_matches(&needle->http_proxy, &check->http_proxy))', 'continue;', 'if(needle->bits.tunnel_proxy != check->bits.tunnel_proxy)', 'continue;', 'if(needle->http_proxy.proxytype == CURLPROXY_HTTPS) {', 'if(needle->handler->flags&PROTOPT_SSL) {', 'if(!Curl_ssl_config_matches(&needle->proxy_ssl_config,', '&check->proxy_ssl_config))', 'continue;', 'if(check->proxy_ssl[FIRSTSOCKET].state != ssl_connection_complete)', 'continue;', '}', 'if(!Curl_ssl_config_matches(&needle->ssl_config,', '&check->ssl_config))', 'continue;', 'if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete)', 'continue;', '}', '}', '#endif', 'if(!canmultiplex && CONN_INUSE(check))', 'continue;', 'if(CONN_INUSE(check)) {', 'struct Curl_llist_element *e = check->easyq.head;', 'struct Curl_easy *entry = e->ptr;', 'if(entry->multi != data->multi)', 'continue;', '}', 'if(needle->localdev || needle->localport) {', "re-use a random other one, although if we didn't ask for a", 'particular one we can reuse one that was bound.', 'This comparison is a bit rough and too strict. Since the input', 'parameters can be specified in numerous ways and still end up the', 'same it would take a lot of processing to make it really accurate.', 'Instead, this matching will assume that re-uses of bound connections', 'will most likely also re-use the exact same binding parameters and', "missing out a few edge cases shouldn't hurt anyone very much.", 'if((check->localport != needle->localport) ||', '(check->localportrange != needle->localportrange) ||', '(needle->localdev &&', '(!check->localdev || strcmp(check->localdev, needle->localdev))))', 'continue;', '}', 'if(!(needle->handler->flags & PROTOPT_CREDSPERREQUEST)) {', 'if(strcmp(needle->user, check->user) ||', 'strcmp(needle->passwd, check->passwd)) {', 'continue;', '}', '}', 'if((needle->handler->protocol & PROTO_FAMILY_HTTP) &&', '(check->httpversion >= 20) &&', '(data->state.httpwant < CURL_HTTP_VERSION_2_0))', 'continue;', 'if((needle->handler->flags&PROTOPT_SSL)', '#ifndef CURL_DISABLE_PROXY', '|| !needle->bits.httpproxy || needle->bits.tunnel_proxy', '#endif', ') {', 'it is a non-SSL protocol tunneled or it is a non-SSL protocol which', 'if((strcasecompare(needle->handler->scheme, check->handler->scheme) ||', '(get_protocol_family(check->handler) ==', 'needle->handler->protocol && check->bits.tls_upgraded)) &&', '(!needle->bits.conn_to_host || strcasecompare(', 'needle->conn_to_host.name, check->conn_to_host.name)) &&', '(!needle->bits.conn_to_port ||', 'needle->conn_to_port == check->conn_to_port) &&', 'strcasecompare(needle->host.name, check->host.name) &&', 'needle->remote_port == check->remote_port) {', 'previous connection was TLS upgraded, and the hostname and host', 'if(needle->handler->flags & PROTOPT_SSL) {', 'if(!Curl_ssl_config_matches(&needle->ssl_config,', '&check->ssl_config)) {', 'DEBUGF(infof(data,', '"STR"', '"STR",', 'check->connection_id));', 'continue;', '}', 'if(check->ssl[FIRSTSOCKET].state != ssl_connection_complete) {', 'foundPendingCandidate = TRUE;', 'DEBUGF(infof(data,', '"STR"', '"STR",', 'check->connection_id));', 'continue;', '}', '}', 'match = TRUE;', '}', '}', 'else {', 'match = TRUE;', '}', 'if(match) {', '#if defined(USE_NTLM)', 'already authenticating with the right credentials. If not, keep', 'looking so that we can reuse NTLM connections if', 'possible. (Especially we must not reuse the same connection if', 'if(wantNTLMhttp) {', 'if(strcmp(needle->user, check->user) ||', 'strcmp(needle->passwd, check->passwd)) {', 'if(check->http_ntlm_state == NTLMSTATE_NONE)', 'chosen = check;', 'continue;', '}', '}', 'else if(check->http_ntlm_state != NTLMSTATE_NONE) {', 'continue;', '}', '#ifndef CURL_DISABLE_PROXY', 'if(wantProxyNTLMhttp) {', 'if(!check->http_proxy.user || !check->http_proxy.passwd)', 'continue;', 'if(strcmp(needle->http_proxy.user, check->http_proxy.user) ||', 'strcmp(needle->http_proxy.passwd, check->http_proxy.passwd))', 'continue;', '}', 'else if(check->proxy_ntlm_state != NTLMSTATE_NONE) {', 'continue;', '}', '#endif', 'if(wantNTLMhttp || wantProxyNTLMhttp) {', 'chosen = check;', 'if((wantNTLMhttp &&', '(check->http_ntlm_state != NTLMSTATE_NONE)) ||', '(wantProxyNTLMhttp &&', '(check->proxy_ntlm_state != NTLMSTATE_NONE))) {', '*force_reuse = TRUE;', 'break;', '}', 'continue;', '}', '#endif', 'if(canmultiplex) {', 'if(!multiplexed) {', 'chosen = check;', 'break;', '}', '#ifdef USE_NGHTTP2', 'if(check->bits.multiplex) {', 'struct http_conn *httpc = &check->proto.httpc;', 'if(multiplexed >= httpc->settings.max_concurrent_streams) {', 'infof(data, "STR",', 'multiplexed);', 'continue;', '}', 'else if(multiplexed >=', 'Curl_multi_max_concurrent_streams(data->multi)) {', 'infof(data, "STR"', '"STR",', 'multiplexed);', 'continue;', '}', '}', '#endif', 'chosen = check;', 'infof(data, "STR");', 'break;', '}', 'else {', 'chosen = check;', 'break;', '}', '}', '}', '}', 'if(chosen) {', 'Curl_attach_connnection(data, chosen);', 'CONNCACHE_UNLOCK(data);', '*usethis = chosen;', '}', 'CONNCACHE_UNLOCK(data);', 'if(foundPendingCandidate && data->set.pipewait) {', 'infof(data,', '"STR");', '*waitpipe = TRUE;', '}', '}']
2024-04-26 03:40:15.813 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['push r15', 'mov r15,rdi', 'push r14', 'mov r14,rsi', 'push r13', 'push r12', 'push rbp', 'push rbx', 'sub rsp,0x68', 'mov <MEM>,rdx', 'mov <MEM>,rcx', 'mov <MEM>,r8', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov rax,<MEM>', 'test <MEM>,0x3', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'and ax,0x4040', 'cmp ax,0x4040', '<JUMP> <LOC>', 'xor r12d,r12d', 'test <MEM>,0x28', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'xchg ax,ax', 'xor r12d,r12d', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'test <MEM>,0x4', '<JUMP> <LOC>', 'test <MEM>,0x28', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rsi,r14', 'mov rdi,r15', 'mov rdx,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'call <curl_conncache_find_bundle>', 'mov rbx,rax', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x2', 'lea r8,<MEM>', 'mov rcx,rbx', 'mov rdi,r15', 'lea rax,<MEM>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'cmovne r8,rax', 'xor eax,eax', 'call <curl_infof>', 'test r12b,r12b', '<JUMP> <LOC>', 'mov r13,<MEM>', 'test r13,r13', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,rax', 'nop <MEM>', 'mov rbp,<MEM>', 'mov r13,<MEM>', 'test <MEM>,0x10000040', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'cmp al,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'test r12b,r12b', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor edx,edx', 'cmp <MEM>,0xffffffff', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov <MEM>,rdx', 'test rsi,rsi', '<JUMP> <LOC>', 'call <strcmp@plt>', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'xor al,<MEM>', 'test al,0x40', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rcx,<MEM>', 'mov eax,<MEM>', 'xor eax,<MEM>', 'test al,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'jns 588b0 <connectionexists+OFFSET>', 'movzx eax,<MEM>', 'movzx ecx,<MEM>', 'xor ecx,eax', 'and ecx,0x3', '<JUMP> <LOC>', 'test al,0x2', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'xor al,<MEM>', 'test al,0x6', '<JUMP> <LOC>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'nop', 'test r13,r13', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov esi,0x5', 'mov rdi,r15', 'call <curl_share_unlock>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'xor eax,eax', 'mov rbx,<MEM>', 'xor rbx,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x68', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop cs:<MEM>', 'mov rsi,r15', 'mov rdi,rbp', 'call <extract_if_dead.part.0>', 'test al,al', '<JUMP> <LOC>', 'mov edx,0x1', 'mov rsi,rbp', 'mov rdi,r15', 'call <curl_disconnect>', 'test r13,r13', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdx,<MEM>', 'test r12b,r12b', '<JUMP> <LOC>', 'test rdx,rdx', '<JUMP> <LOC>', 'test r13,r13', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'xor edx,edx', '<JUMP> <LOC>', 'nop <MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'test r13,r13', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdx,<MEM>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_infof>', 'test r13,r13', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor r12d,r12d', 'call <curl_infof>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'xor r12d,r12d', 'call <curl_infof>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'call <curl_safe_strcasecompare>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'xor al,<MEM>', 'test al,0x8', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'mov <MEM>,rdx', 'call <curl_ssl_config_matches>', 'test al,al', '<JUMP> <LOC>', 'cmp <MEM>,0x2', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov <MEM>,rdx', 'call <curl_ssl_config_matches>', 'mov rdx,<MEM>', 'test al,al', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'test r12b,r12b', '<JUMP> <LOC>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rcx', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'movzx eax,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'cmp <MEM>,ax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'test rdi,rdi', '<JUMP> <LOC>', 'call <strcmp@plt>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov r8d,<MEM>', 'test r8b,0x80', '<JUMP> <LOC>', 'test <MEM>,0x3', '<JUMP> <LOC>', 'cmp <MEM>,0x13', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'and r8d,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'and eax,0x9', 'cmp al,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'mov rsi,<MEM>', 'call <curl_strcasecompare>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'jns 588b0 <connectionexists+OFFSET>', 'movzx eax,<MEM>', 'test al,0x2', '<JUMP> <LOC>', 'test al,0x4', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'call <curl_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'mov r11d,<MEM>', 'test r11d,r11d', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'call <strcmp@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <strcmp@plt>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'test r8d,r8d', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov r8,<MEM>', 'test r8,r8', 'mov <MEM>,r8', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <strcmp@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov r8,<MEM>', 'mov rdi,<MEM>', 'mov rsi,r8', 'call <strcmp@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'test ecx,ecx', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rbp', 'mov <MEM>,0x1', 'mov rsi,<MEM>', 'mov rdi,r15', 'call <curl_attach_connnection>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov esi,0x5', 'mov rdi,r15', 'call <curl_share_unlock>', 'mov rax,<MEM>', 'mov rbx,<MEM>', 'mov <MEM>,rbx', 'mov eax,0x1', '<JUMP> <LOC>', 'nop <MEM>', 'mov rax,<MEM>', 'test <MEM>,0x3', 'setne al', 'movzx eax,al', 'mov <MEM>,eax', '<JUMP> <LOC>', 'nop <MEM>', 'mov rdi,<MEM>', 'call <curl_multiplex_wanted>', 'mov r12d,eax', 'test al,al', '<JUMP> <LOC>', 'cmp <MEM>,0x2', 'seta r12b', 'test <MEM>,0x28', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test <MEM>,0x3', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'xchg ax,ax', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'call <curl_safe_strcasecompare>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'test rdi,rdi', 'sete cl', 'test rsi,rsi', 'sete al', 'cmp cl,al', '<JUMP> <LOC>', 'test rdi,rdi', '<JUMP> <LOC>', 'test rsi,rsi', '<JUMP> <LOC>', 'call <strcmp@plt>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,<MEM>', 'test rdi,rdi', 'sete cl', 'test rsi,rsi', 'sete al', 'cmp cl,al', '<JUMP> <LOC>', 'test rsi,rsi', '<JUMP> <LOC>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov <MEM>,rdx', 'call <strcmp@plt>', 'mov rdx,<MEM>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_infof>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'nop <MEM>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov esi,0x5', 'mov rdi,r15', 'call <curl_share_unlock>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'call <curl_infof>', 'mov <MEM>,0x1', 'test r13,r13', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop <MEM>', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_infof>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'xor eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_multiplex_wanted>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'test ax,ax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,r8d', 'mov <MEM>,rcx', 'call <strcmp@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <strcmp@plt>', 'mov rcx,<MEM>', 'mov r8d,<MEM>', 'test eax,eax', 'mov rdx,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor r12d,r12d', 'call <curl_infof>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rdx', 'call <curl_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'mov r9d,<MEM>', 'test r9d,r9d', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov edi,<MEM>', 'test edi,edi', '<JUMP> <LOC>', 'mov esi,<MEM>', 'test esi,esi', '<JUMP> <LOC>', 'mov edx,<MEM>', 'test edx,edx', '<JUMP> <LOC>', 'mov <MEM>,rbp', '<JUMP> <LOC>', 'mov r10d,<MEM>', 'test r10d,r10d', 'cmovne rbp,<MEM>', 'mov <MEM>,rbp', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'sub r12b,0x1', '<JUMP> <LOC>', 'test rdx,rdx', '<JUMP> <LOC>', 'mov <MEM>,rbp', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'call <curl_infof>', 'mov <MEM>,rbp', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_ssl_config_matches>', 'test al,al', '<JUMP> <LOC>', 'cmp <MEM>,0x2', 'mov rdx,<MEM>', '<JUMP> <LOC>', 'mov <MEM>,al', '<JUMP> <LOC>', 'data16 nop cs:<MEM>', 'xchg ax,ax']
filter_and_generate_data_items:  93%|█████████▎| 2914/3140 [00:01<00:00, 2372.14it/s]2024-04-26 03:40:16.531 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_ssl_config_matches, 2, 0
2024-04-26 03:40:16.534 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['bool', 'Curl_ssl_config_matches(struct ssl_primary_config *data,', 'struct ssl_primary_config *needle)', '{', 'if((data->version == needle->version) &&', '(data->version_max == needle->version_max) &&', '(data->verifypeer == needle->verifypeer) &&', '(data->verifyhost == needle->verifyhost) &&', '(data->verifystatus == needle->verifystatus) &&', 'blobcmp(data->cert_blob, needle->cert_blob) &&', 'blobcmp(data->ca_info_blob, needle->ca_info_blob) &&', 'blobcmp(data->issuercert_blob, needle->issuercert_blob) &&', 'safecmp(data->CApath, needle->CApath) &&', 'safecmp(data->CAfile, needle->CAfile) &&', 'safecmp(data->issuercert, needle->issuercert) &&', 'safecmp(data->clientcert, needle->clientcert) &&', 'safecmp(data->random_file, needle->random_file) &&', 'safecmp(data->egdsocket, needle->egdsocket) &&', 'Curl_safe_strcasecompare(data->cipher_list, needle->cipher_list) &&', 'Curl_safe_strcasecompare(data->cipher_list13, needle->cipher_list13) &&', 'Curl_safe_strcasecompare(data->curves, needle->curves) &&', 'Curl_safe_strcasecompare(data->pinned_key, needle->pinned_key))', 'return TRUE;', 'return FALSE;', '}']
2024-04-26 03:40:16.535 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'xor eax,eax', 'ret', 'nop', 'push rbp', 'mov rbp,rsi', 'push rbx', 'mov rbx,rdi', 'sub rsp,0x8', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'xor eax,eax', 'add rsp,0x8', 'pop rbx', 'pop rbp', 'ret', 'nop', 'movzx eax,<MEM>', 'xor al,<MEM>', 'test al,0x7', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <blobcmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <blobcmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <blobcmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <safecmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <safecmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <safecmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <safecmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <safecmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <safecmp>', 'test al,al', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <curl_safe_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <curl_safe_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <curl_safe_strcasecompare>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdi,<MEM>', 'call <curl_safe_strcasecompare>', 'test eax,eax', 'setne al', '<JUMP> <LOC>', 'nop cs:<MEM>']
filter_and_generate_data_items: 100%|██████████| 3140/3140 [00:01<00:00, 1988.21it/s]
2024-04-26 03:40:17.617 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 3140 ---> 311
2024-04-26 03:40:17.621 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['conn_free', 'ConnectionExists', 'create_conn', 'Curl_ssl_config_matches']
2024-04-26 03:40:17.621 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['Curl_strntolower', 'conn_free', 'ConnectionExists', 'Curl_ssl_config_matches']
2024-04-26 03:40:17.622 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 3/3 [00:04<00:00,  1.35s/it]
2024-04-26 03:40:37.926 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7221596837043762, conn_free ---> Curl_output_aws_sigv4
2024-04-26 03:40:37.927 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5615001320838928, create_conn ---> Curl_proxyCONNECT
2024-04-26 03:40:37.927 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 41 ---> 2
2024-04-26 03:40:37.927 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:40:37.928 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:40:37.928 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:40:37.928 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:40:37.928 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:40:37.929 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:40:37.931 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 232 CVE-2023-38039
filter_and_generate_data_items:  62%|██████▏   | 585/947 [00:00<00:00, 1925.31it/s]2024-04-26 03:40:46.085 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_pp_readresp, 4, 1
2024-04-26 03:40:46.087 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['CURLcode Curl_pp_readresp(struct Curl_easy *data,', 'curl_socket_t sockfd,', 'struct pingpong *pp,', '{', 'bool keepon = TRUE;', 'ssize_t gotbytes;', 'char *ptr;', 'struct connectdata *conn = data->conn;', 'char * const buf = data->state.buffer;', 'CURLcode result = CURLE_OK;', '*size = 0;', 'ptr = buf + pp->nread_resp;', 'perline = (ssize_t)(ptr-pp->linestart_resp);', 'while((pp->nread_resp < (size_t)data->set.buffer_size) &&', '(keepon && !result)) {', 'if(pp->cache) {', 'if((ptr + pp->cache_size) > (buf + data->set.buffer_size + 1)) {', 'failf(data, "STR");', 'return CURLE_WEIRD_SERVER_REPLY;', '}', 'memcpy(ptr, pp->cache, pp->cache_size);', 'gotbytes = (ssize_t)pp->cache_size;', '}', 'else {', '#ifdef HAVE_GSSAPI', 'enum protection_level prot = conn->data_prot;', 'conn->data_prot = PROT_CLEAR;', '#endif', 'DEBUGASSERT((ptr + data->set.buffer_size - pp->nread_resp) <=', '(buf + data->set.buffer_size + 1));', 'result = Curl_read(data, sockfd, ptr,', 'data->set.buffer_size - pp->nread_resp,', '&gotbytes);', '#ifdef HAVE_GSSAPI', 'DEBUGASSERT(prot  > PROT_NONE && prot < PROT_LAST);', 'conn->data_prot = (unsigned char)prot;', '#endif', 'if(result == CURLE_AGAIN)', 'if(result)', 'keepon = FALSE;', '}', 'if(!keepon)', ';', 'else if(gotbytes <= 0) {', 'keepon = FALSE;', 'result = CURLE_RECV_ERROR;', 'failf(data, "STR", SOCKERRNO);', '}', 'else {', 'ssize_t i;', 'ssize_t clipamount = 0;', 'bool restart = FALSE;', 'data->req.headerbytecount += (long)gotbytes;', 'pp->nread_resp += gotbytes;', 'for(i = 0; i < gotbytes; ptr++, i++) {', 'perline++;', "if(*ptr == '\\n') {", '#ifdef HAVE_GSSAPI', 'if(!conn->sec_complete)', '#endif', 'Curl_debug(data, CURLINFO_HEADER_IN,', 'pp->linestart_resp, (size_t)perline);', 'result = Curl_client_write(data, CLIENTWRITE_HEADER,', 'pp->linestart_resp, perline);', 'if(result)', 'return result;', 'if(pp->endofresp(data, conn, pp->linestart_resp, perline, code)) {', 'size_t n = ptr - pp->linestart_resp;', 'memmove(buf, pp->linestart_resp, n);', 'keepon = FALSE;', 'break;', '}', 'pp->linestart_resp = ptr + 1;', '}', '}', 'if(!keepon && (i != gotbytes)) {', 'full chunk of data we have read from the server. We therefore need', 'to store the rest of the data to be checked on the next invoke as', 'clipamount = gotbytes - i;', 'restart = TRUE;', 'DEBUGF(infof(data, "STR"', '"STR",', '(int)clipamount));', '}', 'else if(keepon) {', 'if((perline == gotbytes) &&', '(gotbytes > (ssize_t)data->set.buffer_size/2)) {', 'with it. We keep the first bytes of the line then we throw', 'infof(data, "STR"', '"STR", gotbytes);', 'restart = TRUE;', 'clipamount = 40;', '}', 'else if(pp->nread_resp > (size_t)data->set.buffer_size/2) {', 'trailing data to take care of, so we put any such part in the', 'clipamount = perline;', 'restart = TRUE;', '}', '}', 'else if(i == gotbytes)', 'restart = TRUE;', 'if(clipamount) {', 'pp->cache_size = clipamount;', 'pp->cache = malloc(pp->cache_size);', 'if(pp->cache)', 'memcpy(pp->cache, pp->linestart_resp, pp->cache_size);', 'else', 'return CURLE_OUT_OF_MEMORY;', '}', 'if(restart) {', 'ptr = pp->linestart_resp = buf;', 'perline = 0;', '}', 'pp->pending_resp = FALSE;', 'return result;', '}']
2024-04-26 03:40:46.088 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r15', 'push r14', 'mov r14,rcx', 'push r13', 'push r12', 'mov r12d,0x1', 'push rbp', 'mov rbp,rdi', 'push rbx', 'mov rbx,rdx', 'mov r15,rbp', 'sub rsp,0x58', 'mov r9,<MEM>', 'mov <MEM>,esi', 'mov rbp,r9', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rsi,<MEM>', 'mov <MEM>,rax', 'lea r13,<MEM>', 'mov <MEM>,r8', 'mov rax,r13', 'sub rax,<MEM>', 'mov edx,<MEM>', 'lea rdi,<MEM>', 'mov <MEM>,rdi', 'mov <MEM>,rax', 'xor eax,eax', 'mov ecx,edx', 'cmp rcx,rsi', '<JUMP> <LOC>', 'test eax,eax', 'sete dl', 'and r12b,dl', '<JUMP> <LOC>', 'mov r8,<MEM>', 'test r8,r8', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'lea rsi,<MEM>', 'cmp rsi,rax', '<JUMP> <LOC>', 'xor eax,eax', 'lea rsi,<MEM>', 'mov rdi,r15', 'call <curl_failf>', 'mov eax,0x8', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x58', 'pop rbx', 'pop rbp', 'pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret', 'nop <MEM>', 'mov rsi,r8', 'mov rdi,r13', 'call <memcpy@plt>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov r10,r13', 'xor r11d,r11d', 'mov <MEM>,r12b', 'mov r13,rbx', 'add <MEM>,rax', 'mov r12,<MEM>', 'add <MEM>,rax', 'mov rbx,r10', 'mov <MEM>,rbp', 'mov rbp,r11', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov rdx,rcx', 'add rbp,0x1', 'mov rbx,rcx', 'cmp rax,rbp', '<JUMP> <LOC>', 'add r12,0x1', 'cmp <MEM>,0xa', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rcx,r12', 'mov esi,0x1', 'mov rdi,r15', 'call <curl_debug>', 'mov rdx,<MEM>', 'mov rcx,r12', 'mov rdi,r15', 'mov esi,0x2', 'call <curl_client_write>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rcx,r12', 'mov rsi,<MEM>', 'mov r8,r14', 'mov rdi,r15', 'call <MEM>', 'lea rcx,<MEM>', 'mov rdx,rcx', 'test al,al', '<JUMP> <LOC>', 'mov <MEM>,rcx', 'mov rax,<MEM>', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop cs:<MEM>', 'sub rcx,rsi', 'mov r8,<MEM>', 'mov esi,<MEM>', 'mov rdx,r13', 'mov rdi,r15', 'call <curl_read>', 'cmp eax,0x51', '<JUMP> <LOC>', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov edx,<MEM>', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'call <__errno_location@plt>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor r12d,r12d', 'mov edx,<MEM>', 'xor eax,eax', 'call <curl_failf>', 'mov rsi,<MEM>', 'mov eax,0x38', 'mov edx,<MEM>', '<JUMP> <LOC>', 'xor eax,eax', '<JUMP> <LOC>', 'mov rbx,r13', 'mov r13,rdx', 'mov edx,<MEM>', 'mov rdi,r12', 'mov <MEM>,r12', 'mov rbp,<MEM>', 'mov ecx,edx', 'movzx r12d,<MEM>', 'shr ecx,1', 'cmp rax,rdi', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'cmp rsi,rcx', '<JUMP> <LOC>', 'xor eax,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov <MEM>,rbp', 'mov r10,rbx', 'mov rbx,r13', 'mov rbp,<MEM>', 'mov <MEM>,rcx', 'sub r10,rsi', 'mov r12,r10', 'mov rdi,rbp', 'mov rdx,r10', 'call <memmove@plt>', 'mov <MEM>,0x0', 'mov rcx,<MEM>', 'xor r12d,r12d', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov <MEM>,rcx', 'mov r11,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'add r11,0x1', 'mov <MEM>,0x0', 'mov rdi,rax', 'sub rdi,r11', 'mov <MEM>,rdi', 'cmp rax,r11', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'mov <MEM>,rax', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,rax', 'mov rdi,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdx,<MEM>', 'call <memcpy@plt>', 'mov edx,<MEM>', 'mov <MEM>,0x0', 'mov r13,rbp', 'xor esi,esi', 'xor eax,eax', 'mov <MEM>,rbp', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp rcx,<MEM>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,r15', 'xor eax,eax', 'call <curl_infof>', 'mov <MEM>,0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'mov eax,0x1b', '<JUMP> <LOC>', 'nop <MEM>']
filter_and_generate_data_items: 100%|██████████| 947/947 [00:00<00:00, 1877.81it/s]
2024-04-26 03:40:46.995 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 947 ---> 3
2024-04-26 03:40:46.998 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['Curl_pp_readresp']
2024-04-26 03:40:46.998 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['Curl_pp_readresp']
2024-04-26 03:40:46.999 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  7.28it/s]
2024-04-26 03:40:47.139 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:40:47.139 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:40:47.139 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:40:47.140 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:40:47.140 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:40:47.140 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:40:47.140 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 233 CVE-2024-2004
filter_and_generate_data_items:  32%|███▏      | 629/1976 [00:00<00:00, 2096.65it/s]2024-04-26 03:40:55.273 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: protocol2num, 2, 0
2024-04-26 03:40:55.274 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static CURLcode protocol2num(const char *str, curl_prot_t *val)', '{', 'if(!str)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'if(curl_strequal(str, "STR")) {', '*val = ~(curl_prot_t) 0;', 'return CURLE_OK;', '}', '*val = 0;', 'do {', 'const char *token = str;', 'size_t tlen;', "str = strchr(str, ',');", 'tlen = str? (size_t) (str - token): strlen(token);', 'if(tlen) {', 'const struct Curl_handler *h = Curl_getn_scheme_handler(token, tlen);', 'if(!h)', 'return CURLE_UNSUPPORTED_PROTOCOL;', '*val |= h->protocol;', '}', '} while(str && str++);', 'if(!*val)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'return CURLE_OK;', '}']
2024-04-26 03:40:55.274 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['test rdi,rdi', '<JUMP> <LOC>', 'push r12', 'mov r12,rsi', 'lea rsi,<MEM>', 'push rbp', 'mov rbp,rdi', 'push rbx', 'call <curl_strequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop <MEM>', 'mov rsi,rax', 'sub rsi,rbp', '<JUMP> <LOC>', 'lea rbp,<MEM>', 'mov esi,0x2c', 'mov rdi,rbp', 'call <strchr@plt>', 'mov rbx,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,rbp', 'call <strlen@plt>', 'mov rsi,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rdi,rbp', 'call <curl_getn_scheme_handler>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', 'pop rbx', 'pop rbp', 'pop r12', 'ret', 'mov rdi,rbp', 'call <curl_getn_scheme_handler>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'or <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'or <MEM>,eax', 'nop <MEM>', 'mov edx,<MEM>', 'xor eax,eax', 'test edx,edx', '<JUMP> <LOC>', 'pop rbx', 'mov eax,0x2b', 'pop rbp', 'pop r12', 'ret', 'nop <MEM>', 'mov <MEM>,0xffffffff', 'xor eax,eax', 'pop rbx', 'pop rbp', 'pop r12', 'ret', 'nop', 'mov eax,0x2b', 'ret', 'nop cs:<MEM>']
filter_and_generate_data_items:  89%|████████▉ | 1765/1976 [00:01<00:00, 930.13it/s]2024-04-26 03:40:56.497 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: Curl_vsetopt, 3, 1
2024-04-26 03:40:56.499 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['CURLcode Curl_vsetopt(struct Curl_easy *data, CURLoption option, va_list param)', '{', 'char *argptr;', 'CURLcode result = CURLE_OK;', 'long arg;', 'unsigned long uarg;', 'curl_off_t bigsize;', 'switch(option) {', 'case CURLOPT_DNS_CACHE_TIMEOUT:', 'arg = va_arg(param, long);', 'if(arg < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'else if(arg > INT_MAX)', 'arg = INT_MAX;', 'data->set.dns_cache_timeout = (int)arg;', 'break;', 'case CURLOPT_CA_CACHE_TIMEOUT:', 'arg = va_arg(param, long);', 'if(arg < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'else if(arg > INT_MAX)', 'arg = INT_MAX;', 'data->set.general_ssl.ca_cache_timeout = (int)arg;', 'break;', 'case CURLOPT_DNS_USE_GLOBAL_CACHE:', 'break;', 'case CURLOPT_SSL_CIPHER_LIST:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSL_CIPHER_LIST:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER_LIST_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_TLS13_CIPHERS:', 'if(Curl_ssl_supports(data, SSLSUPP_TLS13_CIPHERSUITES)) {', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST],', 'va_arg(param, char *));', '}', 'else', 'return CURLE_NOT_BUILT_IN;', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_TLS13_CIPHERS:', 'if(Curl_ssl_supports(data, SSLSUPP_TLS13_CIPHERSUITES)) {', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CIPHER13_LIST_PROXY],', 'va_arg(param, char *));', '}', 'else', 'return CURLE_NOT_BUILT_IN;', 'break;', '#endif', 'case CURLOPT_RANDOM_FILE:', 'break;', 'case CURLOPT_EGDSOCKET:', 'break;', 'case CURLOPT_MAXCONNECTS:', 'uarg = va_arg(param, unsigned long);', 'if(uarg > UINT_MAX)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.maxconnects = (unsigned int)uarg;', 'break;', 'case CURLOPT_FORBID_REUSE:', 'data->set.reuse_forbid = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_FRESH_CONNECT:', 'data->set.reuse_fresh = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_VERBOSE:', 'data->set.verbose = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_HEADER:', 'data->set.include_header = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_NOPROGRESS:', 'data->set.hide_progress = (0 != va_arg(param, long));', 'if(data->set.hide_progress)', 'data->progress.flags |= PGRS_HIDE;', 'else', 'data->progress.flags &= ~PGRS_HIDE;', 'break;', 'case CURLOPT_NOBODY:', 'data->set.opt_no_body = (0 != va_arg(param, long));', '#ifndef CURL_DISABLE_HTTP', 'if(data->set.opt_no_body)', 'data->set.method = HTTPREQ_HEAD;', 'else if(data->set.method == HTTPREQ_HEAD)', 'data->set.method = HTTPREQ_GET;', '#endif', 'break;', 'case CURLOPT_FAILONERROR:', 'data->set.http_fail_on_error = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_KEEP_SENDING_ON_ERROR:', 'data->set.http_keep_sending_on_error = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_UPLOAD:', 'case CURLOPT_PUT:', 'arg = va_arg(param, long);', 'if(arg) {', 'data->set.method = HTTPREQ_PUT;', '}', 'else', 'data->set.method = HTTPREQ_GET;', 'break;', 'case CURLOPT_REQUEST_TARGET:', 'result = Curl_setstropt(&data->set.str[STRING_TARGET],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_FILETIME:', 'data->set.get_filetime = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_SERVER_RESPONSE_TIMEOUT:', 'arg = va_arg(param, long);', 'if((arg >= 0) && (arg <= (INT_MAX/1000)))', 'data->set.server_response_timeout = (unsigned int)arg * 1000;', 'else', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', 'case CURLOPT_SERVER_RESPONSE_TIMEOUT_MS:', 'arg = va_arg(param, long);', 'if((arg >= 0) && (arg <= INT_MAX))', 'data->set.server_response_timeout = (unsigned int)arg;', 'else', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', '#ifndef CURL_DISABLE_TFTP', 'case CURLOPT_TFTP_NO_OPTIONS:', 'data->set.tftp_no_options = va_arg(param, long) != 0;', 'break;', 'case CURLOPT_TFTP_BLKSIZE:', 'arg = va_arg(param, long);', 'if(arg > TFTP_BLKSIZE_MAX || arg < TFTP_BLKSIZE_MIN)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.tftp_blksize = arg;', 'break;', '#endif', '#ifndef CURL_DISABLE_NETRC', 'case CURLOPT_NETRC:', 'arg = va_arg(param, long);', 'if((arg < CURL_NETRC_IGNORED) || (arg >= CURL_NETRC_LAST))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.use_netrc = (unsigned char)arg;', 'break;', 'case CURLOPT_NETRC_FILE:', 'result = Curl_setstropt(&data->set.str[STRING_NETRC_FILE],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_TRANSFERTEXT:', 'data->set.prefer_ascii = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_TIMECONDITION:', 'arg = va_arg(param, long);', 'if((arg < CURL_TIMECOND_NONE) || (arg >= CURL_TIMECOND_LAST))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.timecondition = (unsigned char)(curl_TimeCond)arg;', 'break;', 'case CURLOPT_TIMEVALUE:', 'data->set.timevalue = (time_t)va_arg(param, long);', 'break;', 'case CURLOPT_TIMEVALUE_LARGE:', 'data->set.timevalue = (time_t)va_arg(param, curl_off_t);', 'break;', 'case CURLOPT_SSLVERSION:', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSLVERSION:', '#endif', '#ifdef USE_SSL', '{', 'long version, version_max;', 'struct ssl_primary_config *primary = &data->set.ssl.primary;', '#ifndef CURL_DISABLE_PROXY', 'if(option != CURLOPT_SSLVERSION)', 'primary = &data->set.proxy_ssl.primary;', '#endif', 'arg = va_arg(param, long);', 'version = C_SSLVERSION_VALUE(arg);', 'version_max = C_SSLVERSION_MAX_VALUE(arg);', 'if(version < CURL_SSLVERSION_DEFAULT ||', 'version == CURL_SSLVERSION_SSLv2 ||', 'version == CURL_SSLVERSION_SSLv3 ||', 'version >= CURL_SSLVERSION_LAST ||', 'version_max < CURL_SSLVERSION_MAX_NONE ||', 'version_max >= CURL_SSLVERSION_MAX_LAST)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'primary->version = (unsigned char)version;', 'primary->version_max = (unsigned int)version_max;', '}', '#else', 'result = CURLE_NOT_BUILT_IN;', '#endif', 'break;', '#if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_MQTT)', 'case CURLOPT_COPYPOSTFIELDS:', 'argptr = va_arg(param, char *);', 'if(!argptr || data->set.postfieldsize == -1)', 'result = Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], argptr);', 'else {', 'if((data->set.postfieldsize < 0) ||', '((sizeof(curl_off_t) != sizeof(size_t)) &&', '(data->set.postfieldsize > (curl_off_t)((size_t)-1))))', 'result = CURLE_OUT_OF_MEMORY;', 'else {', 'later address compare to detect the COPYPOSTFIELDS mode, and to', 'mark that postfields is used rather than read function or form', 'data.', 'char *p = Curl_memdup0(argptr, (size_t)data->set.postfieldsize);', '(void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);', 'if(!p)', 'result = CURLE_OUT_OF_MEMORY;', 'else', 'data->set.str[STRING_COPYPOSTFIELDS] = p;', '}', '}', 'data->set.postfields = data->set.str[STRING_COPYPOSTFIELDS];', 'data->set.method = HTTPREQ_POST;', 'break;', 'case CURLOPT_POSTFIELDS:', 'data->set.postfields = va_arg(param, void *);', '(void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);', 'data->set.method = HTTPREQ_POST;', 'break;', 'case CURLOPT_POSTFIELDSIZE:', 'bigsize = va_arg(param, long);', 'if(bigsize < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'if(data->set.postfieldsize < bigsize &&', 'data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {', '(void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);', 'data->set.postfields = NULL;', '}', 'data->set.postfieldsize = bigsize;', 'break;', 'case CURLOPT_POSTFIELDSIZE_LARGE:', 'bigsize = va_arg(param, curl_off_t);', 'if(bigsize < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'if(data->set.postfieldsize < bigsize &&', 'data->set.postfields == data->set.str[STRING_COPYPOSTFIELDS]) {', '(void) Curl_setstropt(&data->set.str[STRING_COPYPOSTFIELDS], NULL);', 'data->set.postfields = NULL;', '}', 'data->set.postfieldsize = bigsize;', 'break;', '#endif', '#ifndef CURL_DISABLE_HTTP', 'case CURLOPT_AUTOREFERER:', 'data->set.http_auto_referer = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_ACCEPT_ENCODING:', 'argptr = va_arg(param, char *);', 'if(argptr && !*argptr) {', 'char all[256];', 'Curl_all_content_encodings(all, sizeof(all));', 'result = Curl_setstropt(&data->set.str[STRING_ENCODING], all);', '}', 'else', 'result = Curl_setstropt(&data->set.str[STRING_ENCODING], argptr);', 'break;', 'case CURLOPT_TRANSFER_ENCODING:', 'data->set.http_transfer_encoding = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_FOLLOWLOCATION:', 'data->set.http_follow_location = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_UNRESTRICTED_AUTH:', 'data->set.allow_auth_to_other_hosts = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_MAXREDIRS:', 'arg = va_arg(param, long);', 'if(arg < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.maxredirs = arg;', 'break;', 'case CURLOPT_POSTREDIR:', 'arg = va_arg(param, long);', 'if(arg < CURL_REDIR_GET_ALL)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.keep_post = arg & CURL_REDIR_POST_ALL;', 'break;', 'case CURLOPT_POST:', "CURLOPT_POSTFIELDS isn't used and the POST data is read off the", 'if(va_arg(param, long)) {', 'data->set.method = HTTPREQ_POST;', '}', 'else', 'data->set.method = HTTPREQ_GET;', 'break;', '#ifndef CURL_DISABLE_FORM_API', 'case CURLOPT_HTTPPOST:', 'data->set.httppost = va_arg(param, struct curl_httppost *);', 'data->set.method = HTTPREQ_POST_FORM;', 'Curl_mime_cleanpart(data->state.formp);', 'Curl_safefree(data->state.formp);', 'data->state.mimepost = NULL;', 'break;', '#endif', '#if !defined(CURL_DISABLE_AWS)', 'case CURLOPT_AWS_SIGV4:', 'result = Curl_setstropt(&data->set.str[STRING_AWS_SIGV4],', 'va_arg(param, char *));', 'if(data->set.str[STRING_AWS_SIGV4])', 'data->set.httpauth = CURLAUTH_AWS_SIGV4;', 'break;', '#endif', 'case CURLOPT_REFERER:', 'if(data->state.referer_alloc) {', 'Curl_safefree(data->state.referer);', 'data->state.referer_alloc = FALSE;', '}', 'result = Curl_setstropt(&data->set.str[STRING_SET_REFERER],', 'va_arg(param, char *));', 'data->state.referer = data->set.str[STRING_SET_REFERER];', 'break;', 'case CURLOPT_USERAGENT:', 'result = Curl_setstropt(&data->set.str[STRING_USERAGENT],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXYHEADER:', 'data->set.proxyheaders = va_arg(param, struct curl_slist *);', 'break;', '#endif', 'case CURLOPT_HEADEROPT:', 'arg = va_arg(param, long);', 'data->set.sep_headers = !!(arg & CURLHEADER_SEPARATE);', 'break;', '#if !defined(CURL_DISABLE_COOKIES)', 'case CURLOPT_COOKIE:', 'result = Curl_setstropt(&data->set.str[STRING_COOKIE],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_COOKIEFILE:', 'argptr = (char *)va_arg(param, void *);', 'if(argptr) {', 'struct curl_slist *cl;', 'if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'cl = curl_slist_append(data->state.cookielist, argptr);', 'if(!cl) {', 'curl_slist_free_all(data->state.cookielist);', 'data->state.cookielist = NULL;', 'return CURLE_OUT_OF_MEMORY;', '}', '}', 'else {', 'curl_slist_free_all(data->state.cookielist);', 'data->state.cookielist = NULL;', 'if(!data->share || !data->share->cookies) {', 'Curl_cookie_clearall(data->cookies);', 'Curl_cookie_cleanup(data->cookies);', '}', 'data->cookies = NULL;', '}', 'break;', 'case CURLOPT_COOKIEJAR:', '{', 'struct CookieInfo *newcookies;', 'result = Curl_setstropt(&data->set.str[STRING_COOKIEJAR],', 'va_arg(param, char *));', 'newcookies = Curl_cookie_init(data, NULL, data->cookies,', 'data->set.cookiesession);', 'if(!newcookies)', 'result = CURLE_OUT_OF_MEMORY;', 'data->cookies = newcookies;', '}', 'break;', 'case CURLOPT_COOKIESESSION:', 'data->set.cookiesession = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_COOKIELIST:', 'argptr = va_arg(param, char *);', 'if(!argptr)', 'break;', 'if(strcasecompare(argptr, "STR")) {', 'Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);', 'Curl_cookie_clearall(data->cookies);', 'Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);', '}', 'else if(strcasecompare(argptr, "STR")) {', 'Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);', 'Curl_cookie_clearsess(data->cookies);', 'Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);', '}', 'else if(strcasecompare(argptr, "STR")) {', 'Curl_flush_cookies(data, FALSE);', '}', 'else if(strcasecompare(argptr, "STR")) {', 'Curl_cookie_loadfiles(data);', 'break;', '}', 'else {', 'if(!data->cookies)', 'data->cookies = Curl_cookie_init(data, NULL, NULL, TRUE);', 'if(strlen(argptr) > CURL_MAX_INPUT_LENGTH)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'argptr = strdup(argptr);', 'if(!argptr || !data->cookies) {', 'result = CURLE_OUT_OF_MEMORY;', 'free(argptr);', '}', 'else {', 'Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);', 'if(checkprefix("STR", argptr))', 'Curl_cookie_add(data, data->cookies, TRUE, FALSE, argptr + 11, NULL,', 'NULL, TRUE);', 'else', 'Curl_cookie_add(data, data->cookies, FALSE, FALSE, argptr, NULL,', 'NULL, TRUE);', 'Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);', 'free(argptr);', '}', '}', 'break;', 'case CURLOPT_HTTPGET:', 'if(va_arg(param, long)) {', 'data->set.method = HTTPREQ_GET;', '}', 'break;', 'case CURLOPT_HTTP_VERSION:', 'arg = va_arg(param, long);', 'switch(arg) {', 'case CURL_HTTP_VERSION_NONE:', '#ifdef USE_HTTP2', 'arg = CURL_HTTP_VERSION_2TLS;', '#endif', 'break;', 'case CURL_HTTP_VERSION_1_0:', 'case CURL_HTTP_VERSION_1_1:', 'break;', '#ifdef USE_HTTP2', 'case CURL_HTTP_VERSION_2_0:', 'case CURL_HTTP_VERSION_2TLS:', 'case CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE:', 'break;', '#endif', '#ifdef ENABLE_QUIC', 'case CURL_HTTP_VERSION_3:', 'case CURL_HTTP_VERSION_3ONLY:', 'break;', '#endif', 'default:', 'if(arg < CURL_HTTP_VERSION_NONE)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'return CURLE_UNSUPPORTED_PROTOCOL;', '}', 'data->set.httpwant = (unsigned char)arg;', 'break;', 'case CURLOPT_EXPECT_100_TIMEOUT_MS:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.expect_100_timeout = arg;', 'break;', 'case CURLOPT_HTTP09_ALLOWED:', 'arg = va_arg(param, unsigned long);', 'if(arg > 1L)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '#ifdef USE_HYPER', 'if(arg)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '#else', 'data->set.http09_allowed = !!arg;', '#endif', 'break;', 'case CURLOPT_HTTP200ALIASES:', 'data->set.http200aliases = va_arg(param, struct curl_slist *);', 'break;', '#if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_SMTP) ||       \\', '!defined(CURL_DISABLE_IMAP)', '# if !defined(CURL_DISABLE_HTTP) || !defined(CURL_DISABLE_MIME)', 'case CURLOPT_HTTPHEADER:', 'data->set.headers = va_arg(param, struct curl_slist *);', 'break;', '# endif', '# ifndef CURL_DISABLE_MIME', 'case CURLOPT_MIMEPOST:', 'result = Curl_mime_set_subparts(&data->set.mimepost,', 'va_arg(param, curl_mime *), FALSE);', 'if(!result) {', 'data->set.method = HTTPREQ_POST_MIME;', '#ifndef CURL_DISABLE_FORM_API', 'Curl_mime_cleanpart(data->state.formp);', 'Curl_safefree(data->state.formp);', 'data->state.mimepost = NULL;', '#endif', '}', 'break;', 'case CURLOPT_MIME_OPTIONS:', 'arg = va_arg(param, long);', 'data->set.mime_formescape = !!(arg & CURLMIMEOPT_FORMESCAPE);', 'break;', '# endif', '#endif', 'case CURLOPT_HTTPAUTH:', '{', 'int bitcheck;', 'bool authbits;', 'unsigned long auth = va_arg(param, unsigned long);', 'if(auth == CURLAUTH_NONE) {', 'data->set.httpauth = auth;', 'break;', '}', 'data->state.authhost.iestyle = !!(auth & CURLAUTH_DIGEST_IE);', 'if(auth & CURLAUTH_DIGEST_IE) {', '}', '#ifndef USE_NTLM', '#elif !defined(NTLM_WB_ENABLED)', '#endif', '#ifndef USE_SPNEGO', 'auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without', '#endif', 'bitcheck = 0;', 'authbits = FALSE;', 'while(bitcheck < 31) {', 'if(auth & (1UL << bitcheck++)) {', 'authbits = TRUE;', 'break;', '}', '}', 'if(!authbits)', 'data->set.httpauth = auth;', '}', 'break;', 'case CURLOPT_CUSTOMREQUEST:', 'result = Curl_setstropt(&data->set.str[STRING_CUSTOMREQUEST],', 'va_arg(param, char *));', 'data->set.method = HTTPREQ_CUSTOM;', 'here, we continue as if we were using the already set type', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_HTTPPROXYTUNNEL:', 'data->set.tunnel_thru_httpproxy = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_PROXYPORT:', 'arg = va_arg(param, long);', 'if((arg < 0) || (arg > 65535))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.proxyport = (unsigned short)arg;', 'break;', 'case CURLOPT_PROXYAUTH:', '{', 'int bitcheck;', 'bool authbits;', 'unsigned long auth = va_arg(param, unsigned long);', 'if(auth == CURLAUTH_NONE) {', 'data->set.proxyauth = auth;', 'break;', '}', 'data->state.authproxy.iestyle = !!(auth & CURLAUTH_DIGEST_IE);', 'if(auth & CURLAUTH_DIGEST_IE) {', '}', '#ifndef USE_NTLM', '#elif !defined(NTLM_WB_ENABLED)', '#endif', '#ifndef USE_SPNEGO', 'auth &= ~CURLAUTH_NEGOTIATE; /* no Negotiate (SPNEGO) auth without', '#endif', 'bitcheck = 0;', 'authbits = FALSE;', 'while(bitcheck < 31) {', 'if(auth & (1UL << bitcheck++)) {', 'authbits = TRUE;', 'break;', '}', '}', 'if(!authbits)', 'data->set.proxyauth = auth;', '}', 'break;', 'case CURLOPT_PROXY:', 'result = Curl_setstropt(&data->set.str[STRING_PROXY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PRE_PROXY:', 'result = Curl_setstropt(&data->set.str[STRING_PRE_PROXY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PROXYTYPE:', 'arg = va_arg(param, long);', 'if((arg < CURLPROXY_HTTP) || (arg > CURLPROXY_SOCKS5_HOSTNAME))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.proxytype = (unsigned char)(curl_proxytype)arg;', 'break;', 'case CURLOPT_PROXY_TRANSFER_MODE:', 'switch(va_arg(param, long)) {', 'case 0:', 'data->set.proxy_transfer_mode = FALSE;', 'break;', 'case 1:', 'data->set.proxy_transfer_mode = TRUE;', 'break;', 'default:', 'result = CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', '}', 'break;', 'case CURLOPT_SOCKS5_AUTH:', 'data->set.socks5auth = (unsigned char)va_arg(param, unsigned long);', 'if(data->set.socks5auth & ~(CURLAUTH_BASIC | CURLAUTH_GSSAPI))', 'result = CURLE_NOT_BUILT_IN;', 'break;', '#if defined(HAVE_GSSAPI) || defined(USE_WINDOWS_SSPI)', 'case CURLOPT_SOCKS5_GSSAPI_NEC:', 'data->set.socks5_gssapi_nec = (0 != va_arg(param, long));', 'break;', '#endif', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_SOCKS5_GSSAPI_SERVICE:', 'case CURLOPT_PROXY_SERVICE_NAME:', 'result = Curl_setstropt(&data->set.str[STRING_PROXY_SERVICE_NAME],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_SERVICE_NAME:', 'result = Curl_setstropt(&data->set.str[STRING_SERVICE_NAME],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_HEADERDATA:', 'data->set.writeheader = (void *)va_arg(param, void *);', 'break;', 'case CURLOPT_ERRORBUFFER:', 'data->set.errorbuffer = va_arg(param, char *);', 'break;', 'case CURLOPT_WRITEDATA:', 'data->set.out = va_arg(param, void *);', 'break;', '#ifdef CURL_LIST_ONLY_PROTOCOL', 'case CURLOPT_DIRLISTONLY:', 'data->set.list_only = (0 != va_arg(param, long));', 'break;', '#endif', 'case CURLOPT_APPEND:', 'data->set.remote_append = (0 != va_arg(param, long));', 'break;', '#ifndef CURL_DISABLE_FTP', 'case CURLOPT_FTP_FILEMETHOD:', 'arg = va_arg(param, long);', 'if((arg < CURLFTPMETHOD_DEFAULT) || (arg >= CURLFTPMETHOD_LAST))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.ftp_filemethod = (unsigned char)arg;', 'break;', 'case CURLOPT_FTPPORT:', 'result = Curl_setstropt(&data->set.str[STRING_FTPPORT],', 'va_arg(param, char *));', 'data->set.ftp_use_port = !!(data->set.str[STRING_FTPPORT]);', 'break;', 'case CURLOPT_FTP_USE_EPRT:', 'data->set.ftp_use_eprt = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_FTP_USE_EPSV:', 'data->set.ftp_use_epsv = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_FTP_USE_PRET:', 'data->set.ftp_use_pret = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_FTP_SSL_CCC:', 'arg = va_arg(param, long);', 'if((arg < CURLFTPSSL_CCC_NONE) || (arg >= CURLFTPSSL_CCC_LAST))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.ftp_ccc = (unsigned char)arg;', 'break;', 'case CURLOPT_FTP_SKIP_PASV_IP:', 'data->set.ftp_skip_ip = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_FTP_ACCOUNT:', 'result = Curl_setstropt(&data->set.str[STRING_FTP_ACCOUNT],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_FTP_ALTERNATIVE_TO_USER:', 'result = Curl_setstropt(&data->set.str[STRING_FTP_ALTERNATIVE_TO_USER],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_FTPSSLAUTH:', 'arg = va_arg(param, long);', 'if((arg < CURLFTPAUTH_DEFAULT) || (arg >= CURLFTPAUTH_LAST))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.ftpsslauth = (unsigned char)(curl_ftpauth)arg;', 'break;', 'case CURLOPT_KRBLEVEL:', 'result = Curl_setstropt(&data->set.str[STRING_KRB_LEVEL],', 'va_arg(param, char *));', 'data->set.krb = !!(data->set.str[STRING_KRB_LEVEL]);', 'break;', '#endif', '#if !defined(CURL_DISABLE_FTP) || defined(USE_SSH)', 'case CURLOPT_FTP_CREATE_MISSING_DIRS:', 'arg = va_arg(param, long);', 'if((arg < CURLFTP_CREATE_DIR_NONE) ||', '(arg > CURLFTP_CREATE_DIR_RETRY))', 'result = CURLE_BAD_FUNCTION_ARGUMENT;', 'else', 'data->set.ftp_create_missing_dirs = (unsigned char)arg;', 'break;', 'case CURLOPT_POSTQUOTE:', 'data->set.postquote = va_arg(param, struct curl_slist *);', 'break;', 'case CURLOPT_PREQUOTE:', 'data->set.prequote = va_arg(param, struct curl_slist *);', 'break;', 'case CURLOPT_QUOTE:', 'data->set.quote = va_arg(param, struct curl_slist *);', 'break;', '#endif', 'case CURLOPT_READDATA:', 'data->set.in_set = va_arg(param, void *);', 'break;', 'case CURLOPT_INFILESIZE:', 'arg = va_arg(param, long);', 'if(arg < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.filesize = arg;', 'break;', 'case CURLOPT_INFILESIZE_LARGE:', 'bigsize = va_arg(param, curl_off_t);', 'if(bigsize < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.filesize = bigsize;', 'break;', 'case CURLOPT_LOW_SPEED_LIMIT:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.low_speed_limit = arg;', 'break;', 'case CURLOPT_MAX_SEND_SPEED_LARGE:', 'bigsize = va_arg(param, curl_off_t);', 'if(bigsize < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.max_send_speed = bigsize;', 'break;', 'case CURLOPT_MAX_RECV_SPEED_LARGE:', 'bigsize = va_arg(param, curl_off_t);', 'if(bigsize < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.max_recv_speed = bigsize;', 'break;', 'case CURLOPT_LOW_SPEED_TIME:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.low_speed_time = arg;', 'break;', 'case CURLOPT_CURLU:', 'data->set.uh = va_arg(param, CURLU *);', 'break;', 'case CURLOPT_URL:', 'if(data->state.url_alloc) {', 'Curl_safefree(data->state.url);', 'data->state.url_alloc = FALSE;', '}', 'result = Curl_setstropt(&data->set.str[STRING_SET_URL],', 'va_arg(param, char *));', 'data->state.url = data->set.str[STRING_SET_URL];', 'break;', 'case CURLOPT_PORT:', 'arg = va_arg(param, long);', 'if((arg < 0) || (arg > 65535))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.use_port = (unsigned short)arg;', 'break;', 'case CURLOPT_TIMEOUT:', 'arg = va_arg(param, long);', 'if((arg >= 0) && (arg <= (INT_MAX/1000)))', 'data->set.timeout = (unsigned int)arg * 1000;', 'else', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', 'case CURLOPT_TIMEOUT_MS:', 'uarg = va_arg(param, unsigned long);', 'if(uarg > UINT_MAX)', 'uarg = UINT_MAX;', 'data->set.timeout = (unsigned int)uarg;', 'break;', 'case CURLOPT_CONNECTTIMEOUT:', 'arg = va_arg(param, long);', 'if((arg >= 0) && (arg <= (INT_MAX/1000)))', 'data->set.connecttimeout = (unsigned int)arg * 1000;', 'else', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', 'case CURLOPT_CONNECTTIMEOUT_MS:', 'uarg = va_arg(param, unsigned long);', 'if(uarg > UINT_MAX)', 'uarg = UINT_MAX;', 'data->set.connecttimeout = (unsigned int)uarg;', 'break;', '#ifndef CURL_DISABLE_FTP', 'case CURLOPT_ACCEPTTIMEOUT_MS:', 'uarg = va_arg(param, unsigned long);', 'if(uarg > UINT_MAX)', 'uarg = UINT_MAX;', 'data->set.accepttimeout = (unsigned int)uarg;', 'break;', '#endif', 'case CURLOPT_USERPWD:', 'result = setstropt_userpwd(va_arg(param, char *),', '&data->set.str[STRING_USERNAME],', '&data->set.str[STRING_PASSWORD]);', 'break;', 'case CURLOPT_USERNAME:', 'result = Curl_setstropt(&data->set.str[STRING_USERNAME],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PASSWORD:', 'result = Curl_setstropt(&data->set.str[STRING_PASSWORD],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_LOGIN_OPTIONS:', 'result = Curl_setstropt(&data->set.str[STRING_OPTIONS],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_XOAUTH2_BEARER:', 'result = Curl_setstropt(&data->set.str[STRING_BEARER],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_RESOLVE:', 'data->set.resolve = va_arg(param, struct curl_slist *);', 'data->state.resolve = data->set.resolve;', 'break;', 'case CURLOPT_PROGRESSFUNCTION:', 'data->set.fprogress = va_arg(param, curl_progress_callback);', 'if(data->set.fprogress)', 'else', 'break;', 'case CURLOPT_XFERINFOFUNCTION:', 'data->set.fxferinfo = va_arg(param, curl_xferinfo_callback);', 'if(data->set.fxferinfo)', 'else', 'break;', 'case CURLOPT_PROGRESSDATA:', 'data->set.progress_client = va_arg(param, void *);', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXYUSERPWD:', 'result = setstropt_userpwd(va_arg(param, char *),', '&data->set.str[STRING_PROXYUSERNAME],', '&data->set.str[STRING_PROXYPASSWORD]);', 'break;', 'case CURLOPT_PROXYUSERNAME:', 'result = Curl_setstropt(&data->set.str[STRING_PROXYUSERNAME],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PROXYPASSWORD:', 'result = Curl_setstropt(&data->set.str[STRING_PROXYPASSWORD],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_NOPROXY:', 'result = Curl_setstropt(&data->set.str[STRING_NOPROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_RANGE:', 'result = Curl_setstropt(&data->set.str[STRING_SET_RANGE],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_RESUME_FROM:', 'arg = va_arg(param, long);', 'if(arg < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.set_resume_from = arg;', 'break;', 'case CURLOPT_RESUME_FROM_LARGE:', 'bigsize = va_arg(param, curl_off_t);', 'if(bigsize < -1)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.set_resume_from = bigsize;', 'break;', 'case CURLOPT_DEBUGFUNCTION:', 'data->set.fdebug = va_arg(param, curl_debug_callback);', 'break;', 'case CURLOPT_DEBUGDATA:', 'data->set.debugdata = va_arg(param, void *);', 'break;', 'case CURLOPT_STDERR:', 'data->set.err = va_arg(param, FILE *);', 'if(!data->set.err)', 'data->set.err = stderr;', 'break;', 'case CURLOPT_HEADERFUNCTION:', 'data->set.fwrite_header = va_arg(param, curl_write_callback);', 'break;', 'case CURLOPT_WRITEFUNCTION:', 'data->set.fwrite_func = va_arg(param, curl_write_callback);', 'if(!data->set.fwrite_func)', 'data->set.fwrite_func = (curl_write_callback)fwrite;', 'break;', 'case CURLOPT_READFUNCTION:', 'data->set.fread_func_set = va_arg(param, curl_read_callback);', 'if(!data->set.fread_func_set) {', 'data->set.is_fread_set = 0;', 'data->set.fread_func_set = (curl_read_callback)fread;', '}', 'else', 'data->set.is_fread_set = 1;', 'break;', 'case CURLOPT_SEEKFUNCTION:', 'data->set.seek_func = va_arg(param, curl_seek_callback);', 'break;', 'case CURLOPT_SEEKDATA:', 'data->set.seek_client = va_arg(param, void *);', 'break;', 'case CURLOPT_IOCTLFUNCTION:', 'data->set.ioctl_func = va_arg(param, curl_ioctl_callback);', 'break;', 'case CURLOPT_IOCTLDATA:', 'data->set.ioctl_client = va_arg(param, void *);', 'break;', 'case CURLOPT_SSLCERT:', 'result = Curl_setstropt(&data->set.str[STRING_CERT],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SSLCERT_BLOB:', 'result = Curl_setblobopt(&data->set.blobs[BLOB_CERT],', 'va_arg(param, struct curl_blob *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSLCERT:', 'result = Curl_setstropt(&data->set.str[STRING_CERT_PROXY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PROXY_SSLCERT_BLOB:', 'result = Curl_setblobopt(&data->set.blobs[BLOB_CERT_PROXY],', 'va_arg(param, struct curl_blob *));', 'break;', '#endif', 'case CURLOPT_SSLCERTTYPE:', 'result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSLCERTTYPE:', 'result = Curl_setstropt(&data->set.str[STRING_CERT_TYPE_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_SSLKEY:', 'result = Curl_setstropt(&data->set.str[STRING_KEY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SSLKEY_BLOB:', 'result = Curl_setblobopt(&data->set.blobs[BLOB_KEY],', 'va_arg(param, struct curl_blob *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSLKEY:', 'result = Curl_setstropt(&data->set.str[STRING_KEY_PROXY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PROXY_SSLKEY_BLOB:', 'result = Curl_setblobopt(&data->set.blobs[BLOB_KEY_PROXY],', 'va_arg(param, struct curl_blob *));', 'break;', '#endif', 'case CURLOPT_SSLKEYTYPE:', 'result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSLKEYTYPE:', 'result = Curl_setstropt(&data->set.str[STRING_KEY_TYPE_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_KEYPASSWD:', 'result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_KEYPASSWD:', 'result = Curl_setstropt(&data->set.str[STRING_KEY_PASSWD_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_SSLENGINE:', 'argptr = va_arg(param, char *);', 'if(argptr && argptr[0]) {', 'result = Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], argptr);', 'if(!result) {', 'result = Curl_ssl_set_engine(data, argptr);', '}', '}', 'break;', 'case CURLOPT_SSLENGINE_DEFAULT:', 'Curl_setstropt(&data->set.str[STRING_SSL_ENGINE], NULL);', 'result = Curl_ssl_set_engine_default(data);', 'break;', 'case CURLOPT_CRLF:', 'data->set.crlf = (0 != va_arg(param, long));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_HAPROXYPROTOCOL:', 'data->set.haproxyprotocol = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_HAPROXY_CLIENT_IP:', 'result = Curl_setstropt(&data->set.str[STRING_HAPROXY_CLIENT_IP],', 'va_arg(param, char *));', 'data->set.haproxyprotocol = TRUE;', 'break;', '#endif', 'case CURLOPT_INTERFACE:', 'result = Curl_setstropt(&data->set.str[STRING_DEVICE],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_BINDLOCAL', 'case CURLOPT_LOCALPORT:', 'arg = va_arg(param, long);', 'if((arg < 0) || (arg > 65535))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.localport = curlx_sltous(arg);', 'break;', 'case CURLOPT_LOCALPORTRANGE:', 'arg = va_arg(param, long);', 'if((arg < 0) || (arg > 65535))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.localportrange = curlx_sltous(arg);', 'break;', '#endif', 'case CURLOPT_GSSAPI_DELEGATION:', 'uarg = va_arg(param, unsigned long);', 'data->set.gssapi_delegation = (unsigned char)uarg&', '(CURLGSSAPI_DELEGATION_POLICY_FLAG|CURLGSSAPI_DELEGATION_FLAG);', 'break;', 'case CURLOPT_SSL_VERIFYPEER:', 'data->set.ssl.primary.verifypeer = (0 != va_arg(param, long));', 'Curl_ssl_conn_config_update(data, FALSE);', 'break;', '#ifndef CURL_DISABLE_DOH', 'case CURLOPT_DOH_SSL_VERIFYPEER:', 'data->set.doh_verifypeer = (0 != va_arg(param, long));', 'break;', '#endif', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSL_VERIFYPEER:', 'data->set.proxy_ssl.primary.verifypeer =', '(0 != va_arg(param, long))?TRUE:FALSE;', 'Curl_ssl_conn_config_update(data, TRUE);', 'break;', '#endif', 'case CURLOPT_SSL_VERIFYHOST:', 'arg = va_arg(param, long);', "this argument took a boolean when it wasn't and misused it.", 'data->set.ssl.primary.verifyhost = !!(arg & 3);', 'Curl_ssl_conn_config_update(data, FALSE);', 'break;', '#ifndef CURL_DISABLE_DOH', 'case CURLOPT_DOH_SSL_VERIFYHOST:', 'arg = va_arg(param, long);', 'data->set.doh_verifyhost = !!(arg & 3);', 'break;', '#endif', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSL_VERIFYHOST:', 'arg = va_arg(param, long);', 'data->set.proxy_ssl.primary.verifyhost = (bool)((arg & 3)?TRUE:FALSE);', 'Curl_ssl_conn_config_update(data, TRUE);', 'break;', '#endif', 'case CURLOPT_SSL_VERIFYSTATUS:', 'if(!Curl_ssl_cert_status_request()) {', 'result = CURLE_NOT_BUILT_IN;', 'break;', '}', 'data->set.ssl.primary.verifystatus = (0 != va_arg(param, long));', 'Curl_ssl_conn_config_update(data, FALSE);', 'break;', '#ifndef CURL_DISABLE_DOH', 'case CURLOPT_DOH_SSL_VERIFYSTATUS:', 'if(!Curl_ssl_cert_status_request()) {', 'result = CURLE_NOT_BUILT_IN;', 'break;', '}', 'data->set.doh_verifystatus = (0 != va_arg(param, long));', 'break;', '#endif', 'case CURLOPT_SSL_CTX_FUNCTION:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_SSL_CTX))', 'data->set.ssl.fsslctx = va_arg(param, curl_ssl_ctx_callback);', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', 'case CURLOPT_SSL_CTX_DATA:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_SSL_CTX))', 'data->set.ssl.fsslctxp = va_arg(param, void *);', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', 'case CURLOPT_SSL_FALSESTART:', 'if(!Curl_ssl_false_start(data)) {', 'result = CURLE_NOT_BUILT_IN;', 'break;', '}', 'data->set.ssl.falsestart = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_CERTINFO:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_CERTINFO))', 'data->set.ssl.certinfo = (0 != va_arg(param, long));', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', 'case CURLOPT_PINNEDPUBLICKEY:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_PINNEDPUBKEY))', 'result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY],', 'va_arg(param, char *));', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_PINNEDPUBLICKEY:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_PINNEDPUBKEY))', 'result = Curl_setstropt(&data->set.str[STRING_SSL_PINNEDPUBLICKEY_PROXY],', 'va_arg(param, char *));', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', '#endif', 'case CURLOPT_CAINFO:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_CAINFO_BLOB:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_CAINFO_BLOB)) {', 'result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO],', 'va_arg(param, struct curl_blob *));', 'break;', '}', 'else', '#endif', 'return CURLE_NOT_BUILT_IN;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_CAINFO:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CAFILE_PROXY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PROXY_CAINFO_BLOB:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_CAINFO_BLOB)) {', 'result = Curl_setblobopt(&data->set.blobs[BLOB_CAINFO_PROXY],', 'va_arg(param, struct curl_blob *));', 'break;', '}', 'else', '#endif', 'return CURLE_NOT_BUILT_IN;', '#endif', 'case CURLOPT_CAPATH:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_CA_PATH))', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH],', 'va_arg(param, char *));', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_CAPATH:', '#ifdef USE_SSL', 'if(Curl_ssl_supports(data, SSLSUPP_CA_PATH))', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CAPATH_PROXY],', 'va_arg(param, char *));', 'else', '#endif', 'result = CURLE_NOT_BUILT_IN;', 'break;', '#endif', 'case CURLOPT_CRLFILE:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_CRLFILE:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_CRLFILE_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_ISSUERCERT:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_ISSUERCERT_BLOB:', 'result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT],', 'va_arg(param, struct curl_blob *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_ISSUERCERT:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_ISSUERCERT_PROXY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_PROXY_ISSUERCERT_BLOB:', 'result = Curl_setblobopt(&data->set.blobs[BLOB_SSL_ISSUERCERT_PROXY],', 'va_arg(param, struct curl_blob *));', 'break;', '#endif', '#ifndef CURL_DISABLE_TELNET', 'case CURLOPT_TELNETOPTIONS:', 'data->set.telnet_options = va_arg(param, struct curl_slist *);', 'break;', '#endif', 'case CURLOPT_BUFFERSIZE:', 'if(data->state.buffer)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'arg = va_arg(param, long);', 'if(arg > READBUFFER_MAX)', 'arg = READBUFFER_MAX;', 'else if(arg < 1)', 'arg = READBUFFER_SIZE;', 'else if(arg < READBUFFER_MIN)', 'arg = READBUFFER_MIN;', 'data->set.buffer_size = (unsigned int)arg;', 'break;', 'case CURLOPT_UPLOAD_BUFFERSIZE:', 'arg = va_arg(param, long);', 'if(arg > UPLOADBUFFER_MAX)', 'arg = UPLOADBUFFER_MAX;', 'else if(arg < UPLOADBUFFER_MIN)', 'arg = UPLOADBUFFER_MIN;', 'data->set.upload_buffer_size = (unsigned int)arg;', 'break;', 'case CURLOPT_NOSIGNAL:', 'data->set.no_signal = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_SHARE:', '{', 'struct Curl_share *set;', 'set = va_arg(param, struct Curl_share *);', 'if(data->share) {', 'Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);', 'if(data->dns.hostcachetype == HCACHE_SHARED) {', 'data->dns.hostcache = NULL;', 'data->dns.hostcachetype = HCACHE_NONE;', '}', '#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)', 'if(data->share->cookies == data->cookies)', 'data->cookies = NULL;', '#endif', '#ifndef CURL_DISABLE_HSTS', 'if(data->share->hsts == data->hsts)', 'data->hsts = NULL;', '#endif', '#ifdef USE_SSL', 'if(data->share->sslsession == data->state.session)', 'data->state.session = NULL;', '#endif', '#ifdef USE_LIBPSL', 'if(data->psl == &data->share->psl)', 'data->psl = data->multi? &data->multi->psl: NULL;', '#endif', 'data->share->dirty--;', 'Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);', 'data->share = NULL;', '}', 'if(GOOD_SHARE_HANDLE(set))', 'data->share = set;', 'if(data->share) {', 'Curl_share_lock(data, CURL_LOCK_DATA_SHARE, CURL_LOCK_ACCESS_SINGLE);', 'data->share->dirty++;', 'if(data->share->specifier & (1<< CURL_LOCK_DATA_DNS)) {', 'data->dns.hostcache = &data->share->hostcache;', 'data->dns.hostcachetype = HCACHE_SHARED;', '}', '#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_COOKIES)', 'if(data->share->cookies) {', 'Curl_cookie_cleanup(data->cookies);', 'data->cookies = data->share->cookies;', '}', '#ifndef CURL_DISABLE_HSTS', 'if(data->share->hsts) {', 'Curl_hsts_cleanup(&data->hsts);', 'data->hsts = data->share->hsts;', '}', '#ifdef USE_SSL', 'if(data->share->sslsession) {', 'data->set.general_ssl.max_ssl_sessions = data->share->max_ssl_sessions;', 'data->state.session = data->share->sslsession;', '}', '#endif', '#ifdef USE_LIBPSL', 'if(data->share->specifier & (1 << CURL_LOCK_DATA_PSL))', 'data->psl = &data->share->psl;', '#endif', 'Curl_share_unlock(data, CURL_LOCK_DATA_SHARE);', '}', '}', 'break;', 'case CURLOPT_PRIVATE:', 'data->set.private_data = va_arg(param, void *);', 'break;', 'case CURLOPT_MAXFILESIZE:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.max_filesize = arg;', 'break;', '#ifdef USE_SSL', 'case CURLOPT_USE_SSL:', 'arg = va_arg(param, long);', 'if((arg < CURLUSESSL_NONE) || (arg >= CURLUSESSL_LAST))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.use_ssl = (unsigned char)arg;', 'break;', 'case CURLOPT_SSL_OPTIONS:', 'arg = va_arg(param, long);', 'data->set.ssl.primary.ssl_options = (unsigned char)(arg & 0xff);', 'data->set.ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);', 'data->set.ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);', 'data->set.ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);', 'data->set.ssl.revoke_best_effort = !!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);', 'data->set.ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);', 'data->set.ssl.auto_client_cert = !!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_SSL_OPTIONS:', 'arg = va_arg(param, long);', 'data->set.proxy_ssl.primary.ssl_options = (unsigned char)(arg & 0xff);', 'data->set.proxy_ssl.enable_beast = !!(arg & CURLSSLOPT_ALLOW_BEAST);', 'data->set.proxy_ssl.no_revoke = !!(arg & CURLSSLOPT_NO_REVOKE);', 'data->set.proxy_ssl.no_partialchain = !!(arg & CURLSSLOPT_NO_PARTIALCHAIN);', 'data->set.proxy_ssl.revoke_best_effort =', '!!(arg & CURLSSLOPT_REVOKE_BEST_EFFORT);', 'data->set.proxy_ssl.native_ca_store = !!(arg & CURLSSLOPT_NATIVE_CA);', 'data->set.proxy_ssl.auto_client_cert =', '!!(arg & CURLSSLOPT_AUTO_CLIENT_CERT);', 'break;', '#endif', 'case CURLOPT_SSL_EC_CURVES:', 'result = Curl_setstropt(&data->set.str[STRING_SSL_EC_CURVES],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_IPRESOLVE:', 'arg = va_arg(param, long);', 'if((arg < CURL_IPRESOLVE_WHATEVER) || (arg > CURL_IPRESOLVE_V6))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.ipver = (unsigned char) arg;', 'break;', 'case CURLOPT_MAXFILESIZE_LARGE:', 'bigsize = va_arg(param, curl_off_t);', 'if(bigsize < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.max_filesize = bigsize;', 'break;', 'case CURLOPT_TCP_NODELAY:', 'data->set.tcp_nodelay = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_IGNORE_CONTENT_LENGTH:', 'data->set.ignorecl = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_CONNECT_ONLY:', 'arg = va_arg(param, long);', 'if(arg > 2)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.connect_only = (unsigned char)arg;', 'break;', 'case CURLOPT_SOCKOPTFUNCTION:', 'data->set.fsockopt = va_arg(param, curl_sockopt_callback);', 'break;', 'case CURLOPT_SOCKOPTDATA:', 'data->set.sockopt_client = va_arg(param, void *);', 'break;', 'case CURLOPT_OPENSOCKETFUNCTION:', 'data->set.fopensocket = va_arg(param, curl_opensocket_callback);', 'break;', 'case CURLOPT_OPENSOCKETDATA:', 'data->set.opensocket_client = va_arg(param, void *);', 'break;', 'case CURLOPT_CLOSESOCKETFUNCTION:', 'data->set.fclosesocket = va_arg(param, curl_closesocket_callback);', 'break;', 'case CURLOPT_RESOLVER_START_FUNCTION:', 'data->set.resolver_start = va_arg(param, curl_resolver_start_callback);', 'break;', 'case CURLOPT_RESOLVER_START_DATA:', 'data->set.resolver_start_client = va_arg(param, void *);', 'break;', 'case CURLOPT_CLOSESOCKETDATA:', 'data->set.closesocket_client = va_arg(param, void *);', 'break;', 'case CURLOPT_SSL_SESSIONID_CACHE:', 'data->set.ssl.primary.sessionid = (0 != va_arg(param, long));', '#ifndef CURL_DISABLE_PROXY', 'data->set.proxy_ssl.primary.sessionid = data->set.ssl.primary.sessionid;', '#endif', 'break;', '#ifdef USE_SSH', 'case CURLOPT_SSH_AUTH_TYPES:', 'data->set.ssh_auth_types = (unsigned int)va_arg(param, long);', 'break;', 'case CURLOPT_SSH_PUBLIC_KEYFILE:', 'result = Curl_setstropt(&data->set.str[STRING_SSH_PUBLIC_KEY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SSH_PRIVATE_KEYFILE:', 'result = Curl_setstropt(&data->set.str[STRING_SSH_PRIVATE_KEY],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:', 'result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_MD5],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SSH_KNOWNHOSTS:', 'result = Curl_setstropt(&data->set.str[STRING_SSH_KNOWNHOSTS],', 'va_arg(param, char *));', 'break;', '#ifdef USE_LIBSSH2', 'case CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256:', 'result = Curl_setstropt(&data->set.str[STRING_SSH_HOST_PUBLIC_KEY_SHA256],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SSH_HOSTKEYFUNCTION:', 'data->set.ssh_hostkeyfunc = va_arg(param, curl_sshhostkeycallback);', 'break;', 'case CURLOPT_SSH_HOSTKEYDATA:', 'data->set.ssh_hostkeyfunc_userp = va_arg(param, void *);', 'break;', '#endif', 'case CURLOPT_SSH_KEYFUNCTION:', 'data->set.ssh_keyfunc = va_arg(param, curl_sshkeycallback);', 'break;', 'case CURLOPT_SSH_KEYDATA:', 'data->set.ssh_keyfunc_userp = va_arg(param, void *);', 'break;', 'case CURLOPT_SSH_COMPRESSION:', 'data->set.ssh_compression = (0 != va_arg(param, long))?TRUE:FALSE;', 'break;', 'case CURLOPT_HTTP_TRANSFER_DECODING:', '#ifndef USE_HYPER', 'data->set.http_te_skip = (0 == va_arg(param, long));', 'break;', '#else', '#endif', 'case CURLOPT_HTTP_CONTENT_DECODING:', 'data->set.http_ce_skip = (0 == va_arg(param, long));', 'break;', '#if !defined(CURL_DISABLE_FTP) || defined(USE_SSH)', 'case CURLOPT_NEW_FILE_PERMS:', 'arg = va_arg(param, long);', 'if((arg < 0) || (arg > 0777))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.new_file_perms = (unsigned int)arg;', 'break;', '#endif', '#ifdef USE_SSH', 'case CURLOPT_NEW_DIRECTORY_PERMS:', 'arg = va_arg(param, long);', 'if((arg < 0) || (arg > 0777))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.new_directory_perms = (unsigned int)arg;', 'break;', '#endif', '#ifdef ENABLE_IPV6', 'case CURLOPT_ADDRESS_SCOPE:', 'uarg = va_arg(param, unsigned long);', '#if SIZEOF_LONG > 4', 'if(uarg > UINT_MAX)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '#endif', 'data->set.scope_id = (unsigned int)uarg;', 'break;', '#endif', 'case CURLOPT_PROTOCOLS:', 'transfer, which thus helps the app which takes URLs from users or other', 'external inputs and want to restrict what protocol(s) to deal', 'data->set.allowed_protocols = (curl_prot_t)va_arg(param, long);', 'break;', 'case CURLOPT_REDIR_PROTOCOLS:', 'as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs', 'data->set.redir_protocols = (curl_prot_t)va_arg(param, long);', 'break;', 'case CURLOPT_PROTOCOLS_STR: {', 'curl_prot_t prot;', 'argptr = va_arg(param, char *);', 'result = protocol2num(argptr, &prot);', 'if(result)', 'return result;', 'data->set.allowed_protocols = prot;', 'break;', '}', 'case CURLOPT_REDIR_PROTOCOLS_STR: {', 'curl_prot_t prot;', 'argptr = va_arg(param, char *);', 'result = protocol2num(argptr, &prot);', 'if(result)', 'return result;', 'data->set.redir_protocols = prot;', 'break;', '}', 'case CURLOPT_DEFAULT_PROTOCOL:', 'result = Curl_setstropt(&data->set.str[STRING_DEFAULT_PROTOCOL],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_SMTP', 'case CURLOPT_MAIL_FROM:', 'result = Curl_setstropt(&data->set.str[STRING_MAIL_FROM],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_MAIL_AUTH:', 'result = Curl_setstropt(&data->set.str[STRING_MAIL_AUTH],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_MAIL_RCPT:', 'data->set.mail_rcpt = va_arg(param, struct curl_slist *);', 'break;', 'case CURLOPT_MAIL_RCPT_ALLOWFAILS:', 'data->set.mail_rcpt_allowfails = (0 != va_arg(param, long));', 'break;', '#endif', 'case CURLOPT_SASL_AUTHZID:', 'result = Curl_setstropt(&data->set.str[STRING_SASL_AUTHZID],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_SASL_IR:', 'data->set.sasl_ir = (0 != va_arg(param, long));', 'break;', '#ifndef CURL_DISABLE_RTSP', 'case CURLOPT_RTSP_REQUEST:', '{', 'long in_rtspreq = va_arg(param, long);', 'Curl_RtspReq rtspreq = RTSPREQ_NONE;', 'switch(in_rtspreq) {', 'case CURL_RTSPREQ_OPTIONS:', 'rtspreq = RTSPREQ_OPTIONS;', 'break;', 'case CURL_RTSPREQ_DESCRIBE:', 'rtspreq = RTSPREQ_DESCRIBE;', 'break;', 'case CURL_RTSPREQ_ANNOUNCE:', 'rtspreq = RTSPREQ_ANNOUNCE;', 'break;', 'case CURL_RTSPREQ_SETUP:', 'rtspreq = RTSPREQ_SETUP;', 'break;', 'case CURL_RTSPREQ_PLAY:', 'rtspreq = RTSPREQ_PLAY;', 'break;', 'case CURL_RTSPREQ_PAUSE:', 'rtspreq = RTSPREQ_PAUSE;', 'break;', 'case CURL_RTSPREQ_TEARDOWN:', 'rtspreq = RTSPREQ_TEARDOWN;', 'break;', 'case CURL_RTSPREQ_GET_PARAMETER:', 'rtspreq = RTSPREQ_GET_PARAMETER;', 'break;', 'case CURL_RTSPREQ_SET_PARAMETER:', 'rtspreq = RTSPREQ_SET_PARAMETER;', 'break;', 'case CURL_RTSPREQ_RECORD:', 'rtspreq = RTSPREQ_RECORD;', 'break;', 'case CURL_RTSPREQ_RECEIVE:', 'rtspreq = RTSPREQ_RECEIVE;', 'break;', 'default:', 'rtspreq = RTSPREQ_NONE;', '}', 'data->set.rtspreq = rtspreq;', 'break;', '}', 'case CURLOPT_RTSP_SESSION_ID:', 'result = Curl_setstropt(&data->set.str[STRING_RTSP_SESSION_ID],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_RTSP_STREAM_URI:', 'result = Curl_setstropt(&data->set.str[STRING_RTSP_STREAM_URI],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_RTSP_TRANSPORT:', 'result = Curl_setstropt(&data->set.str[STRING_RTSP_TRANSPORT],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_RTSP_CLIENT_CSEQ:', 'data->state.rtsp_next_client_CSeq = va_arg(param, long);', 'break;', 'case CURLOPT_RTSP_SERVER_CSEQ:', 'data->state.rtsp_next_server_CSeq = va_arg(param, long);', 'break;', 'case CURLOPT_INTERLEAVEDATA:', 'data->set.rtp_out = va_arg(param, void *);', 'break;', 'case CURLOPT_INTERLEAVEFUNCTION:', 'data->set.fwrite_rtp = va_arg(param, curl_write_callback);', 'break;', '#endif', '#ifndef CURL_DISABLE_FTP', 'case CURLOPT_WILDCARDMATCH:', 'data->set.wildcard_enabled = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_CHUNK_BGN_FUNCTION:', 'data->set.chunk_bgn = va_arg(param, curl_chunk_bgn_callback);', 'break;', 'case CURLOPT_CHUNK_END_FUNCTION:', 'data->set.chunk_end = va_arg(param, curl_chunk_end_callback);', 'break;', 'case CURLOPT_FNMATCH_FUNCTION:', 'data->set.fnmatch = va_arg(param, curl_fnmatch_callback);', 'break;', 'case CURLOPT_CHUNK_DATA:', 'data->set.wildcardptr = va_arg(param, void *);', 'break;', 'case CURLOPT_FNMATCH_DATA:', 'data->set.fnmatch_data = va_arg(param, void *);', 'break;', '#endif', '#ifdef USE_TLS_SRP', 'case CURLOPT_TLSAUTH_USERNAME:', 'result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_TLSAUTH_USERNAME:', 'result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_USERNAME_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_TLSAUTH_PASSWORD:', 'result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD],', 'va_arg(param, char *));', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_TLSAUTH_PASSWORD:', 'result = Curl_setstropt(&data->set.str[STRING_TLSAUTH_PASSWORD_PROXY],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_TLSAUTH_TYPE:', 'argptr = va_arg(param, char *);', 'if(argptr && !strncasecompare(argptr, "STR", strlen("STR")))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', '#ifndef CURL_DISABLE_PROXY', 'case CURLOPT_PROXY_TLSAUTH_TYPE:', 'argptr = va_arg(param, char *);', 'if(argptr || !strncasecompare(argptr, "STR", strlen("STR")))', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'break;', '#endif', '#endif', '#ifdef USE_ARES', 'case CURLOPT_DNS_SERVERS:', 'result = Curl_setstropt(&data->set.str[STRING_DNS_SERVERS],', 'va_arg(param, char *));', 'if(result)', 'return result;', 'result = Curl_set_dns_servers(data, data->set.str[STRING_DNS_SERVERS]);', 'break;', 'case CURLOPT_DNS_INTERFACE:', 'result = Curl_setstropt(&data->set.str[STRING_DNS_INTERFACE],', 'va_arg(param, char *));', 'if(result)', 'return result;', 'result = Curl_set_dns_interface(data, data->set.str[STRING_DNS_INTERFACE]);', 'break;', 'case CURLOPT_DNS_LOCAL_IP4:', 'result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP4],', 'va_arg(param, char *));', 'if(result)', 'return result;', 'result = Curl_set_dns_local_ip4(data, data->set.str[STRING_DNS_LOCAL_IP4]);', 'break;', 'case CURLOPT_DNS_LOCAL_IP6:', 'result = Curl_setstropt(&data->set.str[STRING_DNS_LOCAL_IP6],', 'va_arg(param, char *));', 'if(result)', 'return result;', 'result = Curl_set_dns_local_ip6(data, data->set.str[STRING_DNS_LOCAL_IP6]);', 'break;', '#endif', 'case CURLOPT_TCP_KEEPALIVE:', 'data->set.tcp_keepalive = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_TCP_KEEPIDLE:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'else if(arg > INT_MAX)', 'arg = INT_MAX;', 'data->set.tcp_keepidle = (int)arg;', 'break;', 'case CURLOPT_TCP_KEEPINTVL:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'else if(arg > INT_MAX)', 'arg = INT_MAX;', 'data->set.tcp_keepintvl = (int)arg;', 'break;', 'case CURLOPT_TCP_FASTOPEN:', '#if defined(CONNECT_DATA_IDEMPOTENT) || defined(MSG_FASTOPEN) || \\', 'defined(TCP_FASTOPEN_CONNECT)', 'data->set.tcp_fastopen = (0 != va_arg(param, long))?TRUE:FALSE;', '#else', 'result = CURLE_NOT_BUILT_IN;', '#endif', 'break;', 'case CURLOPT_SSL_ENABLE_NPN:', 'break;', 'case CURLOPT_SSL_ENABLE_ALPN:', 'data->set.ssl_enable_alpn = (0 != va_arg(param, long));', 'break;', '#ifdef USE_UNIX_SOCKETS', 'case CURLOPT_UNIX_SOCKET_PATH:', 'data->set.abstract_unix_socket = FALSE;', 'result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],', 'va_arg(param, char *));', 'break;', 'case CURLOPT_ABSTRACT_UNIX_SOCKET:', 'data->set.abstract_unix_socket = TRUE;', 'result = Curl_setstropt(&data->set.str[STRING_UNIX_SOCKET_PATH],', 'va_arg(param, char *));', 'break;', '#endif', 'case CURLOPT_PATH_AS_IS:', 'data->set.path_as_is = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_PIPEWAIT:', 'data->set.pipewait = (0 != va_arg(param, long));', 'break;', 'case CURLOPT_STREAM_WEIGHT:', '#if defined(USE_HTTP2) || defined(USE_HTTP3)', 'arg = va_arg(param, long);', 'if((arg >= 1) && (arg <= 256))', 'data->set.priority.weight = (int)arg;', 'break;', '#else', 'return CURLE_NOT_BUILT_IN;', '#endif', 'case CURLOPT_STREAM_DEPENDS:', 'case CURLOPT_STREAM_DEPENDS_E:', '{', 'struct Curl_easy *dep = va_arg(param, struct Curl_easy *);', 'if(!dep || GOOD_EASY_HANDLE(dep)) {', 'return Curl_data_priority_add_child(dep, data,', 'option == CURLOPT_STREAM_DEPENDS_E);', '}', 'break;', '}', 'case CURLOPT_CONNECT_TO:', 'data->set.connect_to = va_arg(param, struct curl_slist *);', 'break;', 'case CURLOPT_SUPPRESS_CONNECT_HEADERS:', 'data->set.suppress_connect_headers = (0 != va_arg(param, long))?TRUE:FALSE;', 'break;', 'case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:', 'uarg = va_arg(param, unsigned long);', 'if(uarg > UINT_MAX)', 'uarg = UINT_MAX;', 'data->set.happy_eyeballs_timeout = (unsigned int)uarg;', 'break;', '#ifndef CURL_DISABLE_SHUFFLE_DNS', 'case CURLOPT_DNS_SHUFFLE_ADDRESSES:', 'data->set.dns_shuffle_addresses = (0 != va_arg(param, long));', 'break;', '#endif', 'case CURLOPT_DISALLOW_USERNAME_IN_URL:', 'data->set.disallow_username_in_url = (0 != va_arg(param, long));', 'break;', '#ifndef CURL_DISABLE_DOH', 'case CURLOPT_DOH_URL:', 'result = Curl_setstropt(&data->set.str[STRING_DOH],', 'va_arg(param, char *));', 'data->set.doh = data->set.str[STRING_DOH]?TRUE:FALSE;', 'break;', '#endif', 'case CURLOPT_UPKEEP_INTERVAL_MS:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.upkeep_interval_ms = arg;', 'break;', 'case CURLOPT_MAXAGE_CONN:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.maxage_conn = arg;', 'break;', 'case CURLOPT_MAXLIFETIME_CONN:', 'arg = va_arg(param, long);', 'if(arg < 0)', 'return CURLE_BAD_FUNCTION_ARGUMENT;', 'data->set.maxlifetime_conn = arg;', 'break;', 'case CURLOPT_TRAILERFUNCTION:', '#ifndef CURL_DISABLE_HTTP', 'data->set.trailer_callback = va_arg(param, curl_trailer_callback);', '#endif', 'break;', 'case CURLOPT_TRAILERDATA:', '#ifndef CURL_DISABLE_HTTP', 'data->set.trailer_data = va_arg(param, void *);', '#endif', 'break;', '#ifndef CURL_DISABLE_HSTS', 'case CURLOPT_HSTSREADFUNCTION:', 'data->set.hsts_read = va_arg(param, curl_hstsread_callback);', 'break;', 'case CURLOPT_HSTSREADDATA:', 'data->set.hsts_read_userp = va_arg(param, void *);', 'break;', 'case CURLOPT_HSTSWRITEFUNCTION:', 'data->set.hsts_write = va_arg(param, curl_hstswrite_callback);', 'break;', 'case CURLOPT_HSTSWRITEDATA:', 'data->set.hsts_write_userp = va_arg(param, void *);', 'break;', 'case CURLOPT_HSTS: {', 'struct curl_slist *h;', 'if(!data->hsts) {', 'data->hsts = Curl_hsts_init();', 'if(!data->hsts)', 'return CURLE_OUT_OF_MEMORY;', '}', 'argptr = va_arg(param, char *);', 'if(argptr) {', 'result = Curl_setstropt(&data->set.str[STRING_HSTS], argptr);', 'if(result)', 'return result;', 'read them later, as we might get a shared HSTS handle to load them', 'h = curl_slist_append(data->state.hstslist, argptr);', 'if(!h) {', 'curl_slist_free_all(data->state.hstslist);', 'data->state.hstslist = NULL;', 'return CURLE_OUT_OF_MEMORY;', '}', '}', 'else {', 'curl_slist_free_all(data->state.hstslist);', 'data->state.hstslist = NULL;', 'if(!data->share || !data->share->hsts)', 'Curl_hsts_cleanup(&data->hsts);', '}', 'break;', '}', 'case CURLOPT_HSTS_CTRL:', 'arg = va_arg(param, long);', 'if(arg & CURLHSTS_ENABLE) {', 'if(!data->hsts) {', 'data->hsts = Curl_hsts_init();', 'if(!data->hsts)', 'return CURLE_OUT_OF_MEMORY;', '}', '}', 'else', 'Curl_hsts_cleanup(&data->hsts);', 'break;', '#endif', '#ifndef CURL_DISABLE_ALTSVC', 'case CURLOPT_ALTSVC:', 'if(!data->asi) {', 'data->asi = Curl_altsvc_init();', 'if(!data->asi)', 'return CURLE_OUT_OF_MEMORY;', '}', 'argptr = va_arg(param, char *);', 'result = Curl_setstropt(&data->set.str[STRING_ALTSVC], argptr);', 'if(result)', 'return result;', 'if(argptr)', '(void)Curl_altsvc_load(data->asi, argptr);', 'break;', 'case CURLOPT_ALTSVC_CTRL:', 'if(!data->asi) {', 'data->asi = Curl_altsvc_init();', 'if(!data->asi)', 'return CURLE_OUT_OF_MEMORY;', '}', 'arg = va_arg(param, long);', 'if(!arg) {', 'DEBUGF(infof(data, "STR"));', 'return CURLE_BAD_FUNCTION_ARGUMENT;', '}', 'result = Curl_altsvc_ctrl(data->asi, arg);', 'if(result)', 'return result;', 'break;', '#endif', 'case CURLOPT_PREREQFUNCTION:', 'data->set.fprereq = va_arg(param, curl_prereq_callback);', 'break;', 'case CURLOPT_PREREQDATA:', 'data->set.prereq_userp = va_arg(param, void *);', 'break;', '#ifdef USE_WEBSOCKETS', 'case CURLOPT_WS_OPTIONS: {', 'bool raw;', 'arg = va_arg(param, long);', 'raw = (arg & CURLWS_RAW_MODE);', 'data->set.ws_raw_mode = raw;', 'break;', '}', '#endif', 'case CURLOPT_QUICK_EXIT:', 'data->set.quick_exit = (0 != va_arg(param, long)) ? 1L:0L;', 'break;', 'default:', 'result = CURLE_UNKNOWN_OPTION;', 'break;', '}', 'return result;', '}']
2024-04-26 03:40:56.501 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push r13', 'push r12', 'mov r12,rdx', 'push rbp', 'mov rbp,rdi', 'sub rsp,0x120', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'cmp esi,0x2853', '<JUMP> <LOC>', 'cmp esi,0x2710', '<JUMP> <LOC>', 'lea eax,<MEM>', 'cmp eax,0x141', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movsxd rax,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov r12d,0x4', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'add rsp,0x120', 'mov eax,r12d', 'pop rbp', 'pop r12', 'pop r13', 'ret', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'nop cs:<MEM>', 'sub esi,0x2711', 'cmp esi,0x142', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movsxd rax,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'nop <MEM>', 'cmp esi,0x4f4d', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp esi,0x763e', '<JUMP> <LOC>', '<JUMP> <LOC>', 'sub esi,0x9d63', 'cmp esi,0x13', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movsxd rax,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov r12d,0x30', '<JUMP> <LOC>', 'cmp esi,0x75c2', '<JUMP> <LOC>', 'cmp esi,0x75a2', '<JUMP> <LOC>', 'sub esi,0x75a3', 'cmp esi,0x1f', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movsxd rax,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov r12d,0x30', '<JUMP> <LOC>', 'nop cs:<MEM>', 'cmp esi,0x4f4f', '<JUMP> <LOC>', 'cmp esi,0x4f58', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp esi,0x4efb', '<JUMP> <LOC>', 'cmp esi,0x4eb3', '<JUMP> <LOC>', 'cmp esi,0x4e6f', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp esi,0x4e8c', '<JUMP> <LOC>', 'cmp esi,0x4ea2', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp esi,0x4f30', '<JUMP> <LOC>', 'cmp esi,0x4f3b', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'cmp esi,0x4e7e', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'xchg ax,ax', 'cmp esi,0x4e2c', '<JUMP> <LOC>', 'cmp esi,0x4e58', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'and <MEM>,0xfe', 'xor r12d,r12d', '<JUMP> <LOC>', 'xchg ax,ax', 'sub esi,0x4eb4', 'cmp esi,0x47', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'movsxd rax,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov r12d,0x30', '<JUMP> <LOC>', 'cmp esi,0x4e2b', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'or <MEM>,0x1', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov edx,0x3', 'lea rsi,<MEM>', 'call <curl_strnequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'cmp rax,rdx', 'cmova rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'movzx edx,<MEM>', 'setne al', 'xor r12d,r12d', 'lea ecx,<MEM>', 'movzx eax,<MEM>', 'and edx,0xfffffff7', 'or edx,ecx', 'and eax,0xfffffff7', 'mov <MEM>,dl', 'or eax,ecx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'cmp <MEM>,0x0', 'mov r12d,eax', 'setne al', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'add rbp,0x760', 'test rsi,rsi', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,rbp', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x7', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0x7f', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rcx,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xchg ax,ax', 'mov r12d,0x2b', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x7', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0x7f', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'and <MEM>,0xef', 'xor r12d,r12d', 'mov <MEM>,0x4', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x7', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0x7f', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffff', '<JUMP> <LOC>', 'mov <MEM>,ax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x7', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0x7f', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'cmp rdx,0xffb0', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'and <MEM>,0xef', 'xor r12d,r12d', 'mov <MEM>,0x2', 'mov rdi,<MEM>', 'mov <MEM>,rax', 'call <curl_mime_cleanpart>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'add rbp,0x5d8', 'cmp esi,0x20', 'cmove rbp,rax', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'movzx edx,ax', 'mov rcx,rax', 'lea rsi,<MEM>', 'and ecx,0xffff0000', 'cmp rsi,0x1', '<JUMP> <LOC>', 'test eax,0xfff8', '<JUMP> <LOC>', 'cmp rcx,0x7ffff', '<JUMP> <LOC>', 'mov <MEM>,dl', 'xor r12d,r12d', 'mov <MEM>,ecx', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'cmp rax,rdx', 'cmova rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov ecx,eax', 'add eax,0x8', 'add rcx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'xor edx,edx', 'call <curl_mime_set_subparts>', 'mov r12d,eax', 'test eax,eax', '<JUMP> <LOC>', 'and <MEM>,0xef', 'mov rdi,<MEM>', 'mov <MEM>,0x3', 'call <curl_mime_cleanpart>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'call <curl_ssl_false_start>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov r13,<MEM>', 'test r13,r13', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'mov rdi,rbp', 'setne dl', 'xor esi,esi', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', 'call <curl_ssl_conn_config_update>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <protocol2num>', 'mov r12d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'cmp rdx,0xa', 'mov edx,0x0', 'cmova eax,edx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'call <curl_ssl_cert_status_request>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x3', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'cmp rax,0x7fffffff', 'mov edx,0x7fffffff', 'cmovg rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdx,<MEM>', 'xor r12d,r12d', 'mov rax,rdx', 'mov rcx,rdx', 'mov <MEM>,dl', 'shr rax,1', 'and ecx,0x1', 'and eax,0x1', 'shl ecx,0x2', 'shl eax,0x3', 'or eax,ecx', 'mov rcx,rdx', 'shr rcx,0x2', 'and ecx,0x1', 'shl ecx,0x4', 'or eax,ecx', 'mov rcx,rdx', 'shr rcx,0x3', 'and ecx,0x1', 'shl ecx,0x5', 'or eax,ecx', 'mov rcx,rdx', 'shr rdx,0x5', 'shr rcx,0x4', 'shl edx,0x7', 'and ecx,0x1', 'shl ecx,0x6', 'or eax,ecx', 'or eax,edx', 'movzx edx,<MEM>', 'and edx,0x3', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'mov r12d,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'and eax,0x7', 'xor r12d,r12d', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'cmp <MEM>,0x0', 'mov r12d,eax', 'setne al', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov ecx,eax', 'add eax,0x8', 'add rcx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'call <setstropt_userpwd>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'cmp rdi,0xffff', '<JUMP> <LOC>', 'call <curlx_sltous>', 'xor r12d,r12d', 'mov <MEM>,ax', '<JUMP> <LOC>', 'mov esi,0x20', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov esi,0x1', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov eax,edx', 'add edx,0x8', 'add rax,<MEM>', 'mov <MEM>,edx', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'cmp rax,rdx', '<JUMP> <LOC>', 'mov <MEM>,eax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'or <MEM>,0x80', 'mov r12d,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov rsi,<MEM>', 'test rsi,rsi', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_altsvc_ctrl>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rcx,<MEM>', 'test rcx,rcx', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov esi,0x1', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov eax,edx', 'add edx,0x8', 'add rax,<MEM>', 'mov <MEM>,edx', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', 'test al,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x5', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov esi,0x40', 'mov rdi,rbp', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov esi,0x40', 'mov rdi,rbp', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov edx,eax', 'movzx eax,<MEM>', 'and edx,0x1', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdx,<MEM>', 'xor r12d,r12d', 'mov rax,rdx', 'mov rcx,rdx', 'mov <MEM>,dl', 'shr rax,1', 'and ecx,0x1', 'and eax,0x1', 'shl ecx,0x2', 'shl eax,0x3', 'or eax,ecx', 'mov rcx,rdx', 'shr rcx,0x2', 'and ecx,0x1', 'shl ecx,0x4', 'or eax,ecx', 'mov rcx,rdx', 'shr rcx,0x3', 'and ecx,0x1', 'shl ecx,0x5', 'or eax,ecx', 'mov rcx,rdx', 'shr rdx,0x5', 'shr rcx,0x4', 'shl edx,0x7', 'and ecx,0x1', 'shl ecx,0x6', 'or eax,ecx', 'or eax,edx', 'movzx edx,<MEM>', 'and edx,0x3', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'movzx ecx,<MEM>', 'xor esi,esi', 'mov rdi,rbp', 'mov rdx,<MEM>', 'mov r12d,eax', 'shr cl,0x4', 'and ecx,0x1', 'call <curl_cookie_init>', 'mov edx,0x1b', 'test rax,rax', 'mov <MEM>,rax', 'cmove r12d,edx', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,al', 'test al,0xfa', '<JUMP> <LOC>', 'mov r12d,0x4', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'mov rdi,rbp', 'mov <MEM>,0x0', 'call <curl_ssl_set_engine_default>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov esi,0x4', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov eax,edx', 'add edx,0x8', 'add rax,<MEM>', 'mov <MEM>,edx', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'cmp rax,rdx', '<JUMP> <LOC>', 'mov <MEM>,eax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov r12,<MEM>', 'cmp r12,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp <MEM>,r12', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'cmp <MEM>,rdi', '<JUMP> <LOC>', 'mov <MEM>,r12', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x7fffffff', '<JUMP> <LOC>', 'mov <MEM>,eax', 'xor r12d,r12d', '<JUMP> <LOC>', 'test <MEM>,0x1', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'and <MEM>,0xfe', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'cmp rdi,0xffff', '<JUMP> <LOC>', 'call <curlx_sltous>', 'xor r12d,r12d', 'mov <MEM>,ax', '<JUMP> <LOC>', 'or <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'and eax,0x1', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'cmp <MEM>,0x0', 'mov r12d,eax', '<JUMP> <LOC>', 'mov <MEM>,0x80', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0xc0dedbad', '<JUMP> <LOC>', 'mov r12d,0x4', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'cmp rax,rdx', 'cmova rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'mov esi,0x1', 'mov rdi,rbp', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', 'call <curl_ssl_conn_config_update>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'and <MEM>,0xef', 'xor r12d,r12d', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'sete al', 'xor r12d,r12d', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x1', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x20c49b', '<JUMP> <LOC>', 'imul eax,eax,0x3e8', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x3', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov esi,0x20', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'mov r12,<MEM>', '<JUMP> <LOC>', 'mov edx,0x2', 'mov esi,0x1', 'mov rdi,rbp', 'call <curl_share_lock>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'cmp <MEM>,rcx', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'cmp <MEM>,rcx', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'cmp <MEM>,rcx', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'cmp <MEM>,rdx', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov esi,0x1', 'mov rdi,rbp', 'sub edx,0x1', 'mov <MEM>,edx', 'call <curl_share_unlock>', 'mov <MEM>,0x0', 'test r12,r12', '<JUMP> <LOC>', 'cmp <MEM>,0x7e117a1e', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,0x2', 'mov esi,0x1', 'mov rdi,rbp', 'call <curl_share_lock>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'add edx,0x1', 'mov <MEM>,edx', 'test <MEM>,0x8', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov <MEM>,0x2', 'mov <MEM>,rdx', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_cookie_cleanup>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <curl_hsts_cleanup>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rdx,<MEM>', 'test rdx,rdx', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,rcx', 'test <MEM>,0x40', '<JUMP> <LOC>', 'add rax,0xc0', 'mov <MEM>,rax', 'mov esi,0x1', 'mov rdi,rbp', 'xor r12d,r12d', 'call <curl_share_unlock>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov r12,<MEM>', 'cmp r12,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp <MEM>,r12', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'cmp <MEM>,rdi', '<JUMP> <LOC>', 'mov <MEM>,r12', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'lea rsi,<MEM>', 'call <protocol2num>', 'mov r12d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x2', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp rax,0x7fffffff', 'mov edx,0x7fffffff', 'cmovg rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x7', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0x7f', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov r13,<MEM>', 'test r13,r13', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov rsi,r13', 'call <curl_setstropt>', 'mov r12d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r13', 'call <curl_slist_append@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'cmp rax,rdx', 'cmova rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov r12,<MEM>', 'test r12,r12', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_strequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov edx,0x2', 'mov esi,0x2', 'mov rdi,rbp', 'xor r12d,r12d', 'call <curl_share_lock>', 'mov rdi,<MEM>', 'call <curl_cookie_clearall>', 'mov esi,0x2', 'mov rdi,rbp', 'call <curl_share_unlock>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'cmp rax,0x7fffffff', 'mov edx,0x7fffffff', 'cmovg rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'and <MEM>,0xfe', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov esi,0x2', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov ecx,eax', 'add eax,0x8', 'add rcx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'call <setstropt_userpwd>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'call <curl_ssl_cert_status_request>', 'test al,al', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov eax,edx', 'add edx,0x8', 'add rax,<MEM>', 'mov <MEM>,edx', 'cmp <MEM>,0x0', 'mov rdi,rbp', 'setne al', 'xor esi,esi', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', 'call <curl_ssl_conn_config_update>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x4000', 'mov eax,0x4000', 'cmovge rax,<MEM>', 'mov edx,0x200000', 'mov rdi,<MEM>', 'cmp rax,0x200000', 'cmovg rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdi,<MEM>', 'test rdi,rdi', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'cmp rsi,0xffffffffffffffff', '<JUMP> <LOC>', 'test rsi,rsi', 'jns 5872b <curl_vsetopt+OFFSET>', 'mov r12d,0x1b', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x7', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rdx,<MEM>', 'mov eax,0xa00000', 'cmp rdx,0xa00000', '<JUMP> <LOC>', 'mov eax,0x4000', 'test rdx,rdx', '<JUMP> <LOC>', 'cmp rdx,0x400', 'mov eax,0x400', 'cmovge rax,rdx', 'mov <MEM>,eax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setblobopt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'test <MEM>,0x3', 'setne al', 'xor r12d,r12d', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp <MEM>,0x0', 'setne dl', 'xor r12d,r12d', 'and eax,0xfffffffe', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'cmp <MEM>,0x0', 'mov r12d,eax', 'setne al', 'shl eax,0x6', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffbf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x6', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffbf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov r13,<MEM>', 'lea rdi,<MEM>', 'mov rsi,r13', 'call <curl_setstropt>', 'mov r12d,eax', 'test eax,eax', '<JUMP> <LOC>', 'test r13,r13', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r13', 'call <curl_altsvc_load>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'test <MEM>,0x3', 'mov esi,0x1', 'mov rdi,rbp', 'setne al', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', 'call <curl_ssl_conn_config_update>', '<JUMP> <LOC>', 'mov esi,0x8', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'test <MEM>,0x3', 'mov rdi,rbp', 'setne al', 'xor esi,esi', 'xor r12d,r12d', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffd', 'or eax,edx', 'mov <MEM>,al', 'call <curl_ssl_conn_config_update>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x1ff', '<JUMP> <LOC>', 'mov <MEM>,eax', 'xor r12d,r12d', '<JUMP> <LOC>', 'test <MEM>,0x2', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,<MEM>', 'call <MEM>', 'and <MEM>,0xfd', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffffffffffffffff', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x20c49b', '<JUMP> <LOC>', 'imul eax,eax,0x3e8', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov esi,0x4', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov edx,<MEM>', 'cmp edx,0x2f', '<JUMP> <LOC>', 'mov eax,edx', 'add edx,0x8', 'add rax,<MEM>', 'mov <MEM>,edx', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'and <MEM>,0xef', 'xor r12d,r12d', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x1', '<JUMP> <LOC>', 'test rax,rax', 'setne al', 'xor r12d,r12d', 'shl eax,0x6', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffbf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x7', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0x7f', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov r12,<MEM>', 'test r12,r12', '<JUMP> <LOC>', 'mov rdi,r12', 'call <strlen@plt>', 'cmp rax,0x7a1200', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov rsi,r12', 'call <curl_slist_append@plt>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffff7', 'or eax,edx', 'mov edx,<MEM>', 'mov <MEM>,al', 'test al,0x8', '<JUMP> <LOC>', 'or edx,0x10', 'xor r12d,r12d', 'mov <MEM>,edx', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'test <MEM>,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x6', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffbf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 56f10 <curl_vsetopt+OFFSET>', 'mov <MEM>,rax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', 'js 53450 <curl_vsetopt+OFFSET>', 'cmp rax,0x7fffffff', 'mov edx,0x7fffffff', 'cmovg rax,rdx', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x20c49b', '<JUMP> <LOC>', 'imul eax,eax,0x3e8', 'xor r12d,r12d', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x5', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffdf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0x3', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov r12d,0x2b', 'cmp rax,0x1', '<JUMP> <LOC>', 'or <MEM>,0x40', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'cmp rax,0xffff', '<JUMP> <LOC>', 'mov <MEM>,ax', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'setne al', 'xor r12d,r12d', 'shl eax,0x6', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffbf', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'and eax,0x3', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rsi,<MEM>', 'lea rdi,<MEM>', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'sete al', 'xor r12d,r12d', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'and eax,0xffffffef', 'or eax,edx', 'mov <MEM>,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'nop <MEM>', 'mov r12d,0x2b', '<JUMP> <LOC>', 'nop <MEM>', 'mov r12d,0x4', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'cmp <MEM>,0x5', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'or <MEM>,0x2', 'xor r12d,r12d', '<JUMP> <LOC>', 'nop <MEM>', 'mov esi,0x8', 'call <curl_ssl_supports>', 'test al,al', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop <MEM>', 'mov eax,<MEM>', 'cmp eax,0x2f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov r12d,0x4', '<JUMP> <LOC>', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'and edx,0xffffffef', 'xor r12d,r12d', 'mov <MEM>,edx', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rsi,rcx', 'and esi,0x10', 'setne al', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', 'mov rax,rcx', 'and rax,0xffffffffffffffef', 'or rax,0x2', 'test rsi,rsi', 'cmovne rcx,rax', 'xor eax,eax', 'and rcx,0xffffffffffffffdb', '<JUMP> <LOC>', 'nop <MEM>', 'cmp eax,0x1f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x1', 'bt rcx,rdx', '<JUMP> <LOC>', 'mov <MEM>,rcx', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rsi,rcx', 'and esi,0x10', 'setne al', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'and eax,0xfffffffb', 'or eax,edx', 'mov <MEM>,al', 'mov rax,rcx', 'and rax,0xffffffffffffffef', 'or rax,0x2', 'test rsi,rsi', 'cmovne rcx,rax', 'xor eax,eax', 'and rcx,0xffffffffffffffdb', '<JUMP> <LOC>', 'nop <MEM>', 'cmp eax,0x1f', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x1', 'bt rcx,rdx', '<JUMP> <LOC>', 'mov <MEM>,rcx', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov <MEM>,al', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,eax', 'add eax,0x8', 'add rdx,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_slist_free_all@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'xor r12d,r12d', 'call <curl_hsts_cleanup>', '<JUMP> <LOC>', 'xor edi,edi', 'mov edx,0x3', 'lea rsi,<MEM>', 'call <curl_strnequal@plt>', 'test eax,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'lea r8,<MEM>', 'mov rsi,rdi', 'mov rdi,r8', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'and <MEM>,0xbf', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'and <MEM>,0xfd', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'xor r12d,r12d', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'call <curl_altsvc_init>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', 'mov r12d,0x1b', '<JUMP> <LOC>', 'lea r12,<MEM>', 'mov esi,0x100', 'mov rdi,r12', 'call <curl_all_content_encodings>', 'mov rsi,r12', 'mov rdi,rbp', 'call <curl_setstropt>', 'mov r12d,eax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_strequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov edx,0x2', 'mov esi,0x2', 'mov rdi,rbp', 'xor r12d,r12d', 'call <curl_share_lock>', 'mov rdi,<MEM>', 'call <curl_cookie_clearsess>', 'mov esi,0x2', 'mov rdi,rbp', 'call <curl_share_unlock>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov <MEM>,r12', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov rsi,r13', 'call <curl_setstropt>', 'mov r12d,eax', 'test eax,eax', '<JUMP> <LOC>', 'mov rsi,r13', 'mov rdi,rbp', 'call <curl_ssl_set_engine>', 'mov r12d,eax', '<JUMP> <LOC>', 'call <curl_memdup0>', 'mov rdi,<MEM>', 'mov r12,rax', 'lea rax,<MEM>', 'call <MEM>', 'test r12,r12', '<JUMP> <LOC>', 'mov <MEM>,r12', 'xor r12d,r12d', '<JUMP> <LOC>', 'call <curl_hsts_init>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'call <curl_altsvc_init>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_slist_free_all@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'xor r12d,r12d', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'test rdx,rdx', '<JUMP> <LOC>', 'add rdx,0xd0', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'call <MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_strequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'xor esi,esi', 'mov rdi,rbp', 'xor r12d,r12d', 'call <curl_flush_cookies>', '<JUMP> <LOC>', 'call <curl_hsts_init>', 'mov <MEM>,rax', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'mov r12d,0x4', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'call <curl_cookie_clearall>', 'mov rdi,<MEM>', 'call <curl_cookie_cleanup>', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'mov rdi,r12', 'call <curl_strequal@plt>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'xor eax,eax', 'or rcx,0xffffffffffffffff', 'mov rdi,r12', 'repnz scas al,es:<MEM>', 'mov rax,rcx', 'not rax', 'sub rax,0x1', 'cmp rax,0x7a1200', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,r12', 'call <MEM>', 'mov r12,rax', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,0x2', 'mov esi,0x2', 'mov rdi,rbp', 'call <curl_share_lock>', 'lea rsi,<MEM>', 'mov edx,0xb', 'mov rdi,r12', 'call <curl_strnequal@plt>', 'mov rsi,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'push 0x1', 'xor ecx,ecx', 'xor r9d,r9d', 'lea r8,<MEM>', 'push 0x0', 'mov edx,0x1', 'mov rdi,rbp', 'call <curl_cookie_add>', 'pop rcx', 'pop rsi', 'mov esi,0x2', 'mov rdi,rbp', 'call <curl_share_unlock>', 'lea rax,<MEM>', 'mov rdi,r12', 'xor r12d,r12d', 'call <MEM>', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov r12d,0x1b', 'call <curl_slist_free_all@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rdi,<MEM>', 'mov r12d,0x1b', 'call <curl_slist_free_all@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,r12', 'mov r12d,0x1b', 'call <MEM>', '<JUMP> <LOC>', 'mov rdi,rbp', 'xor r12d,r12d', 'call <curl_cookie_loadfiles>', '<JUMP> <LOC>', 'push 0x1', 'xor edx,edx', 'xor r9d,r9d', 'mov r8,r12', 'push 0x0', 'xor ecx,ecx', 'mov rdi,rbp', 'call <curl_cookie_add>', 'pop rax', 'pop rdx', '<JUMP> <LOC>', 'mov ecx,0x1', 'xor edx,edx', 'xor esi,esi', 'mov rdi,rbp', 'call <curl_cookie_init>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'mov r12d,0x30', '<JUMP> <LOC>', 'nop <MEM>']
filter_and_generate_data_items: 100%|██████████| 1976/1976 [00:01<00:00, 1113.28it/s]
2024-04-26 03:40:57.570 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1976 ---> 29
2024-04-26 03:40:57.576 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['protocol2num', 'Curl_vsetopt']
2024-04-26 03:40:57.577 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['protocol2num', 'Curl_vsetopt']
2024-04-26 03:40:57.578 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.74it/s]
2024-04-26 03:40:59.404 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8405436277389526, protocol2num ---> curl_easy_nextheader
2024-04-26 03:40:59.404 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 7 ---> 1
2024-04-26 03:40:59.405 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:40:59.405 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:40:59.406 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:40:59.406 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:40:59.406 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:40:59.407 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:40:59.407 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 234 CVE-2011-1779
filter_and_generate_data_items:  63%|██████▎   | 1897/2988 [00:00<00:00, 2736.62it/s]2024-04-26 03:41:08.160 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: gnu_sparse_01_parse, 2, 4
2024-04-26 03:41:08.161 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'gnu_sparse_01_parse(struct tar *tar, const char *p)', '{', 'const char *e;', 'off_t offset = -1, size = -1;', 'for (;;) {', 'e = p;', "while (*e != '\\0' && *e != ',') {", "if (*e < '0' || *e > '9')", 'return (ARCHIVE_WARN);', 'e++;', '}', 'if (offset < 0) {', 'offset = tar_atol10(p, e - p);', 'if (offset < 0)', 'return (ARCHIVE_WARN);', '} else {', 'size = tar_atol10(p, e - p);', 'if (size < 0)', 'return (ARCHIVE_WARN);', 'gnu_add_sparse_entry(tar, offset, size);', 'offset = -1;', '}', "if (*e == '\\0')", 'return (ARCHIVE_OK);', 'p = e + 1;', '}', '}']
2024-04-26 03:41:08.161 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x30', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,0xffffffffffffffff', 'mov <MEM>,0xffffffffffffffff', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x2f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x39', '<JUMP> <LOC>', 'mov eax,0xffffffec', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x2c', '<JUMP> <LOC>', 'cmp <MEM>,0x0', 'jns 2c11f <gnu_sparse_01_parse+OFFSET>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov esi,edx', 'mov rdi,rax', 'call <tar_atol10>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', 'jns 2c168 <gnu_sparse_01_parse+OFFSET>', 'mov eax,0xffffffec', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov esi,edx', 'mov rdi,rax', 'call <tar_atol10>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', 'jns 2c149 <gnu_sparse_01_parse+OFFSET>', 'mov eax,0xffffffec', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <gnu_add_sparse_entry>', 'mov <MEM>,0xffffffffffffffff', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x1', 'mov <MEM>,rax', '<JUMP> <LOC>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 2988/2988 [00:01<00:00, 2904.98it/s]
2024-04-26 03:41:09.469 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2988 ---> 343
2024-04-26 03:41:09.471 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['pax_header', 'pax_attribute', 'gnu_sparse_01_parse', 'gnu_sparse_10_read']
2024-04-26 03:41:09.472 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['pax_header', 'pax_attribute', 'gnu_sparse_01_parse', 'gnu_sparse_10_read']
2024-04-26 03:41:09.473 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['pax_header', 'pax_attribute', 'gnu_sparse_10_read']
confirming functions(batch_size: 128):: 100%|██████████| 3/3 [00:05<00:00,  1.75s/it]
2024-04-26 03:41:19.099 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9993634819984436, pax_header ---> pax_header
2024-04-26 03:41:19.100 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9618412256240845, pax_header ---> pax_attribute
2024-04-26 03:41:19.107 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9635279575983683, pax_attribute ---> pax_attribute
2024-04-26 03:41:19.107 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9748296737670898, gnu_sparse_10_read ---> gnu_sparse_10_read
2024-04-26 03:41:19.108 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 4
2024-04-26 03:41:19.108 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:41:19.516 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.868225459009409, fix prob: 4.131774574518204
2024-04-26 03:41:19.517 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:41:19.517 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:41:19.517 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:41:19.517 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:41:19.518 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 235 CVE-2015-8921
filter_and_generate_data_items: 100%|██████████| 1018/1018 [00:00<00:00, 2202.89it/s]
2024-04-26 03:41:28.438 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1018 ---> 118
2024-04-26 03:41:28.441 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ae_strtofflags', 'ae_wcstofflags']
2024-04-26 03:41:28.441 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ae_strtofflags', 'ae_wcstofflags']
2024-04-26 03:41:28.442 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['ae_strtofflags', 'ae_wcstofflags']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.89s/it]
2024-04-26 03:41:31.164 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7136209607124329, ae_strtofflags ---> ae_wcstofflags
2024-04-26 03:41:31.164 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7291659116744995, ae_wcstofflags ---> ae_strtofflags
2024-04-26 03:41:31.165 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 2
2024-04-26 03:41:31.165 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:41:31.165 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:41:31.166 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:41:31.166 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:41:31.166 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:41:31.166 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:41:31.166 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 236 CVE-2015-8925
filter_and_generate_data_items: 100%|██████████| 592/592 [00:00<00:00, 1858.44it/s]
2024-04-26 03:41:41.327 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 592 ---> 57
2024-04-26 03:41:41.331 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['parse_escapes']
2024-04-26 03:41:41.331 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['parse_escapes']
2024-04-26 03:41:41.332 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['parse_escapes']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]
2024-04-26 03:41:42.505 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9673036336898804, parse_escapes ---> parse_escapes
2024-04-26 03:41:42.506 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:41:42.506 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:41:42.578 | SUCCESS  | __main__:run_tc:491 - vul prob: 3.092660563197569e-06, fix prob: 0.9999969005584717
2024-04-26 03:41:42.579 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:41:42.579 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:41:42.579 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:41:42.579 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:41:42.579 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 237 CVE-2020-9308
filter_and_generate_data_items: 100%|██████████| 1907/1907 [00:01<00:00, 1555.43it/s]
2024-04-26 03:41:53.743 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1907 ---> 136
2024-04-26 03:41:53.745 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['process_base_block']
2024-04-26 03:41:53.746 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['process_base_block']
2024-04-26 03:41:53.746 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['process_base_block']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:01<00:00,  1.03it/s]
2024-04-26 03:41:56.007 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.962125837802887, process_base_block ---> process_base_block
2024-04-26 03:41:56.007 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:41:56.007 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:41:56.081 | SUCCESS  | __main__:run_tc:491 - vul prob: 3.8858718198753195e-07, fix prob: 0.9999996423721313
2024-04-26 03:41:56.081 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:41:56.081 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:41:56.081 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:41:56.081 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:41:56.082 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 238 CVE-2011-4352
filter_and_generate_data_items: 100%|██████████| 8598/8598 [00:03<00:00, 2502.52it/s]
2024-04-26 03:42:09.310 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 8598 ---> 531
2024-04-26 03:42:09.313 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['vp3_dequant']
2024-04-26 03:42:09.314 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['vp3_dequant']
2024-04-26 03:42:09.314 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['vp3_dequant']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.61s/it]
2024-04-26 03:42:17.742 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9980782270431519, vp3_dequant ---> vp3_dequant
2024-04-26 03:42:17.743 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:42:17.743 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:42:17.816 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.3991920013722847e-06, fix prob: 0.9999985694885254
2024-04-26 03:42:17.816 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:42:17.816 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:42:17.816 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:42:17.817 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:42:17.817 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 239 CVE-2011-4579
filter_and_generate_data_items: 100%|██████████| 9501/9501 [00:04<00:00, 2234.04it/s]
2024-04-26 03:42:31.953 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 9501 ---> 562
2024-04-26 03:42:31.959 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['svq1_decode_frame']
2024-04-26 03:42:31.960 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['svq1_decode_frame']
2024-04-26 03:42:31.960 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['svq1_decode_frame']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.67s/it]
2024-04-26 03:42:44.975 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9962148070335388, svq1_decode_frame ---> vp3_decode_frame
2024-04-26 03:42:44.976 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9802905321121216, svq1_decode_frame ---> rv34_decode_slice
2024-04-26 03:42:44.976 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 7 ---> 2
2024-04-26 03:42:44.977 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:42:45.119 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.266622006893158, fix prob: 0.7333779335021973
2024-04-26 03:42:45.119 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:42:45.120 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:42:45.120 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:42:45.120 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:42:45.120 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 240 CVE-2012-0852
filter_and_generate_data_items: 100%|██████████| 10054/10054 [00:05<00:00, 1873.45it/s]
2024-04-26 03:43:00.440 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10054 ---> 78
2024-04-26 03:43:00.448 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['adpcm_decode_frame']
2024-04-26 03:43:00.448 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['adpcm_decode_frame']
2024-04-26 03:43:00.449 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['adpcm_decode_frame']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.00s/it]
2024-04-26 03:43:05.417 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9883787631988525, adpcm_decode_frame ---> adpcm_decode_frame
2024-04-26 03:43:05.417 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:43:05.417 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:43:05.490 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.01679506152868271, fix prob: 0.9832049012184143
2024-04-26 03:43:05.491 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:43:05.491 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:43:05.491 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:43:05.491 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:43:05.492 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 03:43:05.492 | SUCCESS  | __main__:run_experiment:651 - 	total: 240
2024-04-26 03:43:05.492 | SUCCESS  | __main__:run_experiment:652 - over filter count: 20, 8.33%
2024-04-26 03:43:05.492 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 200, 83.33%
2024-04-26 03:43:05.492 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 176, 73.33%
2024-04-26 03:43:05.492 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 140, 58.33%
2024-04-26 03:43:05.493 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 46, 19.17%
2024-04-26 03:43:05.493 | SUCCESS  | __main__:run_experiment:662 - 	tp: 46, fp: 0, tn: 0, fn: 194
2024-04-26 03:43:05.493 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 03:43:05.493 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.19166666666666668
2024-04-26 03:43:05.493 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.3216783216783217
2024-04-26 03:43:05.493 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.19166666666666668
generate_asm_function_cache: 100%|██████████| 15/15 [00:10<00:00,  1.44it/s]
2024-04-26 03:43:25.811 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 03:43:25.811 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 241 CVE-2012-0858
filter_and_generate_data_items: 100%|██████████| 9359/9359 [00:08<00:00, 1146.94it/s]
2024-04-26 03:43:40.931 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 9359 ---> 1607
2024-04-26 03:43:40.940 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['shorten_decode_close']
2024-04-26 03:43:40.941 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['shorten_decode_close']
2024-04-26 03:43:40.941 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['shorten_decode_close']
confirming functions(batch_size: 128):: 100%|██████████| 13/13 [00:22<00:00,  1.75s/it]
2024-04-26 03:44:03.907 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9678033590316772, shorten_decode_close ---> shorten_decode_close
2024-04-26 03:44:03.907 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 03:44:03.907 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:44:03.943 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.13109178841114044, fix prob: 0.8689082264900208
2024-04-26 03:44:03.943 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:03.943 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:03.944 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:44:03.944 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:03.944 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 242 CVE-2018-20843
filter_and_generate_data_items: 100%|██████████| 340/340 [00:00<00:00, 1590.85it/s]
2024-04-26 03:44:10.306 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 340 ---> 50
2024-04-26 03:44:10.308 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['setElementTypePrefix']
2024-04-26 03:44:10.309 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['setElementTypePrefix']
2024-04-26 03:44:10.310 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['setElementTypePrefix']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.18it/s]
2024-04-26 03:44:11.566 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9399329423904419, setElementTypePrefix ---> setElementTypePrefix
2024-04-26 03:44:11.567 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:44:11.567 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:44:11.637 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.009424672462046146, fix prob: 0.9905753135681152
2024-04-26 03:44:11.637 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:11.638 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:11.638 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:44:11.638 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:11.638 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 243 CVE-2019-15903
filter_and_generate_data_items:  35%|███▌      | 119/340 [00:00<00:00, 1173.05it/s]2024-04-26 03:44:17.407 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: processInternalEntity, 3, 2
2024-04-26 03:44:17.409 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static enum XML_Error', 'processInternalEntity(XML_Parser parser, ENTITY *entity,', 'XML_Bool betweenDecl)', '{', 'const char *textStart, *textEnd;', 'const char *next;', 'enum XML_Error result;', 'OPEN_INTERNAL_ENTITY *openEntity;', 'if (parser->m_freeInternalEntities) {', 'openEntity = parser->m_freeInternalEntities;', 'parser->m_freeInternalEntities = openEntity->next;', '}', 'else {', 'openEntity = (OPEN_INTERNAL_ENTITY *)MALLOC(parser, sizeof(OPEN_INTERNAL_ENTITY));', 'if (!openEntity)', 'return XML_ERROR_NO_MEMORY;', '}', 'entity->open = XML_TRUE;', 'entity->processed = 0;', 'openEntity->next = parser->m_openInternalEntities;', 'parser->m_openInternalEntities = openEntity;', 'openEntity->entity = entity;', 'openEntity->startTagLevel = parser->m_tagLevel;', 'openEntity->betweenDecl = betweenDecl;', 'openEntity->internalEventPtr = NULL;', 'openEntity->internalEventEndPtr = NULL;', 'textStart = (char *)entity->textPtr;', 'textEnd = (char *)(entity->textPtr + entity->textLen);', 'next = textStart;', '#ifdef XML_DTD', 'if (entity->is_param) {', 'int tok = XmlPrologTok(parser->m_internalEncoding, textStart, textEnd, &next);', 'result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd, tok,', 'next, &next, XML_FALSE);', '}', 'else', 'result = doContent(parser, parser->m_tagLevel, parser->m_internalEncoding, textStart,', 'textEnd, &next, XML_FALSE);', 'if (result == XML_ERROR_NONE) {', 'if (textEnd != next && parser->m_parsingStatus.parsing == XML_SUSPENDED) {', 'entity->processed = (int)(next - textStart);', 'parser->m_processor = internalEntityProcessor;', '}', 'else {', 'entity->open = XML_FALSE;', 'parser->m_openInternalEntities = openEntity->next;', 'openEntity->next = parser->m_freeInternalEntities;', 'parser->m_freeInternalEntities = openEntity;', '}', '}', 'return result;', '}']
2024-04-26 03:44:17.410 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov eax,edx', 'mov <MEM>,al', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edi,0x28', 'call rax', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'add rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rdi,rax', 'call r8', 'mov <MEM>,eax', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov r8d,<MEM>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'push 0x0', 'lea rdi,<MEM>', 'push rdi', 'mov rdi,rax', 'call <doprolog>', 'add rsp,0x10', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,<MEM>', 'lea r8,<MEM>', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push 0x0', 'mov r9,r8', 'mov r8,rdi', 'mov rdi,rax', 'call <docontent>', 'add rsp,0x10', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov eax,<MEM>', 'mov rcx,<MEM>', 'xor rcx,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 340/340 [00:00<00:00, 1670.88it/s]
2024-04-26 03:44:18.044 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 340 ---> 8
2024-04-26 03:44:18.047 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['processInternalEntity']
2024-04-26 03:44:18.048 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['processInternalEntity']
2024-04-26 03:44:18.048 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  4.81it/s]
2024-04-26 03:44:18.259 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:44:18.259 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:44:18.260 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:18.260 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:18.260 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:44:18.260 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:18.260 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 244 CVE-2022-23990
filter_and_generate_data_items: 100%|██████████| 355/355 [00:00<00:00, 844.64it/s]
2024-04-26 03:44:24.787 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 355 ---> 3
2024-04-26 03:44:24.790 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['doProlog']
2024-04-26 03:44:24.790 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['doProlog']
2024-04-26 03:44:24.791 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['doProlog']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  5.63it/s]
2024-04-26 03:44:24.971 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx doProlog doProlog	0.9081526398658752	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dl', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x220', 'mov <MEM>,rax', 'mov rax,<MEM>', 'add rax,0x228', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'add rax,0x8', 'mov <MEM>,rax', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0xf', 'cmp eax,0xf', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov eax,0x4', '<JUMP> <LOC>', 'mov eax,0x5', '<JUMP> <LOC>', 'mov eax,0x6', '<JUMP> <LOC>', 'neg <MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov r8,rcx', 'mov rcx,rdx', 'mov rdx,rax', 'mov esi,0xfffffffc', 'call r9', 'cmp eax,0xffffffff', '<JUMP> <LOC>', 'mov eax,0x1d', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,0x3', '<JUMP> <LOC>', 'neg <MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rsi,<MEM>', 'mov rdx,<MEM>', 'mov eax,<MEM>', 'mov r8,rsi', 'mov esi,eax', 'call r9', 'mov <MEM>,eax', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'cmp <MEM>,0x39', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9d,edi', 'mov r8d,0x11d1', 'mov rdi,rax', 'call <accountingdifftolerated>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <accountingonabort>', 'mov eax,0x2b', '<JUMP> <LOC>', 'nop', 'mov eax,<MEM>', 'add eax,0x1', 'cmp eax,0x3d', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x0', 'mov rdi,rax', 'call <processxmldecl>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x1', 'mov rdi,rax', 'call r9', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolclear>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x1', 'mov rdi,rax', 'call <processxmldecl>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x40', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <lookup>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call r8', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x20', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <normalizepublicid>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call r8', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x20', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <normalizepublicid>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0xe', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov eax,0x4', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x0', 'mov rdi,rax', 'call r9', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolclear>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x40', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <lookup>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,rsi', 'mov esi,0x0', 'mov rdi,rax', 'call r9', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x15', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call rdx', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x16', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call rdx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x40', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <lookup>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,rsi', 'mov esi,0x0', 'mov rdi,rax', 'call r9', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x15', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call rdx', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x16', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rdi,rax', 'call <contentprocessor>', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <getelementtype>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <getattributeid>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x20', '<JUMP> <LOC>', 'lea rax,<MEM>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'mov rdi,rdx', 'call <poolappendstring>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolappend>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx ecx,al', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov r9,rdi', 'mov r8d,0x0', 'mov rdi,rax', 'call <defineattribute>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x28', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x4e', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'cmp al,0x4f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolgrow>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rcx', 'mov <MEM>,0x29', 'nop', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolgrow>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rcx', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r10,<MEM>', 'cmp <MEM>,0x24', 'sete al', 'movzx edi,al', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r9d,edi', 'mov r8d,0x0', 'mov rdi,rax', 'call r10', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolclear>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea r8,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push 0x2', 'mov r9,r8', 'mov r8,rdi', 'mov rdi,rax', 'call <storeattributevalue>', 'add rsp,0x10', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'mov r9,rdi', 'mov r8,rcx', 'mov ecx,0x0', 'mov rdi,rax', 'call <defineattribute>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x28', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp al,0x4e', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'cmp al,0x4f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolgrow>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rcx', 'mov <MEM>,0x29', 'nop', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolgrow>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rcx', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r10,<MEM>', 'cmp <MEM>,0x26', 'sete al', 'movzx r8d,al', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov r9d,r8d', 'mov r8,rdi', 'mov rdi,rax', 'call r10', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolclear>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x2', 'mov rdi,rax', 'call <storeentityvalue>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'sub rdx,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r10,<MEM>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push 0x0', 'push 0x0', 'push 0x0', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call r10', 'add rsp,0x20', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call rdx', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x16', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x40', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <lookup>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rbx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0xd', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r10,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push 0x0', 'push rdi', 'push rcx', 'mov r9,r8', 'mov r8d,0x0', 'mov ecx,0x0', 'mov rdi,rax', 'call r10', 'add rsp,0x20', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rbx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r10,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8,rdi', 'mov rdi,rax', 'call r10', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r10,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdi', 'push rcx', 'push rdx', 'mov r9,r8', 'mov r8d,0x0', 'mov ecx,0x0', 'mov edx,0x0', 'mov rdi,rax', 'call r10', 'add rsp,0x20', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x40', 'mov rdi,rax', 'call <lookup>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,0x1', '<JUMP> <LOC>', 'mov edx,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x40', 'mov rdi,rax', 'call <lookup>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov edx,0x1', '<JUMP> <LOC>', 'mov edx,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call r8', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x20', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <normalizepublicid>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call r9', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolclear>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,rcx', 'mov ecx,0x0', 'mov rdi,rax', 'call r9', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'add rax,0x310', 'mov rdi,rax', 'call <poolclear>', '<JUMP> <LOC>', 'cmp <MEM>,0xc', '<JUMP> <LOC>', 'cmp <MEM>,0x1c', '<JUMP> <LOC>', 'mov eax,0xa', '<JUMP> <LOC>', 'mov eax,0x11', '<JUMP> <LOC>', 'mov eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <reportdefault>', 'mov <MEM>,0x0', 'movzx edi,<MEM>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9d,edi', 'mov r8,<MEM>', 'mov rdi,rax', 'call <doignoresection>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', 'jns fa2f <doprolog+OFFSET>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,ecx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'shr eax,1', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,0x20', 'mov edi,0x20', 'call rax', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'add rax,rdx', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <nextscaffoldpart>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'jns fbf9 <doprolog+OFFSET>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x143e', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x2', 'add rdx,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'shl rdx,0x5', 'add rax,rdx', 'mov <MEM>,0x6', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'add rax,rdx', 'movzx eax,<MEM>', 'cmp al,0x7c', '<JUMP> <LOC>', 'mov eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'add rax,rdx', 'mov <MEM>,0x2c', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'add rax,rdx', 'movzx eax,<MEM>', 'cmp al,0x2c', '<JUMP> <LOC>', 'mov eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'add rax,rdx', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x2', 'sub rax,0x4', 'add rax,rcx', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x5', 'add rax,rdx', 'mov eax,<MEM>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x2', 'sub rax,0x4', 'add rax,rcx', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x5', 'add rax,rdx', 'mov <MEM>,0x5', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'add rax,rdx', 'mov <MEM>,0x7c', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,dl', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rdx,rax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'call <poolstorestring>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov ecx,0x0', 'mov rdi,rax', 'call <lookup>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0xb', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov eax,0x18', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,dl', 'cmp <MEM>,0x3c', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov edx,0x1', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov eax,0xc', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x3c', 'sete al', 'mov <MEM>,al', 'movzx edx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <processinternalentity>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov edx,0x14a3', 'mov rsi,rcx', 'mov rdi,rax', 'call <entitytrackingonopen>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,rsi', 'mov esi,0x0', 'mov rdi,rax', 'call r9', 'test eax,eax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov edx,0x14a7', 'mov rsi,rcx', 'mov rdi,rax', 'call <entitytrackingonclose>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov eax,0x15', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov edx,0x14ab', 'mov rsi,rcx', 'mov rdi,rax', 'call <entitytrackingonclose>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,dl', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,dl', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call rdx', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x16', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <getelementtype>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edi,0x20', 'call rax', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'cmp <MEM>,0x29', '<JUMP> <LOC>', 'mov edx,0x2', '<JUMP> <LOC>', 'mov edx,0x1', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x2', 'sub rax,0x4', 'add rax,rcx', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x5', 'add rax,rdx', 'mov <MEM>,0x3', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'neg rax', 'add rax,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <nextscaffoldpart>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'jns 10574 <doprolog+OFFSET>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'shl rdx,0x5', 'add rax,rdx', 'mov <MEM>,0x4', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'shl rdx,0x5', 'add rdx,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <getelementtype>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'shl rdx,0x5', 'add rdx,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'nop', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'movsxd rdx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'add edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x3', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x2', 'add rax,rcx', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x5', 'add rdx,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <build_model>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <reportprocessinginstruction>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <reportcomment>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0xe', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'test al,al', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <reportdefault>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,0x23', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov r8,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call r8', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rbx,<MEM>', 'leave', 'ret']
2024-04-26 03:44:24.972 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:44:24.972 | SUCCESS  | __main__:run_tc:480 - confirm summary: True False False False
2024-04-26 03:44:24.973 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:24.973 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:24.973 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:44:24.973 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:24.973 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 245 CVE-2016-10167
filter_and_generate_data_items: 100%|██████████| 472/472 [00:00<00:00, 1819.54it/s]
2024-04-26 03:44:31.506 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 472 ---> 17
2024-04-26 03:44:31.509 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gdImageCreateFromGd2Ctx']
2024-04-26 03:44:31.515 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['gdImageCreateFromGd2Ctx']
2024-04-26 03:44:31.515 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gdImageCreateFromGd2Ctx']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.96it/s]
2024-04-26 03:44:33.896 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9906424880027771, gdImageCreateFromGd2Ctx ---> gdImageCreateFromXpm
2024-04-26 03:44:33.897 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 03:44:33.897 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:44:33.968 | SUCCESS  | __main__:run_tc:491 - vul prob: 2.773883807094535e-07, fix prob: 0.9999997615814209
2024-04-26 03:44:33.969 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:33.969 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:33.969 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:44:33.969 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:33.970 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 246 CVE-2016-10168
filter_and_generate_data_items: 100%|██████████| 472/472 [00:00<00:00, 1977.26it/s]
2024-04-26 03:44:40.391 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 472 ---> 32
2024-04-26 03:44:40.393 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['_gd2GetHeader']
2024-04-26 03:44:40.394 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['_gd2GetHeader']
2024-04-26 03:44:40.394 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['_gd2GetHeader']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.68it/s]
2024-04-26 03:44:41.560 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9933505654335022, _gd2GetHeader ---> _gd2GetHeader
2024-04-26 03:44:41.560 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9907478094100952, _gd2GetHeader ---> ReadImage
2024-04-26 03:44:41.560 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 2
2024-04-26 03:44:41.561 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:44:41.699 | SUCCESS  | __main__:run_tc:491 - vul prob: 3.4658521371966344e-05, fix prob: 1.9999653100967407
2024-04-26 03:44:41.700 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:41.700 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:41.700 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:44:41.700 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:41.701 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 247 CVE-2016-3074
filter_and_generate_data_items: 100%|██████████| 470/470 [00:00<00:00, 2102.53it/s]
2024-04-26 03:44:48.223 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 470 ---> 34
2024-04-26 03:44:48.226 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['_gd2GetHeader']
2024-04-26 03:44:48.226 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['_gd2GetHeader']
2024-04-26 03:44:48.227 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['_gd2GetHeader']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.09it/s]
2024-04-26 03:44:49.572 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9689754843711853, _gd2GetHeader ---> _gd2GetHeader
2024-04-26 03:44:49.573 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 03:44:49.573 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:44:49.642 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0009324263664893806, fix prob: 0.9990676045417786
2024-04-26 03:44:49.642 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:49.642 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:49.642 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:44:49.642 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:49.643 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 248 CVE-2016-6132
filter_and_generate_data_items: 100%|██████████| 471/471 [00:00<00:00, 1687.53it/s]
2024-04-26 03:44:56.090 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 471 ---> 48
2024-04-26 03:44:56.093 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['read_image_tga']
2024-04-26 03:44:56.094 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['read_image_tga']
2024-04-26 03:44:56.095 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['read_image_tga']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.84it/s]
2024-04-26 03:44:57.306 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9993337094783783, read_image_tga ---> read_image_tga
2024-04-26 03:44:57.306 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:44:57.306 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:44:57.496 | SUCCESS  | __main__:run_tc:491 - vul prob: 3.3074139160760296e-07, fix prob: 1.9999996423721313
2024-04-26 03:44:57.497 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:44:57.497 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:44:57.497 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:44:57.497 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:44:57.497 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 249 CVE-2016-6161
filter_and_generate_data_items: 100%|██████████| 470/470 [00:00<00:00, 1933.21it/s]
2024-04-26 03:45:03.952 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 470 ---> 83
2024-04-26 03:45:03.955 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['output']
2024-04-26 03:45:03.955 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['output']
2024-04-26 03:45:03.956 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['output']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.13s/it]
2024-04-26 03:45:05.213 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9921659231185913, output ---> output
2024-04-26 03:45:05.213 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:45:05.214 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:45:05.251 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.055103372782468796, fix prob: 0.9448966383934021
2024-04-26 03:45:05.251 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:45:05.251 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:45:05.252 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:45:05.252 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:45:05.252 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 250 CVE-2016-6207
filter_and_generate_data_items: 100%|██████████| 2355/2355 [00:00<00:00, 2681.15it/s]
2024-04-26 03:45:12.259 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2355 ---> 317
2024-04-26 03:45:12.262 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gdImageCreateTrueColor', 'gdImageCopyResampled', '_gdContributionsAlloc', '*_gdContributionsCalc', 'gdImageScaleTwoPass']
2024-04-26 03:45:12.268 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['gdImageCreateTrueColor', 'gdImageCopyResampled', '_gdContributionsAlloc', '_gdContributionsCalc', '_gdScalePass', 'gdImageScaleTwoPass']
2024-04-26 03:45:12.268 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gdImageCreateTrueColor', 'gdImageCopyResampled', '_gdContributionsAlloc', '_gdContributionsCalc', 'gdImageScaleTwoPass']
confirming functions(batch_size: 128):: 100%|██████████| 3/3 [00:04<00:00,  1.52s/it]
2024-04-26 03:45:20.656 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7316713631153107, gdImageCopyResampled ---> gdImageCopyResampled
2024-04-26 03:45:20.656 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7503501772880554, _gdContributionsAlloc ---> _gdContributionsAlloc
2024-04-26 03:45:20.657 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.979044497013092, gdImageCreateTrueColor ---> gdImageCreateTrueColor
2024-04-26 03:45:20.657 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.956243634223938, gdImageCreateTrueColor ---> gdImageCreate
2024-04-26 03:45:20.657 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.6757904887199402, _gdContributionsCalc ---> _gdContributionsCalc
2024-04-26 03:45:20.657 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8079044620196024, gdImageScaleTwoPass ---> _gdGetColors
2024-04-26 03:45:20.657 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 12 ---> 6
2024-04-26 03:45:20.657 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:45:20.937 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.9960506777642877, fix prob: 3.0039491951465607
2024-04-26 03:45:20.938 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:45:20.938 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:45:20.938 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:45:20.938 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:45:20.939 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 251 CVE-2016-6906
filter_and_generate_data_items: 100%|██████████| 472/472 [00:00<00:00, 1898.60it/s]
2024-04-26 03:45:27.305 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 472 ---> 44
2024-04-26 03:45:27.308 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['read_image_tga']
2024-04-26 03:45:27.308 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['read_image_tga']
2024-04-26 03:45:27.309 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['read_image_tga']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.31it/s]
2024-04-26 03:45:28.448 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8566228151321411, read_image_tga ---> read_image_tga
2024-04-26 03:45:28.449 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:45:28.449 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:45:28.449 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:45:28.450 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:45:28.450 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:45:28.450 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:45:28.450 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:45:28.450 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 252 CVE-2017-6362
filter_and_generate_data_items: 100%|██████████| 1410/1410 [00:00<00:00, 2634.87it/s]
2024-04-26 03:45:35.193 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1410 ---> 244
2024-04-26 03:45:35.196 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gdImagePngPtr', 'gdImagePngPtrEx', 'gdImagePngCtxEx']
2024-04-26 03:45:35.196 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['gdImagePngPtr', 'gdImagePngPtrEx', 'gdImagePngCtxEx']
2024-04-26 03:45:35.197 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gdImagePngPtr', 'gdImagePngPtrEx', 'gdImagePngCtxEx']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.75s/it]
2024-04-26 03:45:38.709 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx gdImagePngCtxEx gdImagePngCtxEx	0.9034098982810974	['mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'add rax,0xc14', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov ecx,0x0', 'lea rdx,<MEM>', 'mov rsi,rax', 'lea rdi,<MEM>', 'call <png_create_write_struct@plt>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <png_create_info_struct@plt>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', 'lea rax,<MEM>', 'mov esi,0x0', 'mov rdi,rax', 'call <png_destroy_write_struct@plt>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdi,rax', 'call <_setjmp@plt>', 'endbr64', 'test eax,eax', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_destroy_write_struct@plt>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <png_set_write_fn@plt>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov esi,edx', 'mov rdi,rax', 'call <png_set_compression_level@plt>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'test rax,rax', 'js 33369 <gdimagepngctxex+OFFSET>', 'cvtsi2sd xmm0,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'shr rdx,1', 'and eax,0x1', 'or rdx,rax', 'cvtsi2sd xmm0,rdx', 'addsd xmm0,xmm0', 'movsd xmm1,<MEM>', 'divsd xmm0,xmm1', 'movapd xmm1,xmm0', 'movsd xmm0,<MEM>', 'addsd xmm0,xmm1', 'cvttsd2si rax,xmm0', 'mov ecx,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov eax,eax', 'test rax,rax', 'js 333bc <gdimagepngctxex+OFFSET>', 'cvtsi2sd xmm0,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'shr rdx,1', 'and eax,0x1', 'or rdx,rax', 'cvtsi2sd xmm0,rdx', 'addsd xmm0,xmm0', 'movsd xmm1,<MEM>', 'divsd xmm0,xmm1', 'movapd xmm1,xmm0', 'movsd xmm0,<MEM>', 'addsd xmm0,xmm1', 'cvttsd2si rax,xmm0', 'mov edx,eax', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x1', 'mov rdi,rax', 'call <png_set_phys@plt>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', 'js 33469 <gdimagepngctxex+OFFSET>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0xffffffff', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'mov <MEM>,0xffffffff', 'add <MEM>,0x1', 'cmp <MEM>,0xff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'mov edx,<MEM>', 'mov <MEM>,edx', 'add <MEM>,0x1', 'add <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x1', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x4', '<JUMP> <LOC>', 'mov <MEM>,0x2', '<JUMP> <LOC>', 'cmp <MEM>,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x4', '<JUMP> <LOC>', 'mov <MEM>,0x8', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', 'setne al', 'movzx eax,al', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push 0x0', 'push 0x0', 'mov edi,<MEM>', 'push rdi', 'mov r9d,0x6', 'mov r8d,0x8', 'mov rdi,rax', 'call <png_set_ihdr@plt>', 'add rsp,0x20', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push 0x0', 'push 0x0', 'mov edi,<MEM>', 'push rdi', 'mov r9d,0x2', 'mov r8d,0x8', 'mov rdi,rax', 'call <png_set_ihdr@plt>', 'add rsp,0x20', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'sub rsp,0x8', 'push 0x0', 'push 0x0', 'mov edi,<MEM>', 'push rdi', 'mov r9d,0x3', 'mov rdi,rax', 'call <png_set_ihdr@plt>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', 'js 33761 <gdimagepngctxex+OFFSET>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sar eax,0x10', 'movzx eax,al', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sar eax,0x8', 'movzx eax,al', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movzx eax,al', 'mov <MEM>,ax', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov r8,rdx', 'mov ecx,0x0', 'mov edx,0x0', 'mov rdi,rax', 'call <png_set_trns@plt>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x304', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x614', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'add <MEM>,0x1', 'add <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x1', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'sub eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x304', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x614', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x614', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x614', 'mov eax,<MEM>', 'sar eax,0x6', 'add eax,ecx', 'not eax', 'mov edx,eax', 'mov eax,<MEM>', 'cdqe', 'mov <MEM>,dl', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'mov edx,<MEM>', 'movsxd rdx,edx', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'mov edx,<MEM>', 'movsxd rdx,edx', 'mov <MEM>,eax', 'add <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'lea rdx,<MEM>', 'mov r8d,0x0', 'mov rdi,rax', 'call <png_set_trns@plt>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'mov eax,<MEM>', 'test eax,eax', 'js 33a65 <gdimagepngctxex+OFFSET>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x4', 'mov edx,<MEM>', 'mov eax,<MEM>', 'cdqe', 'mov eax,<MEM>', 'mov ecx,edx', 'movsxd rdx,eax', 'mov rax,rdx', 'add rax,rax', 'add rax,rdx', 'lea rbx,<MEM>', 'add rax,rbx', 'sub rax,0x810', 'mov <MEM>,cl', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x104', 'mov edx,<MEM>', 'mov eax,<MEM>', 'cdqe', 'mov eax,<MEM>', 'mov ecx,edx', 'movsxd rdx,eax', 'mov rax,rdx', 'add rax,rax', 'add rax,rdx', 'lea rbx,<MEM>', 'add rax,rbx', 'sub rax,0x80f', 'mov <MEM>,cl', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x204', 'mov edx,<MEM>', 'mov eax,<MEM>', 'cdqe', 'mov eax,<MEM>', 'mov ecx,edx', 'movsxd rdx,eax', 'mov rax,rdx', 'add rax,rax', 'add rax,rdx', 'lea rbx,<MEM>', 'add rax,rbx', 'sub rax,0x80e', 'mov <MEM>,cl', '<JUMP> <LOC>', 'nop', 'add <MEM>,0x1', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x4', 'mov eax,<MEM>', 'mov ecx,eax', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,rdx', 'add rax,rax', 'add rax,rdx', 'lea rbx,<MEM>', 'add rax,rbx', 'sub rax,0x810', 'mov <MEM>,cl', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x104', 'mov eax,<MEM>', 'mov ecx,eax', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,rdx', 'add rax,rax', 'add rax,rdx', 'lea rbx,<MEM>', 'add rax,rbx', 'sub rax,0x80f', 'mov <MEM>,cl', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'add rdx,0x204', 'mov eax,<MEM>', 'mov ecx,eax', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,rdx', 'add rax,rax', 'add rax,rdx', 'lea rbx,<MEM>', 'add rax,rbx', 'sub rax,0x80e', 'mov <MEM>,cl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <png_set_plte@plt>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_info@plt>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <png_set_packing@plt>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x4', '<JUMP> <LOC>', 'mov eax,0x3', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov esi,eax', 'mov edi,0x8', 'call <overflow2>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x3', 'mov rdi,rax', 'call <gdmalloc>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'mov esi,edx', 'mov edi,eax', 'call <overflow2>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'cdqe', 'mov rdi,rax', 'call <gdmalloc>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'sar eax,0x10', 'mov ecx,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'mov eax,<MEM>', 'sar eax,0x8', 'mov ecx,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,<MEM>', 'mov <MEM>,dl', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sar eax,0x18', 'and eax,0x7f', 'mov <MEM>,al', 'movzx eax,<MEM>', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'shr al,0x6', 'lea ecx,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'not ecx', 'mov edx,ecx', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_image@plt>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_end@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov esi,eax', 'mov edi,0x8', 'call <overflow2>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x3', 'mov rdi,rax', 'call <gdmalloc>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'mov edx,<MEM>', 'movsxd rdx,edx', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'lea rbx,<MEM>', 'mov rdi,rax', 'call <gdmalloc>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <gd_error>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'movsxd rdx,edx', 'shl rdx,0x3', 'add rax,rdx', 'mov rdx,<MEM>', 'mov eax,<MEM>', 'cdqe', 'add rax,rdx', 'movzx eax,<MEM>', 'movzx eax,al', 'cdqe', 'mov ecx,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rdx,<MEM>', 'mov eax,<MEM>', 'cdqe', 'add rax,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_image@plt>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_end@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <gdfree@plt>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_image@plt>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_write_end@plt>', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <png_destroy_write_struct@plt>', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'mov rbx,<MEM>', 'leave', 'ret']
2024-04-26 03:45:40.062 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9659252762794495, gdImagePngPtr ---> gdNewDynamicCtx
2024-04-26 03:45:40.062 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8561922907829285, gdImagePngPtrEx ---> gdImagePngPtrEx
2024-04-26 03:45:40.063 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 30 ---> 2
2024-04-26 03:45:40.063 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:45:40.131 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.00027997439610771835, fix prob: 0.99972003698349
2024-04-26 03:45:40.132 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:45:40.132 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:45:40.132 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:45:40.132 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:45:40.133 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 253 CVE-2018-1000222
filter_and_generate_data_items: 100%|██████████| 471/471 [00:00<00:00, 1979.17it/s]
2024-04-26 03:45:46.538 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 471 ---> 90
2024-04-26 03:45:46.541 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gdImageBmpPtr']
2024-04-26 03:45:46.541 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['gdImageBmpPtr']
2024-04-26 03:45:46.542 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gdImageBmpPtr']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.41s/it]
2024-04-26 03:45:48.443 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.833290159702301, gdImageBmpPtr ---> gdImageJpegPtr
2024-04-26 03:45:48.443 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 10 ---> 1
2024-04-26 03:45:48.443 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:45:48.444 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:45:48.444 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:45:48.444 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:45:48.444 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:45:48.444 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:45:48.445 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 254 CVE-2019-6978
filter_and_generate_data_items: 100%|██████████| 1884/1884 [00:00<00:00, 2781.07it/s]
2024-04-26 03:45:55.370 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1884 ---> 352
2024-04-26 03:45:55.371 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gdImageGifPtr', 'gdImageJpegPtr', 'gdImageJpegCtx', 'gdImageWBMPPtr']
2024-04-26 03:45:55.372 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['gdImageGifPtr', 'gdImageJpegPtr', 'gdImageJpegCtx', 'gdImageWBMPPtr']
2024-04-26 03:45:55.372 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gdImageGifPtr', 'gdImageJpegPtr', 'gdImageJpegCtx', 'gdImageWBMPPtr']
confirming functions(batch_size: 128):: 100%|██████████| 3/3 [00:05<00:00,  1.69s/it]
2024-04-26 03:46:04.022 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9858766794204712, gdImageGifPtr ---> gdNewDynamicCtx
2024-04-26 03:46:04.023 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8261148929595947, gdImageJpegPtr ---> gdImageJpegPtr
2024-04-26 03:46:04.023 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9872611463069916, gdImageJpegCtx ---> gdImageBmpCtx
2024-04-26 03:46:04.023 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8075734376907349, gdImageWBMPPtr ---> gdImageJpegPtr
2024-04-26 03:46:04.023 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 42 ---> 4
2024-04-26 03:46:04.023 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:46:04.281 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.9911753244814463, fix prob: 2.008824646472931
2024-04-26 03:46:04.281 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:46:04.281 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:46:04.281 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:46:04.281 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:46:04.282 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 255 CVE-2021-38115
filter_and_generate_data_items: 100%|██████████| 491/491 [00:00<00:00, 1803.67it/s]
2024-04-26 03:46:10.683 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 491 ---> 70
2024-04-26 03:46:10.686 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['read_header_tga']
2024-04-26 03:46:10.687 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['read_header_tga']
2024-04-26 03:46:10.688 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['read_header_tga']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.05s/it]
2024-04-26 03:46:11.872 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9659369587898254, read_header_tga ---> read_header_tga
2024-04-26 03:46:11.873 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:46:11.873 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:46:11.911 | SUCCESS  | __main__:run_tc:491 - vul prob: 2.3642087398911826e-06, fix prob: 0.999997615814209
2024-04-26 03:46:11.911 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:46:11.911 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:46:11.911 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:46:11.912 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:46:11.912 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 256 CVE-2018-1152
filter_and_generate_data_items: 100%|██████████| 633/633 [00:00<00:00, 1443.60it/s]
2024-04-26 03:46:18.499 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 633 ---> 40
2024-04-26 03:46:18.501 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['start_input_bmp']
2024-04-26 03:46:18.501 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['start_input_bmp']
2024-04-26 03:46:18.501 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['start_input_bmp']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.36it/s]
2024-04-26 03:46:20.101 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8830011487007141, start_input_bmp ---> start_input_bmp
2024-04-26 03:46:20.102 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:46:20.109 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:46:20.110 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:46:20.111 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:46:20.111 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:46:20.111 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:46:20.112 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:46:20.112 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 257 CVE-2018-19664
filter_and_generate_data_items: 100%|██████████| 633/633 [00:00<00:00, 1629.56it/s]
2024-04-26 03:46:26.570 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 633 ---> 35
2024-04-26 03:46:26.574 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['jinit_write_bmp']
2024-04-26 03:46:26.575 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['jinit_write_bmp']
2024-04-26 03:46:26.576 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['jinit_write_bmp']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.61it/s]
2024-04-26 03:46:27.882 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9604882001876831, jinit_write_bmp ---> jinit_write_bmp
2024-04-26 03:46:27.882 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 1
2024-04-26 03:46:27.883 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:46:27.924 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.22104805707931519, fix prob: 0.7789519429206848
2024-04-26 03:46:27.924 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:46:27.925 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:46:27.925 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:46:27.925 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:46:27.925 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 258 CVE-2020-13790
filter_and_generate_data_items: 100%|██████████| 52/52 [00:00<00:00, 902.92it/s]
2024-04-26 03:46:34.234 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 52 ---> 15
2024-04-26 03:46:34.236 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['start_input_ppm']
2024-04-26 03:46:34.237 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['start_input_ppm']
2024-04-26 03:46:34.237 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['start_input_ppm']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.34it/s]
2024-04-26 03:46:36.148 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9545454978942871, start_input_ppm ---> start_input_ppm
2024-04-26 03:46:36.148 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 03:46:36.148 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:46:36.189 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.12129489332437515, fix prob: 0.8787050843238831
2024-04-26 03:46:36.189 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:46:36.190 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:46:36.190 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:46:36.190 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:46:36.190 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 259 CVE-2020-35538
filter_and_generate_data_items: 100%|██████████| 4689/4689 [00:01<00:00, 2463.05it/s]
2024-04-26 03:46:44.476 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 4689 ---> 317
2024-04-26 03:46:44.479 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['read_and_discard_scanlines', 'merged_2v_upsample', 'merged_1v_upsample', 'h2v1_merged_upsample_565_internal', 'h2v1_merged_upsample_565D_internal', 'h2v2_merged_upsample_565_internal', 'h2v2_merged_upsample_565D_internal', 'h2v1_merged_upsample_internal', 'h2v2_merged_upsample_internal']
2024-04-26 03:46:44.480 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['read_and_discard_scanlines', 'build_ycc_rgb_table', 'merged_2v_upsample', 'merged_1v_upsample', 'h2v2_merged_upsample_565D']
2024-04-26 03:46:44.480 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['read_and_discard_scanlines', 'merged_2v_upsample', 'merged_1v_upsample']
confirming functions(batch_size: 128):: 100%|██████████| 3/3 [00:04<00:00,  1.55s/it]
2024-04-26 03:46:51.763 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9999005794525146, read_and_discard_scanlines ---> read_and_discard_scanlines
2024-04-26 03:46:51.764 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.36182451248168945, merged_1v_upsample ---> forward_DCT
2024-04-26 03:46:51.764 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5309967398643494, h2v1_merged_upsample_internal ---> quantize3_ord_dither
2024-04-26 03:46:51.764 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.3590904176235199, merged_2v_upsample ---> merged_2v_upsample
2024-04-26 03:46:51.764 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6815305352210999, h2v2_merged_upsample_565D_internal ---> h2v1_merged_upsample_565
2024-04-26 03:46:51.764 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9955766201019287, h2v2_merged_upsample_internal ---> h2v1_merged_upsample_565D
2024-04-26 03:46:51.765 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 9 ---> 6
2024-04-26 03:46:51.765 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:46:51.902 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.9397539921337739, fix prob: 1.0602460354566574
2024-04-26 03:46:51.903 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:46:51.903 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:46:51.903 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:46:51.903 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:46:51.903 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 260 CVE-2021-20205
filter_and_generate_data_items: 100%|██████████| 68/68 [00:00<00:00, 957.34it/s]
2024-04-26 03:46:58.089 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 68 ---> 22
2024-04-26 03:46:58.091 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['start_input_gif']
2024-04-26 03:46:58.091 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['start_input_gif']
2024-04-26 03:46:58.092 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['start_input_gif']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  3.66it/s]
2024-04-26 03:47:01.091 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9616523683071136, start_input_gif ---> start_input_gif
2024-04-26 03:47:01.091 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:47:01.091 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:47:01.221 | SUCCESS  | __main__:run_tc:491 - vul prob: 5.46790422504273e-05, fix prob: 1.9999452829360962
2024-04-26 03:47:01.222 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:01.222 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:01.222 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:47:01.222 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:47:01.222 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 03:47:01.223 | SUCCESS  | __main__:run_experiment:651 - 	total: 260
2024-04-26 03:47:01.223 | SUCCESS  | __main__:run_experiment:652 - over filter count: 21, 8.08%
2024-04-26 03:47:01.223 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 218, 83.85%
2024-04-26 03:47:01.223 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 192, 73.85%
2024-04-26 03:47:01.223 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 151, 58.08%
2024-04-26 03:47:01.223 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 46, 17.69%
2024-04-26 03:47:01.224 | SUCCESS  | __main__:run_experiment:662 - 	tp: 46, fp: 0, tn: 0, fn: 214
2024-04-26 03:47:01.224 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 03:47:01.224 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.17692307692307693
2024-04-26 03:47:01.224 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.3006535947712418
2024-04-26 03:47:01.224 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.17692307692307693
generate_asm_function_cache: 100%|██████████| 13/13 [00:01<00:00, 11.17it/s]
2024-04-26 03:47:07.987 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 03:47:07.988 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 261 CVE-2019-7317
filter_and_generate_data_items: 100%|██████████| 512/512 [00:00<00:00, 2322.11it/s]
2024-04-26 03:47:13.600 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 512 ---> 99
2024-04-26 03:47:13.603 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['png_image_free']
2024-04-26 03:47:13.603 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['png_image_free']
2024-04-26 03:47:13.606 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['png_image_free']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.75s/it]
2024-04-26 03:47:15.393 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.5959116816520691, png_image_free ---> png_image_free
2024-04-26 03:47:15.394 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:47:15.394 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:47:15.394 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:47:15.394 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:15.394 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:15.394 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:47:15.395 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:47:15.395 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 262 CVE-2018-14072
filter_and_generate_data_items: 100%|██████████| 412/412 [00:00<00:00, 2326.63it/s]
2024-04-26 03:47:20.968 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 412 ---> 5
2024-04-26 03:47:20.970 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['sixel_decoder_decode']
2024-04-26 03:47:20.971 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['sixel_decoder_decode']
2024-04-26 03:47:20.971 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['sixel_decoder_decode']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  4.88it/s]
2024-04-26 03:47:21.523 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.712972030043602, sixel_decoder_decode ---> sixel_decoder_decode
2024-04-26 03:47:21.523 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:47:21.523 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:47:21.565 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.7331600189208984, fix prob: 0.26684001088142395
2024-04-26 03:47:21.566 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:21.566 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:21.566 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:21.566 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:47:21.566 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 263 CVE-2019-20205
filter_and_generate_data_items:   0%|          | 0/1245 [00:00<?, ?it/s]2024-04-26 03:47:26.550 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: sixel_frame_init, 1, 6
2024-04-26 03:47:26.551 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['SIXELAPI SIXELSTATUS', 'sixel_frame_init(', ')', '{', 'sixel_frame_ref(frame);', 'frame->pixels = pixels;', 'frame->width = width;', 'frame->height = height;', 'frame->pixelformat = pixelformat;', 'frame->palette = palette;', 'frame->ncolors = ncolors;', 'sixel_frame_unref(frame);', 'return SIXEL_OK;', '}']
2024-04-26 03:47:26.551 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x30', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_ref@plt>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_unref@plt>', 'mov eax,0x0', 'leave', 'ret']
filter_and_generate_data_items:  38%|███▊      | 476/1245 [00:00<00:00, 2409.14it/s]2024-04-26 03:47:26.716 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: sixel_frame_resize, 4, 5
2024-04-26 03:47:26.717 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['SIXELAPI SIXELSTATUS', 'sixel_frame_resize(', 'sixel_frame_t *frame,', 'int width,', 'int height,', 'int method_for_resampling', ')', '{', 'SIXELSTATUS status = SIXEL_FALSE;', 'size_t size;', 'unsigned char *scaled_frame = NULL;', 'sixel_frame_ref(frame);', 'status = sixel_frame_convert_to_rgb888(frame);', 'if (SIXEL_FAILED(status)) {', 'goto end;', '}', 'size = (size_t)(width * height * 3);', 'scaled_frame = (unsigned char *)sixel_allocator_malloc(frame->allocator, size);', 'if (scaled_frame == NULL) {', 'sixel_helper_set_additional_message(', '"STR");', 'status = SIXEL_BAD_ALLOCATION;', 'goto end;', '}', 'status = sixel_helper_scale_image(', 'scaled_frame,', 'frame->pixels,', 'frame->width,', 'frame->height,', '3,', 'width,', 'height,', 'method_for_resampling,', 'frame->allocator);', 'if (SIXEL_FAILED(status)) {', 'goto end;', '}', 'sixel_allocator_free(frame->allocator, frame->pixels);', 'frame->pixels = scaled_frame;', 'frame->width = width;', 'frame->height = height;', 'status = SIXEL_OK;', 'end:', 'sixel_frame_unref(frame);', 'return status;', '}']
2024-04-26 03:47:26.718 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x40', 'mov <MEM>,rdi', 'mov <MEM>,esi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov <MEM>,0x1000', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_ref@plt>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_convert_to_rgb888>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x1000', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,edx', 'add eax,eax', 'add eax,edx', 'cdqe', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <sixel_allocator_malloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <sixel_helper_set_additional_message@plt>', 'mov <MEM>,0x1101', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdi', 'mov edi,<MEM>', 'push rdi', 'mov edi,<MEM>', 'push rdi', 'mov r9d,r8d', 'mov r8d,0x3', 'mov rdi,rax', 'call <sixel_helper_scale_image@plt>', 'add rsp,0x20', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x1000', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <sixel_allocator_free@plt>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_unref@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items:  60%|█████▉    | 741/1245 [00:00<00:00, 2516.97it/s]2024-04-26 03:47:26.862 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: sixel_frame_clip, 5, 6
2024-04-26 03:47:26.863 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['SIXELAPI SIXELSTATUS', 'sixel_frame_clip(', 'sixel_frame_t *frame,', 'int x,', 'int y,', 'int width,', 'int height', ')', '{', 'SIXELSTATUS status = SIXEL_FALSE;', 'unsigned char *normalized_pixels;', 'sixel_frame_ref(frame);', 'switch (frame->pixelformat) {', 'case SIXEL_PIXELFORMAT_PAL1:', 'case SIXEL_PIXELFORMAT_PAL2:', 'case SIXEL_PIXELFORMAT_PAL4:', 'case SIXEL_PIXELFORMAT_G1:', 'case SIXEL_PIXELFORMAT_G2:', 'case SIXEL_PIXELFORMAT_G4:', 'normalized_pixels = (unsigned char *)sixel_allocator_malloc(frame->allocator,', '(size_t)(frame->width * frame->height));', 'status = sixel_helper_normalize_pixelformat(normalized_pixels,', '&frame->pixelformat,', 'frame->pixels,', 'frame->pixelformat,', 'frame->width,', 'frame->height);', 'if (SIXEL_FAILED(status)) {', 'sixel_allocator_free(frame->allocator, normalized_pixels);', 'goto end;', '}', 'sixel_allocator_free(frame->allocator, frame->pixels);', 'frame->pixels = normalized_pixels;', 'break;', 'default:', 'break;', '}', 'status = clip(frame->pixels,', 'frame->width,', 'frame->height,', 'frame->pixelformat,', 'x,', 'y,', 'width,', 'height);', 'if (SIXEL_FAILED(status)) {', 'goto end;', '}', 'frame->width = width;', 'frame->height = height;', 'status = SIXEL_OK;', 'end:', 'sixel_frame_unref(frame);', 'return status;', '}']
2024-04-26 03:47:26.864 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x30', 'mov <MEM>,rdi', 'mov <MEM>,esi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov <MEM>,r8d', 'mov <MEM>,0x1000', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_ref@plt>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x42', '<JUMP> <LOC>', 'cmp eax,0x40', '<JUMP> <LOC>', '<JUMP> <LOC>', 'add eax,0xffffff80', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'imul eax,edx', 'movsxd rdx,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <sixel_allocator_malloc@plt>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'mov edi,<MEM>', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'mov r9d,r8d', 'mov r8d,edi', 'mov rdi,rax', 'call <sixel_helper_normalize_pixelformat@plt>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x1000', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <sixel_allocator_free@plt>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <sixel_allocator_free@plt>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r9d,<MEM>', 'mov r8d,<MEM>', 'mov edi,<MEM>', 'push rdi', 'mov edi,<MEM>', 'push rdi', 'mov rdi,rax', 'call <clip>', 'add rsp,0x10', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x1000', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov rdi,rax', 'call <sixel_frame_unref@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 1245/1245 [00:00<00:00, 2714.01it/s]
2024-04-26 03:47:27.411 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1245 ---> 67
2024-04-26 03:47:27.414 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['sixel_frame_init', 'sixel_frame_resize', 'sixel_frame_clip']
2024-04-26 03:47:27.415 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['sixel_frame_init', 'sixel_frame_convert_to_rgb888', 'sixel_frame_resize', 'sixel_frame_clip']
2024-04-26 03:47:27.415 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.07s/it]
2024-04-26 03:47:29.106 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9829041361808777, sixel_frame_resize ---> sixel_dither_new
2024-04-26 03:47:29.107 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9972604513168335, sixel_frame_clip ---> sixel_frame_resize
2024-04-26 03:47:29.107 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 2
2024-04-26 03:47:29.107 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:47:29.254 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.0487884610792319e-09, fix prob: 2.0
2024-04-26 03:47:29.255 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:29.255 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:29.255 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:47:29.255 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:47:29.255 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 264 CVE-2020-21547
filter_and_generate_data_items: 100%|██████████| 412/412 [00:00<00:00, 1881.78it/s]
2024-04-26 03:47:34.939 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 412 ---> 5
2024-04-26 03:47:34.941 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['sixel_encode_highcolor']
2024-04-26 03:47:34.942 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['sixel_encode_highcolor']
2024-04-26 03:47:34.943 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['sixel_encode_highcolor']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  3.88it/s]
2024-04-26 03:47:36.859 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.989058256149292, sixel_encode_highcolor ---> sixel_encode_highcolor
2024-04-26 03:47:36.859 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:47:36.859 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:47:37.072 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.5711819040589035, fix prob: 2.4288180470466614
2024-04-26 03:47:37.072 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:37.080 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:37.081 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:47:37.081 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:47:37.081 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 265 CVE-2020-21548
filter_and_generate_data_items: 100%|██████████| 414/414 [00:00<00:00, 2189.14it/s]
2024-04-26 03:47:42.768 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 414 ---> 5
2024-04-26 03:47:42.770 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['sixel_encode_highcolor']
2024-04-26 03:47:42.776 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['sixel_encode_highcolor']
2024-04-26 03:47:42.777 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['sixel_encode_highcolor']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  4.78it/s]
2024-04-26 03:47:44.924 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.989058256149292, sixel_encode_highcolor ---> sixel_encode_highcolor
2024-04-26 03:47:44.925 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:47:44.925 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:47:45.136 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.5711819040589035, fix prob: 2.4288180470466614
2024-04-26 03:47:45.136 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:45.137 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:45.137 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:47:45.137 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:47:45.138 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 266 CVE-2017-7585
filter_and_generate_data_items:  17%|█▋        | 147/864 [00:00<00:00, 1462.92it/s]2024-04-26 03:47:50.184 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: flac_read_loop, 1, 2
2024-04-26 03:47:50.185 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static unsigned', 'flac_read_loop (SF_PRIVATE *psf, unsigned len)', '{\tFLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;', 'pflac->pos = 0 ;', 'pflac->len = len ;', 'pflac->remain = len ;', 'if (pflac->frame != NULL && pflac->bufferpos < pflac->frame->header.blocksize)', 'flac_buffer_copy (psf) ;', 'while (pflac->pos < pflac->len)', '{\tif (FLAC__stream_decoder_process_single (pflac->fsd) == 0)', 'break ;', 'if (FLAC__stream_decoder_get_state (pflac->fsd) >= FLAC__STREAM_DECODER_END_OF_STREAM)', 'break ;', '} ;', 'pflac->ptr = NULL ;', 'return pflac->pos ;']
2024-04-26 03:47:50.185 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x20', 'mov <MEM>,rdi', 'mov <MEM>,esi', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <flac_buffer_copy>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <flac__stream_decoder_process_single@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <flac__stream_decoder_get_state@plt>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 864/864 [00:00<00:00, 2093.73it/s]
2024-04-26 03:47:50.980 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 864 ---> 167
2024-04-26 03:47:50.981 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['flac_read_loop']
2024-04-26 03:47:50.982 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['flac_read_loop']
2024-04-26 03:47:50.982 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.20s/it]
2024-04-26 03:47:53.387 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:47:53.387 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:47:53.387 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:47:53.388 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:47:53.388 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:47:53.388 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:47:53.388 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 267 CVE-2017-7586
filter_and_generate_data_items: 100%|██████████| 2592/2592 [00:00<00:00, 2817.21it/s]
2024-04-26 03:47:59.683 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2592 ---> 601
2024-04-26 03:47:59.686 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['sf_open', 'sf_open_fd', 'sf_open_virtual']
2024-04-26 03:47:59.687 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['sf_open', 'sf_open_fd', 'sf_open_virtual']
2024-04-26 03:47:59.687 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['sf_open', 'sf_open_fd', 'sf_open_virtual']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.62s/it]
2024-04-26 03:48:08.174 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9796593189239502, sf_open_virtual ---> sf_open_virtual
2024-04-26 03:48:08.174 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.3341025412082672, sf_open ---> sf_open
2024-04-26 03:48:08.174 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9682183265686035, sf_open_fd ---> sf_open_fd
2024-04-26 03:48:08.174 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 3
2024-04-26 03:48:08.175 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:48:08.318 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.381119430065155, fix prob: 0.618880569934845
2024-04-26 03:48:08.319 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:08.319 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:08.319 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:08.319 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:48:08.319 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 268 CVE-2017-7742
filter_and_generate_data_items:   0%|          | 0/864 [00:00<?, ?it/s]2024-04-26 03:48:13.384 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: flac_read_loop, 1, 2
2024-04-26 03:48:13.385 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static unsigned', 'flac_read_loop (SF_PRIVATE *psf, unsigned len)', '{\tFLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;', 'pflac->pos = 0 ;', 'pflac->len = len ;', 'pflac->remain = len ;', 'if (pflac->frame != NULL && pflac->bufferpos < pflac->frame->header.blocksize)', 'flac_buffer_copy (psf) ;', 'while (pflac->pos < pflac->len)', '{\tif (FLAC__stream_decoder_process_single (pflac->fsd) == 0)', 'break ;', 'if (FLAC__stream_decoder_get_state (pflac->fsd) >= FLAC__STREAM_DECODER_END_OF_STREAM)', 'break ;', '} ;', 'pflac->ptr = NULL ;', 'return pflac->pos ;']
2024-04-26 03:48:13.385 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x20', 'mov <MEM>,rdi', 'mov <MEM>,esi', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <flac_buffer_copy>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <flac__stream_decoder_process_single@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <flac__stream_decoder_get_state@plt>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 864/864 [00:00<00:00, 2692.31it/s]
2024-04-26 03:48:14.049 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 864 ---> 167
2024-04-26 03:48:14.051 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['flac_read_loop']
2024-04-26 03:48:14.052 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['flac_read_loop']
2024-04-26 03:48:14.053 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.18s/it]
2024-04-26 03:48:16.423 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:48:16.423 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:48:16.424 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:16.424 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:16.424 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:48:16.424 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:48:16.424 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 269 CVE-2014-8127
filter_and_generate_data_items: 100%|██████████| 14/14 [00:00<00:00, 548.76it/s]
2024-04-26 03:48:21.930 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 14 ---> 2
2024-04-26 03:48:21.933 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['main']
2024-04-26 03:48:21.933 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['main']
2024-04-26 03:48:21.934 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['main']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00, 11.70it/s]
2024-04-26 03:48:22.918 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8723496794700623, main ---> main
2024-04-26 03:48:22.918 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:48:22.919 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:48:22.919 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:48:22.919 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:22.919 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:22.920 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:48:22.920 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:48:22.920 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 270 CVE-2014-9330
filter_and_generate_data_items: 100%|██████████| 4278/4278 [00:02<00:00, 1826.76it/s]
2024-04-26 03:48:30.659 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 4278 ---> 67
2024-04-26 03:48:30.662 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirectory', 'TIFFRGBAImageOK', 'main', 't2p_read_tiff_init', 't2p_read_tiff_data', 'writeBufferToContigTiles']
2024-04-26 03:48:30.663 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirectory', 'TIFFRGBAImageOK']
2024-04-26 03:48:30.664 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFRGBAImageOK']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.09s/it]
2024-04-26 03:48:32.112 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8215194344520569, TIFFRGBAImageOK ---> TIFFRGBAImageOK
2024-04-26 03:48:32.113 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:48:32.113 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:48:32.113 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:48:32.113 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:32.114 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:32.114 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:48:32.114 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:48:32.114 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 271 CVE-2015-8665
filter_and_generate_data_items: 100%|██████████| 2157/2157 [00:00<00:00, 2400.32it/s]
2024-04-26 03:48:38.513 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2157 ---> 73
2024-04-26 03:48:38.515 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFRGBAImageOK', 'TIFFRGBAImageBegin', 'PickContigCase']
2024-04-26 03:48:38.515 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFRGBAImageOK', 'TIFFRGBAImageBegin', 'PickContigCase']
2024-04-26 03:48:38.515 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFRGBAImageOK', 'TIFFRGBAImageBegin', 'PickContigCase']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.14s/it]
2024-04-26 03:48:39.655 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx PickContigCase PickContigCase	0.9998452663421631	['mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffistiled@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rax,<MEM>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x8', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x8', '<JUMP> <LOC>', 'cmp eax,0x10', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapuatoaa>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapbitdepth16to8>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapbitdepth16to8>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapuatoaa>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapbitdepth16to8>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x8', '<JUMP> <LOC>', 'cmp eax,0x8', '<JUMP> <LOC>', 'cmp eax,0x4', '<JUMP> <LOC>', 'cmp eax,0x4', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x10', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <initycbcrconversion>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov esi,0x212', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfielddefaulted@plt>', 'movzx eax,<MEM>', 'movzx eax,ax', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'movzx eax,ax', 'or eax,edx', 'sub eax,0x11', 'cmp eax,0x33', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <initcielabconversion>', 'mov rdx,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rsi,<MEM>', 'xor rsi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:48:40.995 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.6309941411018372, TIFFRGBAImageOK ---> TIFFRGBAImageOK
2024-04-26 03:48:40.995 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9812554717063904, TIFFRGBAImageBegin ---> gtStripContig
2024-04-26 03:48:40.996 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9613224267959595, TIFFRGBAImageBegin ---> TIFFRGBAImageBegin
2024-04-26 03:48:40.996 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 3
2024-04-26 03:48:40.996 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:48:41.099 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0038586131995543838, fix prob: 1.996141493320465
2024-04-26 03:48:41.100 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:41.100 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:41.100 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:48:41.100 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:48:41.100 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 272 CVE-2015-8683
filter_and_generate_data_items: 100%|██████████| 2157/2157 [00:00<00:00, 2720.85it/s]
2024-04-26 03:48:47.372 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2157 ---> 73
2024-04-26 03:48:47.374 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFRGBAImageOK', 'TIFFRGBAImageBegin', 'PickContigCase']
2024-04-26 03:48:47.375 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFRGBAImageOK', 'TIFFRGBAImageBegin', 'PickContigCase']
2024-04-26 03:48:47.376 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFRGBAImageOK', 'TIFFRGBAImageBegin', 'PickContigCase']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.16s/it]
2024-04-26 03:48:48.549 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx PickContigCase PickContigCase	0.9998452663421631	['mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffistiled@plt>', 'test eax,eax', '<JUMP> <LOC>', 'lea rax,<MEM>', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x8', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x8', '<JUMP> <LOC>', 'cmp eax,0x10', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapuatoaa>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapbitdepth16to8>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapbitdepth16to8>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapuatoaa>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmapbitdepth16to8>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x8', '<JUMP> <LOC>', 'cmp eax,0x8', '<JUMP> <LOC>', 'cmp eax,0x4', '<JUMP> <LOC>', 'cmp eax,0x4', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x10', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <initycbcrconversion>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov esi,0x212', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfielddefaulted@plt>', 'movzx eax,<MEM>', 'movzx eax,ax', 'shl eax,0x4', 'mov edx,eax', 'movzx eax,<MEM>', 'movzx eax,ax', 'or eax,edx', 'sub eax,0x11', 'cmp eax,0x33', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'nop', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <buildmap>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <initcielabconversion>', 'mov rdx,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rsi,<MEM>', 'xor rsi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:48:49.820 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.6309941411018372, TIFFRGBAImageOK ---> TIFFRGBAImageOK
2024-04-26 03:48:49.820 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9812554717063904, TIFFRGBAImageBegin ---> gtStripContig
2024-04-26 03:48:49.820 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9613224267959595, TIFFRGBAImageBegin ---> TIFFRGBAImageBegin
2024-04-26 03:48:49.821 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 3
2024-04-26 03:48:49.821 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:48:49.962 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0038586131995543838, fix prob: 1.996141493320465
2024-04-26 03:48:49.962 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:49.963 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:49.963 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:48:49.963 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:48:49.963 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 273 CVE-2015-8782
filter_and_generate_data_items:  13%|█▎        | 157/1180 [00:00<00:00, 1564.83it/s]2024-04-26 03:48:55.049 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: LogLuvDecode24, 4, 3
2024-04-26 03:48:55.050 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'LogLuvDecode24(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)', '{', 'LogLuvState* sp = DecoderState(tif);', 'int cc, i, npixels;', 'unsigned char* bp;', 'uint32* tp;', 'assert(s == 0);', 'assert(sp != NULL);', 'npixels = occ / sp->pixel_size;', 'if (sp->user_datafmt == SGILOGDATAFMT_RAW)', 'tp = (uint32 *)op;', 'else {', 'assert(sp->tbuflen >= npixels);', 'tp = (uint32 *) sp->tbuf;', '}', 'bp = (unsigned char*) tif->tif_rawcp;', 'cc = tif->tif_rawcc;', 'for (i = 0; i < npixels && cc > 0; i++) {', 'tp[i] = bp[0] << 16 | bp[1] << 8 | bp[2];', 'bp += 3;', 'cc -= 3;', '}', 'tif->tif_rawcp = (tidata_t) bp;', 'tif->tif_rawcc = cc;', 'if (i != npixels) {', 'TIFFErrorExt(tif->tif_clientdata, tif->tif_name,', '"STR",', 'tif->tif_row, npixels - i);', 'return (0);', '}', '(*sp->tfunc)(sp, op, npixels);', 'return (1);', '}']
2024-04-26 03:48:55.051 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0xf8', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0xf9', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov edi,<MEM>', 'mov eax,<MEM>', 'cdq', 'idiv edi', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x100', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'or edx,eax', 'mov eax,<MEM>', 'cdqe', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'add rax,rcx', 'mov <MEM>,edx', 'add <MEM>,0x3', 'sub <MEM>,0x3', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov ecx,eax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8d,ecx', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov edx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items:  59%|█████▉    | 701/1180 [00:00<00:00, 2517.75it/s]2024-04-26 03:48:55.248 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: LogLuvEncode32, 4, 3
2024-04-26 03:48:55.250 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'LogLuvEncode32(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)', '{', 'LogLuvState* sp = EncoderState(tif);', 'int shft, i, j, npixels;', 'tidata_t op;', 'uint32* tp;', 'uint32 b;', 'int occ, rc=0, mask, beg;', 'assert(s == 0);', 'assert(sp != NULL);', 'npixels = cc / sp->pixel_size;', 'if (sp->user_datafmt == SGILOGDATAFMT_RAW)', 'tp = (uint32*) bp;', 'else {', 'tp = (uint32*) sp->tbuf;', 'assert(sp->tbuflen >= npixels);', '(*sp->tfunc)(sp, bp, npixels);', '}', 'op = tif->tif_rawcp;', 'occ = tif->tif_rawdatasize - tif->tif_rawcc;', 'for (shft = 4*8; (shft -= 8) >= 0; )', 'for (i = 0; i < npixels; i += rc) {', 'if (occ < 4) {', 'tif->tif_rawcp = op;', 'tif->tif_rawcc = tif->tif_rawdatasize - occ;', 'if (!TIFFFlushData1(tif))', 'return (-1);', 'op = tif->tif_rawcp;', 'occ = tif->tif_rawdatasize - tif->tif_rawcc;', '}', 'for (beg = i; beg < npixels; beg += rc) {', 'b = tp[beg] & mask;', 'rc = 1;', 'while (rc < 127+2 && beg+rc < npixels &&', '(tp[beg+rc] & mask) == b)', 'rc++;', 'if (rc >= MINRUN)', '}', 'if (beg-i > 1 && beg-i < MINRUN) {', 'j = i+1;', 'while ((tp[j++] & mask) == b)', 'if (j == beg) {', '*op++ = (tidataval_t)(128-2+j-i);', '*op++ = (tidataval_t)(b >> shft);', 'occ -= 2;', 'i = beg;', 'break;', '}', '}', 'if ((j = beg-i) > 127) j = 127;', 'if (occ < j+3) {', 'tif->tif_rawcp = op;', 'tif->tif_rawcc = tif->tif_rawdatasize - occ;', 'if (!TIFFFlushData1(tif))', 'return (-1);', 'op = tif->tif_rawcp;', 'occ = tif->tif_rawdatasize - tif->tif_rawcc;', '}', '*op++ = (tidataval_t) j; occ--;', 'while (j--) {', '*op++ = (tidataval_t)(tp[i++] >> shft & 0xff);', 'occ--;', '}', '}', '*op++ = (tidataval_t) (128-2+rc);', '*op++ = (tidataval_t)(tp[beg] >> shft & 0xff);', 'occ -= 2;', '} else', 'rc = 0;', '}', 'tif->tif_rawcp = op;', 'tif->tif_rawcc = tif->tif_rawdatasize - occ;', 'return (1);', '}']
2024-04-26 03:48:55.251 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x60', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x203', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x204', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov esi,<MEM>', 'mov eax,<MEM>', 'cdq', 'idiv esi', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x20c', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov edx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub edx,eax', 'mov eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x20', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffflushdata1@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub edx,eax', 'mov eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov edx,0xff', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'add <MEM>,0x1', 'cmp <MEM>,0x80', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'mov eax,<MEM>', 'sub eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'mov ecx,edx', 'sub ecx,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'lea edx,<MEM>', 'mov <MEM>,dl', 'mov eax,<MEM>', 'mov edx,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov ecx,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'sub <MEM>,0x2', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x7f', '<JUMP> <LOC>', 'mov <MEM>,0x7f', 'mov eax,<MEM>', 'add eax,0x2', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffflushdata1@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub edx,eax', 'mov eax,edx', 'mov <MEM>,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov ecx,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'sub <MEM>,0x1', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov ecx,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'lea edx,<MEM>', 'mov <MEM>,dl', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov ecx,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'sub <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'add <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', 'jns 34f25 <logluvencode32+OFFSET>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 1180/1180 [00:00<00:00, 2660.39it/s]
2024-04-26 03:48:55.802 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1180 ---> 53
2024-04-26 03:48:55.804 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['LogLuvDecode24', 'LogLuvEncode32']
2024-04-26 03:48:55.804 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['LogLuvDecode24', 'LogLuvEncode32']
2024-04-26 03:48:55.804 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.14it/s]
2024-04-26 03:48:57.726 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7991098165512085, LogLuvDecode24 ---> TIFFFetchDirectory
2024-04-26 03:48:57.727 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8330267667770386, LogLuvEncode32 ---> TIFFFetchDirectory
2024-04-26 03:48:57.727 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 2
2024-04-26 03:48:57.727 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:48:57.728 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:48:57.728 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:48:57.728 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:48:57.728 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:48:57.728 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:48:57.729 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 274 CVE-2015-8783
filter_and_generate_data_items:  16%|█▌        | 183/1180 [00:00<00:00, 1821.71it/s]2024-04-26 03:49:02.862 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: LogLuvDecode24, 4, 3
2024-04-26 03:49:02.863 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'LogLuvDecode24(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)', '{', 'LogLuvState* sp = DecoderState(tif);', 'int cc, i, npixels;', 'unsigned char* bp;', 'uint32* tp;', 'assert(s == 0);', 'assert(sp != NULL);', 'npixels = occ / sp->pixel_size;', 'if (sp->user_datafmt == SGILOGDATAFMT_RAW)', 'tp = (uint32 *)op;', 'else {', 'assert(sp->tbuflen >= npixels);', 'tp = (uint32 *) sp->tbuf;', '}', 'bp = (unsigned char*) tif->tif_rawcp;', 'cc = tif->tif_rawcc;', 'for (i = 0; i < npixels && cc > 0; i++) {', 'tp[i] = bp[0] << 16 | bp[1] << 8 | bp[2];', 'bp += 3;', 'cc -= 3;', '}', 'tif->tif_rawcp = (tidata_t) bp;', 'tif->tif_rawcc = cc;', 'if (i != npixels) {', 'TIFFErrorExt(tif->tif_clientdata, tif->tif_name,', '"STR",', 'tif->tif_row, npixels - i);', 'return (0);', '}', '(*sp->tfunc)(sp, op, npixels);', 'return (1);', '}']
2024-04-26 03:49:02.864 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0xf8', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0xf9', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov edi,<MEM>', 'mov eax,<MEM>', 'cdq', 'idiv edi', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x100', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'or edx,eax', 'mov eax,<MEM>', 'cdqe', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'add rax,rcx', 'mov <MEM>,edx', 'add <MEM>,0x3', 'sub <MEM>,0x3', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov <MEM>,edx', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov ecx,eax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8d,ecx', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov edx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items:  64%|██████▍   | 759/1180 [00:00<00:00, 2662.09it/s]2024-04-26 03:49:03.056 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: LogLuvEncode32, 4, 3
2024-04-26 03:49:03.057 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'LogLuvEncode32(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)', '{', 'LogLuvState* sp = EncoderState(tif);', 'int shft, i, j, npixels;', 'tidata_t op;', 'uint32* tp;', 'uint32 b;', 'int occ, rc=0, mask, beg;', 'assert(s == 0);', 'assert(sp != NULL);', 'npixels = cc / sp->pixel_size;', 'if (sp->user_datafmt == SGILOGDATAFMT_RAW)', 'tp = (uint32*) bp;', 'else {', 'tp = (uint32*) sp->tbuf;', 'assert(sp->tbuflen >= npixels);', '(*sp->tfunc)(sp, bp, npixels);', '}', 'op = tif->tif_rawcp;', 'occ = tif->tif_rawdatasize - tif->tif_rawcc;', 'for (shft = 4*8; (shft -= 8) >= 0; )', 'for (i = 0; i < npixels; i += rc) {', 'if (occ < 4) {', 'tif->tif_rawcp = op;', 'tif->tif_rawcc = tif->tif_rawdatasize - occ;', 'if (!TIFFFlushData1(tif))', 'return (-1);', 'op = tif->tif_rawcp;', 'occ = tif->tif_rawdatasize - tif->tif_rawcc;', '}', 'for (beg = i; beg < npixels; beg += rc) {', 'b = tp[beg] & mask;', 'rc = 1;', 'while (rc < 127+2 && beg+rc < npixels &&', '(tp[beg+rc] & mask) == b)', 'rc++;', 'if (rc >= MINRUN)', '}', 'if (beg-i > 1 && beg-i < MINRUN) {', 'j = i+1;', 'while ((tp[j++] & mask) == b)', 'if (j == beg) {', '*op++ = (tidataval_t)(128-2+j-i);', '*op++ = (tidataval_t)(b >> shft);', 'occ -= 2;', 'i = beg;', 'break;', '}', '}', 'if ((j = beg-i) > 127) j = 127;', 'if (occ < j+3) {', 'tif->tif_rawcp = op;', 'tif->tif_rawcc = tif->tif_rawdatasize - occ;', 'if (!TIFFFlushData1(tif))', 'return (-1);', 'op = tif->tif_rawcp;', 'occ = tif->tif_rawdatasize - tif->tif_rawcc;', '}', '*op++ = (tidataval_t) j; occ--;', 'while (j--) {', '*op++ = (tidataval_t)(tp[i++] >> shft & 0xff);', 'occ--;', '}', '}', '*op++ = (tidataval_t) (128-2+rc);', '*op++ = (tidataval_t)(tp[beg] >> shft & 0xff);', 'occ -= 2;', '} else', 'rc = 0;', '}', 'tif->tif_rawcp = op;', 'tif->tif_rawcc = tif->tif_rawdatasize - occ;', 'return (1);', '}']
2024-04-26 03:49:03.058 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x60', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x203', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x204', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov esi,<MEM>', 'mov eax,<MEM>', 'cdq', 'idiv esi', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'lea rcx,<MEM>', 'mov edx,0x20c', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'call <__assert_fail@plt>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov edx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call r8', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub edx,eax', 'mov eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x20', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffflushdata1@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub edx,eax', 'mov eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov edx,0xff', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'add <MEM>,0x1', 'cmp <MEM>,0x80', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'nop', 'mov eax,<MEM>', 'sub eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'mov ecx,edx', 'sub ecx,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'lea edx,<MEM>', 'mov <MEM>,dl', 'mov eax,<MEM>', 'mov edx,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov ecx,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'sub <MEM>,0x2', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'and eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x7f', '<JUMP> <LOC>', 'mov <MEM>,0x7f', 'mov eax,<MEM>', 'add eax,0x2', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffflushdata1@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub edx,eax', 'mov eax,edx', 'mov <MEM>,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov ecx,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'sub <MEM>,0x1', 'mov eax,<MEM>', 'lea edx,<MEM>', 'mov <MEM>,edx', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov ecx,eax', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'lea edx,<MEM>', 'mov <MEM>,dl', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov ecx,edx', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'mov edx,ecx', 'mov <MEM>,dl', 'sub <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'add <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', 'jns 34f25 <logluvencode32+OFFSET>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 1180/1180 [00:00<00:00, 2915.86it/s]
2024-04-26 03:49:03.580 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1180 ---> 53
2024-04-26 03:49:03.583 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['LogLuvDecode24', 'LogLuvEncode32']
2024-04-26 03:49:03.584 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['LogLuvDecode24', 'LogLuvEncode32']
2024-04-26 03:49:03.585 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.28it/s]
2024-04-26 03:49:05.446 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7991098165512085, LogLuvDecode24 ---> TIFFFetchDirectory
2024-04-26 03:49:05.446 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8330267667770386, LogLuvEncode32 ---> TIFFFetchDirectory
2024-04-26 03:49:05.446 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 2
2024-04-26 03:49:05.446 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:49:05.447 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:49:05.447 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:05.447 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:05.447 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:49:05.447 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:05.448 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 275 CVE-2016-10271
filter_and_generate_data_items: 100%|██████████| 80/80 [00:00<00:00, 1046.79it/s]
2024-04-26 03:49:10.919 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 80 ---> 6
2024-04-26 03:49:10.922 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['readContigStripsIntoBuffer']
2024-04-26 03:49:10.922 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['readContigStripsIntoBuffer']
2024-04-26 03:49:10.923 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['readContigStripsIntoBuffer']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  3.45it/s]
2024-04-26 03:49:11.398 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.19152390956878662, readContigStripsIntoBuffer ---> readContigStripsIntoBuffer
2024-04-26 03:49:11.398 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:49:11.398 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:49:11.399 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:49:11.399 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:11.399 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:11.399 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:49:11.399 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:11.399 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 276 CVE-2016-10272
filter_and_generate_data_items: 100%|██████████| 80/80 [00:00<00:00, 987.94it/s]
2024-04-26 03:49:16.892 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 80 ---> 6
2024-04-26 03:49:16.895 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['readContigStripsIntoBuffer']
2024-04-26 03:49:16.895 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['readContigStripsIntoBuffer']
2024-04-26 03:49:16.897 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['readContigStripsIntoBuffer']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  8.31it/s]
2024-04-26 03:49:17.121 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.19152390956878662, readContigStripsIntoBuffer ---> readContigStripsIntoBuffer
2024-04-26 03:49:17.122 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:49:17.122 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:49:17.123 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:49:17.123 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:17.123 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:17.124 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:49:17.124 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:17.124 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 277 CVE-2016-10371
filter_and_generate_data_items: 100%|██████████| 80/80 [00:00<00:00, 906.11it/s]
2024-04-26 03:49:22.614 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 80 ---> 11
2024-04-26 03:49:22.617 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['writeCroppedImage']
2024-04-26 03:49:22.617 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['writeCroppedImage']
2024-04-26 03:49:22.618 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['writeCroppedImage']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.41it/s]
2024-04-26 03:49:24.753 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.5863169431686401, writeCroppedImage ---> writeCroppedImage
2024-04-26 03:49:24.753 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:49:24.753 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:49:24.754 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:49:24.754 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:24.755 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:24.755 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:49:24.755 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:24.756 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 278 CVE-2016-3622
filter_and_generate_data_items: 100%|██████████| 590/590 [00:00<00:00, 2278.33it/s]
2024-04-26 03:49:30.406 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 590 ---> 106
2024-04-26 03:49:30.409 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['PredictorSetup']
2024-04-26 03:49:30.410 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['PredictorSetup']
2024-04-26 03:49:30.410 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PredictorSetup']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.66s/it]
2024-04-26 03:49:36.942 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9619190096855164, PredictorSetup ---> TIFFReadDirectory
2024-04-26 03:49:36.943 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 13 ---> 1
2024-04-26 03:49:36.943 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:49:37.016 | SUCCESS  | __main__:run_tc:491 - vul prob: 2.278773536090739e-06, fix prob: 0.9999977350234985
2024-04-26 03:49:37.016 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:37.016 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:37.017 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:49:37.017 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:37.017 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 279 CVE-2016-3623
filter_and_generate_data_items: 100%|██████████| 14/14 [00:00<00:00, 593.96it/s]
2024-04-26 03:49:42.450 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 14 ---> 2
2024-04-26 03:49:42.452 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['main']
2024-04-26 03:49:42.453 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['main']
2024-04-26 03:49:42.453 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['main']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00, 11.82it/s]
2024-04-26 03:49:42.835 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.756197988986969, main ---> main
2024-04-26 03:49:42.836 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:49:42.836 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:49:42.836 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:49:42.836 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:42.837 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:42.837 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:49:42.837 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:42.837 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 280 CVE-2016-3632
filter_and_generate_data_items: 100%|██████████| 719/719 [00:00<00:00, 726.59it/s]
2024-04-26 03:49:49.302 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 719 ---> 0
2024-04-26 03:49:49.304 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirectory']
2024-04-26 03:49:49.304 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirectory']
2024-04-26 03:49:49.304 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
2024-04-26 03:49:49.305 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:49:49.305 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:49:49.306 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:49:49.306 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:49:49.306 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:49:49.306 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:49:49.306 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 03:49:49.306 | SUCCESS  | __main__:run_experiment:651 - 	total: 280
2024-04-26 03:49:49.307 | SUCCESS  | __main__:run_experiment:652 - over filter count: 27, 9.64%
2024-04-26 03:49:49.307 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 232, 82.86%
2024-04-26 03:49:49.307 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 205, 73.21%
2024-04-26 03:49:49.307 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 162, 57.86%
2024-04-26 03:49:49.307 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 48, 17.14%
2024-04-26 03:49:49.307 | SUCCESS  | __main__:run_experiment:662 - 	tp: 48, fp: 0, tn: 0, fn: 232
2024-04-26 03:49:49.308 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 03:49:49.308 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.17142857142857143
2024-04-26 03:49:49.308 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.2926829268292683
2024-04-26 03:49:49.308 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.17142857142857143
confirming functions(batch_size: 128):: 0it [00:00, ?it/s]
generate_asm_function_cache: 100%|██████████| 7/7 [00:01<00:00,  6.33it/s]
2024-04-26 03:49:54.939 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 03:49:54.940 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 281 CVE-2016-3990
filter_and_generate_data_items:  96%|█████████▋| 1386/1438 [00:00<00:00, 3131.68it/s]2024-04-26 03:49:59.909 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: PixarLogEncode, 4, 3
2024-04-26 03:49:59.910 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'PixarLogEncode(TIFF* tif, uint8* bp, tmsize_t cc, uint16 s)', '{', 'static const char module[] = "STR";', 'TIFFDirectory *td = &tif->tif_dir;', 'PixarLogState *sp = EncoderState(tif);', 'tmsize_t i;', 'tmsize_t n;', 'int llen;', 'unsigned short * up;', '(void) s;', 'switch (sp->user_datafmt) {', 'case PIXARLOGDATAFMT_FLOAT:', 'break;', 'case PIXARLOGDATAFMT_16BIT:', 'case PIXARLOGDATAFMT_12BITPICIO:', 'case PIXARLOGDATAFMT_11BITLOG:', 'break;', 'case PIXARLOGDATAFMT_8BIT:', 'case PIXARLOGDATAFMT_8BITABGR:', 'n = cc;', 'break;', 'default:', 'TIFFErrorExt(tif->tif_clientdata, module,', '"STR",', 'td->td_bitspersample);', 'return 0;', '}', 'llen = sp->stride * td->td_imagewidth;', 'for (i = 0, up = sp->tbuf; i < n; i += llen, up += llen) {', 'switch (sp->user_datafmt)  {', 'case PIXARLOGDATAFMT_FLOAT:', 'horizontalDifferenceF((float *)bp, llen,', 'sp->stride, up, sp->FromLT2);', 'bp += llen * sizeof(float);', 'break;', 'case PIXARLOGDATAFMT_16BIT:', 'horizontalDifference16((uint16 *)bp, llen,', 'sp->stride, up, sp->From14);', 'bp += llen * sizeof(uint16);', 'break;', 'case PIXARLOGDATAFMT_8BIT:', 'horizontalDifference8((unsigned char *)bp, llen,', 'sp->stride, up, sp->From8);', 'bp += llen * sizeof(unsigned char);', 'break;', 'default:', 'TIFFErrorExt(tif->tif_clientdata, module,', '"STR",', 'td->td_bitspersample);', 'return 0;', '}', '}', 'sp->stream.next_in = (unsigned char *) sp->tbuf;', 'assert(sizeof(sp->stream.avail_in)==4);  /* if this assert gets raised,', 'we need to simplify this code to reflect a ZLib that is likely updated', 'to deal with 8byte memory sizes, though this code will respond', 'sp->stream.avail_in = (uInt) (n * sizeof(uint16));', 'if ((sp->stream.avail_in / sizeof(uint16)) != (uInt) n)', '{', 'TIFFErrorExt(tif->tif_clientdata, module,', '"STR");', 'return (0);', '}', 'do {', 'if (deflate(&sp->stream, Z_NO_FLUSH) != Z_OK) {', 'TIFFErrorExt(tif->tif_clientdata, module, "STR",', 'sp->stream.msg);', 'return (0);', '}', 'if (sp->stream.avail_out == 0) {', 'tif->tif_rawcc = tif->tif_rawdatasize;', 'TIFFFlushData1(tif);', 'sp->stream.next_out = tif->tif_rawdata;', '}', '} while (sp->stream.avail_in > 0);', 'return (1);', '}']
2024-04-26 03:49:59.911 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'add rax,0x38', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x5', '<JUMP> <LOC>', 'cmp eax,0x5', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'test eax,eax', 'jns 5548a <pixarlogencode+OFFSET>', '<JUMP> <LOC>', 'sub eax,0x2', 'cmp eax,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x2', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,1', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,ax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,ax', 'mov rax,<MEM>', 'mov eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x5', '<JUMP> <LOC>', 'cmp eax,0x5', '<JUMP> <LOC>', 'test eax,eax', '<JUMP> <LOC>', 'cmp eax,0x4', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,ax', 'mov rcx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call <horizontaldifferencef>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x2', 'add <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,ax', 'mov rcx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call <horizontaldifference16>', 'mov eax,<MEM>', 'cdqe', 'add rax,rax', 'add <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,ax', 'mov rcx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call <horizontaldifference8>', 'mov eax,<MEM>', 'cdqe', 'add <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,ax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'add <MEM>,rax', 'mov eax,<MEM>', 'cdqe', 'add rax,rax', 'add <MEM>,rax', 'mov rax,<MEM>', 'cmp rax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'lea edx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'shr eax,1', 'mov edx,eax', 'mov rax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,0xffffffffffffff80', 'mov esi,0x0', 'mov rdi,rax', 'call <deflate@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffflushdata1@plt>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 1438/1438 [00:00<00:00, 2764.37it/s]
2024-04-26 03:50:00.343 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1438 ---> 163
2024-04-26 03:50:00.346 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['PixarLogSetupEncode', 'PixarLogEncode']
2024-04-26 03:50:00.346 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['PixarLogSetupEncode', 'PixarLogEncode']
2024-04-26 03:50:00.347 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PixarLogSetupEncode']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.57s/it]
2024-04-26 03:50:05.586 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9313146471977234, PixarLogSetupEncode ---> PixarLogSetupEncode
2024-04-26 03:50:05.587 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.36845484375953674, PixarLogEncode ---> TIFFComputeTile
2024-04-26 03:50:05.587 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 8 ---> 2
2024-04-26 03:50:05.587 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:50:05.626 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.019755495712161064, fix prob: 0.980244517326355
2024-04-26 03:50:05.627 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:05.627 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:05.627 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:50:05.627 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:50:05.628 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 282 CVE-2016-5314
filter_and_generate_data_items: 100%|██████████| 590/590 [00:00<00:00, 2462.40it/s]
2024-04-26 03:50:10.776 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 590 ---> 118
2024-04-26 03:50:10.779 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['PixarLogSetupDecode']
2024-04-26 03:50:10.785 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['horizontalAccumulate8abgr', 'PixarLogSetupDecode']
2024-04-26 03:50:10.785 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PixarLogSetupDecode']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.54s/it]
2024-04-26 03:50:14.443 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8814170360565186, PixarLogSetupDecode ---> PixarLogSetupEncode
2024-04-26 03:50:14.444 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 11 ---> 1
2024-04-26 03:50:14.444 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:50:14.444 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:50:14.444 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:14.445 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:14.445 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:50:14.445 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:50:14.445 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 283 CVE-2016-5315
filter_and_generate_data_items: 100%|██████████| 590/590 [00:00<00:00, 2159.80it/s]
2024-04-26 03:50:19.734 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 590 ---> 118
2024-04-26 03:50:19.736 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['PixarLogSetupDecode']
2024-04-26 03:50:19.737 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['horizontalAccumulate8abgr', 'PixarLogSetupDecode']
2024-04-26 03:50:19.737 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PixarLogSetupDecode']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.59s/it]
2024-04-26 03:50:23.399 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8814170360565186, PixarLogSetupDecode ---> PixarLogSetupEncode
2024-04-26 03:50:23.399 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 11 ---> 1
2024-04-26 03:50:23.399 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:50:23.400 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:50:23.400 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:23.400 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:23.400 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:50:23.400 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:50:23.401 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 284 CVE-2016-5317
filter_and_generate_data_items: 100%|██████████| 590/590 [00:00<00:00, 2258.63it/s]
2024-04-26 03:50:28.653 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 590 ---> 118
2024-04-26 03:50:28.656 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['PixarLogSetupDecode']
2024-04-26 03:50:28.656 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['horizontalAccumulate8abgr', 'PixarLogSetupDecode']
2024-04-26 03:50:28.657 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PixarLogSetupDecode']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.69s/it]
2024-04-26 03:50:32.392 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8814170360565186, PixarLogSetupDecode ---> PixarLogSetupEncode
2024-04-26 03:50:32.393 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 11 ---> 1
2024-04-26 03:50:32.393 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:50:32.393 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:50:32.393 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:32.393 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:32.394 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:50:32.394 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:50:32.394 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 285 CVE-2016-5318
filter_and_generate_data_items: 100%|██████████| 719/719 [00:00<00:00, 779.69it/s]
2024-04-26 03:50:38.200 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 719 ---> 0
2024-04-26 03:50:38.203 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirectory']
2024-04-26 03:50:38.204 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirectory']
2024-04-26 03:50:38.204 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
2024-04-26 03:50:38.206 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:50:38.207 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:50:38.208 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:38.208 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:38.209 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:50:38.209 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:50:38.210 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 286 CVE-2016-5323
confirming functions(batch_size: 128):: 0it [00:00, ?it/s]
filter_and_generate_data_items:   0%|          | 0/640 [00:00<?, ?it/s]2024-04-26 03:50:42.776 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: combineSeparateSamples8bits, 6, 4
2024-04-26 03:50:42.778 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'combineSeparateSamples8bits (uint8 *in[], uint8 *out, uint32 cols,', 'uint32 rows, uint16 spp, uint16 bps,', 'FILE *dumpfile, int format, int level)', '{', 'int    ready_bits = 0;', 'int    bytes_per_sample = 0;', 'uint32 src_rowsize, dst_rowsize, src_offset;', 'uint32 bit_offset;', 'uint32 row, col, src_byte = 0, src_bit = 0;', 'uint8  maskbits = 0, matchbits = 0;', 'uint8  buff1 = 0, buff2 = 0;', 'tsample_t s;', 'unsigned char *src = in[0];', 'unsigned char *dst = out;', 'char           action[32];', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'src_rowsize = ((bps * cols) + 7) / 8;', 'dst_rowsize = ((bps * cols * spp) + 7) / 8;', 'maskbits =  (uint8)-1 >> ( 8 - bps);', 'for (row = 0; row < rows; row++)', '{', 'ready_bits = 0;', 'buff1 = buff2 = 0;', 'dst = out + (row * dst_rowsize);', 'src_offset = row * src_rowsize;', 'for (col = 0; col < cols; col++)', '{', 'bit_offset = col * bps;', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', 'matchbits = maskbits << (8 - src_bit - bps);', 'for (s = 0; s < spp; s++)', '{', 'src = in[s] + src_offset + src_byte;', 'buff1 = ((*src) & matchbits) << (src_bit);', 'if (ready_bits >= 8)', '{', '*dst++ = buff2;', 'buff2 = buff1;', 'ready_bits -= 8;', 'strcpy (action, "STR");', '}', 'else', '{', 'buff2 = (buff2 | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'ready_bits += bps;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, s, src_byte, src_bit, dst - out);', 'dump_byte (dumpfile, format, "STR", matchbits);', 'dump_byte (dumpfile, format, "STR", *src);', 'dump_byte (dumpfile, format, "STR", buff1);', 'dump_byte (dumpfile, format, "STR", buff2);', 'dump_info (dumpfile, format, "STR","STR", action);', '}', '}', '}', 'if (ready_bits > 0)', '{', 'buff1 = (buff2 & ((unsigned int)255 << (8 - ready_bits)));', '*dst++ = buff1;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, src_byte, src_bit, dst - out);', 'dump_byte (dumpfile, format, "STR", buff1);', '}', '}', 'if ((dumpfile != NULL) && (level >= 2))', '{', 'dump_info (dumpfile, format, "STR","STR");', 'dump_buffer(dumpfile, format, 1, dst_rowsize, row, out + (row * dst_rowsize));', '}', '}', 'return (0);']
2024-04-26 03:50:42.778 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0xa0', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov edx,r8d', 'mov eax,r9d', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x8', 'sub edx,eax', 'mov eax,edx', 'mov edx,0xff', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov <MEM>,al', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx ecx,<MEM>', 'mov eax,<MEM>', 'add eax,ecx', 'mov ecx,0x8', 'sub ecx,eax', 'mov eax,ecx', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,al', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'and al,<MEM>', 'movzx edx,al', 'mov eax,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,al', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'movzx eax,<MEM>', 'mov <MEM>,al', 'sub <MEM>,0x8', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov edx,eax', 'movzx eax,<MEM>', 'or eax,edx', 'mov <MEM>,al', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'lea rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8,rdx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x8', 'sub eax,<MEM>', 'mov edx,0xff', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'and al,<MEM>', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items:  16%|█▌        | 101/640 [00:00<00:00, 968.04it/s]2024-04-26 03:50:42.850 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: combineSeparateSamples16bits, 6, 4
2024-04-26 03:50:42.851 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'combineSeparateSamples16bits (uint8 *in[], uint8 *out, uint32 cols,', 'uint32 rows, uint16 spp, uint16 bps,', 'FILE *dumpfile, int format, int level)', '{', 'int    ready_bits = 0, bytes_per_sample = 0;', 'uint32 src_rowsize, dst_rowsize;', 'uint32 bit_offset, src_offset;', 'uint32 row, col, src_byte = 0, src_bit = 0;', 'uint16 maskbits = 0, matchbits = 0;', 'uint16 buff1 = 0, buff2 = 0;', 'uint8  bytebuff = 0;', 'tsample_t s;', 'unsigned char *src = in[0];', 'unsigned char *dst = out;', 'char           action[8];', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'src_rowsize = ((bps * cols) + 7) / 8;', 'dst_rowsize = ((bps * cols * spp) + 7) / 8;', 'maskbits = (uint16)-1 >> (16 - bps);', 'for (row = 0; row < rows; row++)', '{', 'ready_bits = 0;', 'buff1 = buff2 = 0;', 'dst = out + (row * dst_rowsize);', 'src_offset = row * src_rowsize;', 'for (col = 0; col < cols; col++)', '{', 'bit_offset = col * bps;', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', 'matchbits = maskbits << (16 - src_bit - bps);', 'for (s = 0; s < spp; s++)', '{', 'src = in[s] + src_offset + src_byte;', 'if (little_endian)', 'buff1 = (src[0] << 8) | src[1];', 'else', 'buff1 = (src[1] << 8) | src[0];', 'buff1 = (buff1 & matchbits) << (src_bit);', 'if (ready_bits >= 8)', '{', 'bytebuff = (buff2 >> 8);', '*dst++ = bytebuff;', 'ready_bits -= 8;', 'buff2 = ((buff2 << 8) | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'else', 'bytebuff = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'ready_bits += bps;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, s, src_byte, src_bit, dst - out);', 'dump_short (dumpfile, format, "STR", matchbits);', 'dump_data  (dumpfile, format, "STR", src, 2);', 'dump_short (dumpfile, format, "STR", buff1);', 'dump_short (dumpfile, format, "STR", buff2);', 'dump_byte  (dumpfile, format, "STR", bytebuff);', 'dump_info  (dumpfile, format, "STR","STR", ready_bits, action);', '}', '}', '}', 'if (ready_bits > 0)', '{', 'bytebuff = (buff2 >> 8);', '*dst++ = bytebuff;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, src_byte, src_bit, dst - out);', 'dump_byte (dumpfile, format, "STR", bytebuff);', '}', '}', 'if ((dumpfile != NULL) && (level == 2))', '{', 'dump_info (dumpfile, format, "STR","STR");', 'dump_buffer(dumpfile, format, 1, dst_rowsize, row, out + (row * dst_rowsize));', '}', '}', 'return (0);']
2024-04-26 03:50:42.852 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov edx,r8d', 'mov eax,r9d', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x10', 'sub edx,eax', 'mov eax,edx', 'mov edx,0xffff', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,ax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx ecx,<MEM>', 'mov eax,<MEM>', 'add eax,ecx', 'mov ecx,0x10', 'sub ecx,eax', 'mov eax,ecx', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,ax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'mov edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'and ax,<MEM>', 'movzx edx,ax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,ax', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr ax,0x8', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x8', 'movzx eax,<MEM>', 'shl eax,0x8', 'mov esi,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'or eax,esi', 'mov <MEM>,ax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov edx,eax', 'movzx eax,<MEM>', 'or eax,edx', 'mov <MEM>,ax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_short>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x2', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_short>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_short>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr ax,0x8', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:50:42.916 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: combineSeparateSamples24bits, 6, 4
2024-04-26 03:50:42.917 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'combineSeparateSamples24bits (uint8 *in[], uint8 *out, uint32 cols,', 'uint32 rows, uint16 spp, uint16 bps,', 'FILE *dumpfile, int format, int level)', '{', 'int    ready_bits = 0, bytes_per_sample = 0;', 'uint32 src_rowsize, dst_rowsize;', 'uint32 bit_offset, src_offset;', 'uint32 row, col, src_byte = 0, src_bit = 0;', 'uint32 maskbits = 0, matchbits = 0;', 'uint32 buff1 = 0, buff2 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0;', 'tsample_t s;', 'unsigned char *src = in[0];', 'unsigned char *dst = out;', 'char           action[8];', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'src_rowsize = ((bps * cols) + 7) / 8;', 'dst_rowsize = ((bps * cols * spp) + 7) / 8;', 'maskbits =  (uint32)-1 >> ( 32 - bps);', 'for (row = 0; row < rows; row++)', '{', 'ready_bits = 0;', 'buff1 = buff2 = 0;', 'dst = out + (row * dst_rowsize);', 'src_offset = row * src_rowsize;', 'for (col = 0; col < cols; col++)', '{', 'bit_offset = col * bps;', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', 'matchbits = maskbits << (32 - src_bit - bps);', 'for (s = 0; s < spp; s++)', '{', 'src = in[s] + src_offset + src_byte;', 'if (little_endian)', 'buff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'else', 'buff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'buff1 = (buff1 & matchbits) << (src_bit);', 'if (ready_bits >= 16)', '{', 'bytebuff1 = (buff2 >> 24);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 16);', '*dst++ = bytebuff2;', 'ready_bits -= 16;', 'buff2 = ((buff2 << 16) | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'else', 'bytebuff1 = bytebuff2 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'ready_bits += bps;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, s, src_byte, src_bit, dst - out);', 'dump_long (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 4);', 'dump_long (dumpfile, format, "STR", buff1);', 'dump_long (dumpfile, format, "STR", buff2);', 'dump_byte (dumpfile, format, "STR", bytebuff1);', 'dump_byte (dumpfile, format, "STR", bytebuff2);', 'dump_info (dumpfile, format, "STR","STR", ready_bits, action);', '}', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 24);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'bytebuff2 = bytebuff1;', 'ready_bits -= 8;', '}', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, src_byte, src_bit, dst - out);', 'dump_long (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 4);', 'dump_long (dumpfile, format, "STR", buff1);', 'dump_long (dumpfile, format, "STR", buff2);', 'dump_byte (dumpfile, format, "STR", bytebuff1);', 'dump_byte (dumpfile, format, "STR", bytebuff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits);', '}', 'if ((dumpfile != NULL) && (level == 2))', '{', 'dump_info (dumpfile, format, "STR","STR");', 'dump_buffer(dumpfile, format, 1, dst_rowsize, row, out + (row * dst_rowsize));', '}', '}', 'return (0);']
2024-04-26 03:50:42.917 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov edx,r8d', 'mov eax,r9d', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x20', 'sub edx,eax', 'mov eax,edx', 'mov edx,0xffffffff', 'mov ecx,eax', 'shr edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x20', 'sub edx,eax', 'mov eax,edx', 'mov edx,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'cmp <MEM>,0xf', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x18', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov eax,<MEM>', 'shr eax,0x10', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x10', 'mov eax,<MEM>', 'shl eax,0x10', 'mov esi,eax', 'mov eax,<MEM>', 'mov edx,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov eax,edx', 'or eax,esi', 'mov <MEM>,eax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov edx,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov eax,edx', 'or <MEM>,eax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x18', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'movzx eax,<MEM>', 'mov <MEM>,al', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items:  34%|███▍      | 220/640 [00:00<00:00, 1088.67it/s]2024-04-26 03:50:42.985 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: combineSeparateSamples32bits, 6, 4
2024-04-26 03:50:42.986 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'combineSeparateSamples32bits (uint8 *in[], uint8 *out, uint32 cols,', 'uint32 rows, uint16 spp, uint16 bps,', 'FILE *dumpfile, int format, int level)', '{', 'int    ready_bits = 0, bytes_per_sample = 0, shift_width = 0;', 'uint32 src_rowsize, dst_rowsize, bit_offset, src_offset;', 'uint32 src_byte = 0, src_bit = 0;', 'uint32 row, col;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'tsample_t s;', 'unsigned char *src = in[0];', 'unsigned char *dst = out;', 'char           action[8];', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'src_rowsize = ((bps * cols) + 7) / 8;', 'dst_rowsize = ((bps * cols * spp) + 7) / 8;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'shift_width = ((bps + 7) / 8) + 1;', 'for (row = 0; row < rows; row++)', '{', 'ready_bits = 0;', 'buff1 = buff2 = 0;', 'dst = out + (row * dst_rowsize);', 'src_offset = row * src_rowsize;', 'for (col = 0; col < cols; col++)', '{', 'bit_offset = col * bps;', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', 'matchbits = maskbits << (64 - src_bit - bps);', 'for (s = 0; s < spp; s++)', '{', 'src = in[s] + src_offset + src_byte;', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits >= 32)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'else', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'ready_bits += bps;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, s, src_byte, src_bit, dst - out);', 'dump_wide (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 8);', 'dump_wide (dumpfile, format, "STR", buff1);', 'dump_wide (dumpfile, format, "STR", buff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits, action);', '}', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, src_byte, src_bit, dst - out);', 'dump_long (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 4);', 'dump_long (dumpfile, format, "STR", buff1);', 'dump_long (dumpfile, format, "STR", buff2);', 'dump_byte (dumpfile, format, "STR", bytebuff1);', 'dump_byte (dumpfile, format, "STR", bytebuff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits);', '}', 'if ((dumpfile != NULL) && (level == 2))', '{', 'dump_info (dumpfile, format, "STR","STR");', 'dump_buffer(dumpfile, format, 1, dst_rowsize, row, out);', '}', '}', 'return (0);']
2024-04-26 03:50:42.986 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0xc0', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov edx,r8d', 'mov eax,r9d', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x8', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 640/640 [00:00<00:00, 1253.32it/s]
2024-04-26 03:50:43.701 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 640 ---> 104
2024-04-26 03:50:43.703 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['combineSeparateSamples8bits', 'combineSeparateSamples16bits', 'combineSeparateSamples24bits', 'combineSeparateSamples32bits', 'combineSeparateTileSamples8bits', 'combineSeparateTileSamples16bits', 'combineSeparateTileSamples24bits', 'combineSeparateTileSamples32bits']
2024-04-26 03:50:43.703 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['combineSeparateSamples8bits', 'combineSeparateSamples16bits', 'combineSeparateSamples24bits', 'combineSeparateSamples32bits', 'combineSeparateTileSamples8bits', 'combineSeparateTileSamples16bits', 'combineSeparateTileSamples24bits', 'combineSeparateTileSamples32bits']
2024-04-26 03:50:43.704 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['combineSeparateTileSamples8bits', 'combineSeparateTileSamples16bits', 'combineSeparateTileSamples24bits', 'combineSeparateTileSamples32bits']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.65s/it]
2024-04-26 03:50:45.356 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx combineSeparateTileSamples8bits combineSeparateTileSamples8bits	0.7570682168006897	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x8', 'sub edx,eax', 'mov eax,edx', 'mov edx,0xff', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov <MEM>,al', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx ecx,<MEM>', 'mov eax,<MEM>', 'add eax,ecx', 'mov ecx,0x8', 'sub ecx,eax', 'mov eax,ecx', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,al', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'and al,<MEM>', 'movzx edx,al', 'mov eax,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,al', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'movzx eax,<MEM>', 'mov <MEM>,al', 'sub <MEM>,0x8', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov edx,eax', 'movzx eax,<MEM>', 'or eax,edx', 'mov <MEM>,al', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx edx,al', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'lea rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8,rdx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x8', 'sub eax,<MEM>', 'mov edx,0xff', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'and al,<MEM>', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:50:45.356 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx combineSeparateTileSamples16bits combineSeparateTileSamples16bits	0.9998477697372437	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x10', 'sub edx,eax', 'mov eax,edx', 'mov edx,0xffff', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,ax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx ecx,<MEM>', 'mov eax,<MEM>', 'add eax,ecx', 'mov ecx,0x10', 'sub ecx,eax', 'mov eax,ecx', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,ax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'mov edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'and ax,<MEM>', 'movzx edx,ax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,ax', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr ax,0x8', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x8', 'movzx eax,<MEM>', 'shl eax,0x8', 'mov esi,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'or eax,esi', 'mov <MEM>,ax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'mov ecx,eax', 'sar edx,cl', 'mov eax,edx', 'mov edx,eax', 'movzx eax,<MEM>', 'or eax,edx', 'mov <MEM>,ax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_short>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x2', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_short>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_short>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'shr ax,0x8', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:50:45.357 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx combineSeparateTileSamples24bits combineSeparateTileSamples24bits	0.9998469352722168	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x20', 'sub edx,eax', 'mov eax,edx', 'mov edx,0xffffffff', 'mov ecx,eax', 'shr edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x20', 'sub edx,eax', 'mov eax,edx', 'mov edx,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl edx,cl', 'mov eax,edx', 'mov <MEM>,eax', 'cmp <MEM>,0xf', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x18', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov eax,<MEM>', 'shr eax,0x10', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x10', 'mov eax,<MEM>', 'shl eax,0x10', 'mov esi,eax', 'mov eax,<MEM>', 'mov edx,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov eax,edx', 'or eax,esi', 'mov <MEM>,eax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov edx,<MEM>', 'mov ecx,eax', 'shr edx,cl', 'mov eax,edx', 'or <MEM>,eax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x18', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'movzx eax,<MEM>', 'mov <MEM>,al', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'lea rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:50:45.357 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx combineSeparateTileSamples32bits combineSeparateTileSamples32bits	0.9998478889465332	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x8', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:50:45.361 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:50:45.361 | SUCCESS  | __main__:run_tc:480 - confirm summary: True False False False
2024-04-26 03:50:45.361 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:45.362 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:45.362 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:50:45.362 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:50:45.362 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 287 CVE-2016-6223
filter_and_generate_data_items: 100%|██████████| 1438/1438 [00:00<00:00, 2608.54it/s]
2024-04-26 03:50:50.763 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1438 ---> 24
2024-04-26 03:50:50.766 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadRawStrip1', 'TIFFReadRawTile1']
2024-04-26 03:50:50.767 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadRawStrip1', 'TIFFReadRawTile1']
2024-04-26 03:50:50.767 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFReadRawStrip1', 'TIFFReadRawTile1']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.08it/s]
2024-04-26 03:50:52.236 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9549574851989746, TIFFReadRawStrip1 ---> TIFFReadRawStrip1
2024-04-26 03:50:52.236 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9551100134849548, TIFFReadRawTile1 ---> TIFFReadRawStrip1
2024-04-26 03:50:52.236 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 2
2024-04-26 03:50:52.237 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:50:52.375 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.5969362258911133, fix prob: 0.4030638486146927
2024-04-26 03:50:52.376 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:50:52.376 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:52.376 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:50:52.376 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:50:52.376 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 288 CVE-2016-9273
filter_and_generate_data_items: 100%|██████████| 719/719 [00:00<00:00, 2206.26it/s]
2024-04-26 03:50:57.645 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 719 ---> 208
2024-04-26 03:50:57.647 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFNumberOfStrips']
2024-04-26 03:50:57.648 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFNumberOfStrips']
2024-04-26 03:50:57.649 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFNumberOfStrips']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.57s/it]
2024-04-26 03:51:01.044 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9998356103897095, TIFFNumberOfStrips ---> JPEGResetUpsampled
2024-04-26 03:51:01.044 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9984927177429199, TIFFNumberOfStrips ---> TIFFRasterScanlineSize64
2024-04-26 03:51:01.052 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9854261875152588, TIFFNumberOfStrips ---> TIFFStripSize64
2024-04-26 03:51:01.052 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 5 ---> 3
2024-04-26 03:51:01.053 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:51:01.263 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0018360549620410893, fix prob: 2.998163878917694
2024-04-26 03:51:01.263 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:01.263 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:01.263 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:01.264 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:01.264 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 289 CVE-2016-9533
filter_and_generate_data_items: 100%|██████████| 3595/3595 [00:01<00:00, 2670.82it/s]
2024-04-26 03:51:07.526 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 3595 ---> 236
2024-04-26 03:51:07.529 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFFlushData1', 't2p_readwrite_pdf_image', 't2p_process_jpeg_strip', 'loadImage', 'reverseSamplesBytes']
2024-04-26 03:51:07.530 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['horizontalDifference8', 'TIFFFlushData1']
2024-04-26 03:51:07.530 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFFlushData1']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.70s/it]
2024-04-26 03:51:11.248 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5331745147705078, TIFFFlushData1 ---> TIFFSetupStrips
2024-04-26 03:51:11.249 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 03:51:11.249 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:51:11.249 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:51:11.250 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:11.250 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:11.250 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:11.250 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:11.250 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 290 CVE-2016-9534
filter_and_generate_data_items: 100%|██████████| 3595/3595 [00:01<00:00, 2692.64it/s]
2024-04-26 03:51:17.467 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 3595 ---> 236
2024-04-26 03:51:17.470 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFFlushData1', 't2p_readwrite_pdf_image', 't2p_process_jpeg_strip', 'loadImage', 'reverseSamplesBytes']
2024-04-26 03:51:17.471 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['horizontalDifference8', 'TIFFFlushData1']
2024-04-26 03:51:17.471 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFFlushData1']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.62s/it]
2024-04-26 03:51:21.227 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.5331745147705078, TIFFFlushData1 ---> TIFFSetupStrips
2024-04-26 03:51:21.228 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 03:51:21.228 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:51:21.228 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:51:21.229 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:21.229 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:21.229 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:21.229 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:21.229 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 291 CVE-2016-9538
filter_and_generate_data_items:  69%|██████▉   | 110/160 [00:00<00:00, 1089.43it/s]2024-04-26 03:51:25.844 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: readSeparateStripsIntoBuffer, 6, 4
2024-04-26 03:51:25.845 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int readSeparateStripsIntoBuffer (TIFF *in, uint8 *obuf, uint32 length,', 'uint32 width, uint16 spp,', 'struct dump_opts *dump)', '{', 'int i, j, bytes_per_sample, bytes_per_pixel, shift_width, result = 1;', 'int32  bytes_read = 0;', 'uint16 bps, nstrips, planar, strips_per_sample;', 'uint32 src_rowsize, dst_rowsize, rows_processed, rps;', 'uint32 rows_this_strip = 0;', 'tsample_t s;', 'tstrip_t  strip;', 'tsize_t scanlinesize = TIFFScanlineSize(in);', 'tsize_t stripsize    = TIFFStripSize(in);', 'unsigned char *srcbuffs[MAX_SAMPLES];', 'unsigned char *buff = NULL;', 'unsigned char *dst = NULL;', 'if (obuf == NULL)', '{', 'TIFFError("STR","STR");', 'return (0);', '}', "memset (srcbuffs, '\\0', sizeof(srcbuffs));", 'TIFFGetField(in, TIFFTAG_BITSPERSAMPLE, &bps);', 'TIFFGetFieldDefaulted(in, TIFFTAG_PLANARCONFIG, &planar);', 'TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);', 'if (rps > length)', 'rps = length;', 'bytes_per_sample = (bps + 7) / 8;', 'bytes_per_pixel  = ((bps * spp) + 7) / 8;', 'if (bytes_per_pixel < (bytes_per_sample + 1))', 'shift_width = bytes_per_pixel;', 'else', 'shift_width = bytes_per_sample + 1;', 'src_rowsize = ((bps * width) + 7) / 8;', 'dst_rowsize = ((bps * width * spp) + 7) / 8;', 'dst = obuf;', 'if ((dump->infile != NULL) && (dump->level == 3))', '{', 'dump_info  (dump->infile, dump->format, "STR",', '"STR",', 'width, length,  scanlinesize);', 'dump_info  (dump->infile, dump->format, "STR",', '"STR",', 'bps, spp, shift_width);', '}', 'nstrips = TIFFNumberOfStrips(in);', 'strips_per_sample = nstrips /spp;', 'for (s = 0; (s < spp) && (s < MAX_SAMPLES); s++)', '{', 'srcbuffs[s] = NULL;', 'buff = _TIFFmalloc(stripsize);', 'if (!buff)', '{', 'TIFFError ("STR",', '"STR", s);', 'for (i = 0; i < s; i++)', '_TIFFfree (srcbuffs[i]);', 'return 0;', '}', 'srcbuffs[s] = buff;', '}', 'rows_processed = 0;', 'for (j = 0; (j < strips_per_sample) && (result == 1); j++)', '{', 'for (s = 0; (s < spp) && (s < MAX_SAMPLES); s++)', '{', 'buff = srcbuffs[s];', 'strip = (s * strips_per_sample) + j;', 'bytes_read = TIFFReadEncodedStrip (in, strip, buff, stripsize);', 'rows_this_strip = bytes_read / src_rowsize;', 'if (bytes_read < 0 && !ignore)', '{', 'TIFFError(TIFFFileName(in),', '"STR",', '(unsigned long) strip, s + 1);', 'result = 0;', 'break;', '}', '#ifdef DEVELMODE', 'TIFFError("STR", "STR",', 'strip, bytes_read, rows_this_strip, shift_width);', '#endif', '}', 'if (rps > rows_this_strip)', 'rps = rows_this_strip;', 'dst = obuf + (dst_rowsize * rows_processed);', 'if ((bps % 8) == 0)', '{', 'if (combineSeparateSamplesBytes (srcbuffs, dst, width, rps,', 'spp, bps, dump->infile,', 'dump->format, dump->level))', '{', 'result = 0;', 'break;', '}', '}', 'else', '{', 'switch (shift_width)', '{', 'case 1: if (combineSeparateSamples8bits (srcbuffs, dst, width, rps,', 'spp, bps, dump->infile,', 'dump->format, dump->level))', '{', 'result = 0;', 'break;', '}', 'break;', 'case 2: if (combineSeparateSamples16bits (srcbuffs, dst, width, rps,', 'spp, bps, dump->infile,', 'dump->format, dump->level))', '{', 'result = 0;', 'break;', '}', 'break;', 'case 3: if (combineSeparateSamples24bits (srcbuffs, dst, width, rps,', 'spp, bps, dump->infile,', 'dump->format, dump->level))', '{', 'result = 0;', 'break;', '}', 'break;', 'case 4:', 'case 5:', 'case 6:', 'case 7:', 'case 8: if (combineSeparateSamples32bits (srcbuffs, dst, width, rps,', 'spp, bps, dump->infile,', 'dump->format, dump->level))', '{', 'result = 0;', 'break;', '}', 'break;', 'default: TIFFError ("STR", "STR", bps);', 'result = 0;', 'break;', '}', '}', 'if ((rows_processed + rps) > length)', '{', 'rows_processed = length;', 'rps = length - rows_processed;', '}', 'else', 'rows_processed += rps;', '}', 'for (s = 0; (s < spp) && (s < MAX_SAMPLES); s++)', '{', 'buff = srcbuffs[s];', 'if (buff != NULL)', '_TIFFfree(buff);', '}', 'return (result);']
2024-04-26 03:51:25.853 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'push r12', 'push rbx', 'sub rsp,0xe0', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov eax,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x1', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffscanlinesize@plt>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffstripsize@plt>', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov edx,0x40', 'mov esi,0x0', 'mov rdi,rax', 'call <memset@plt>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x102', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x11c', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfielddefaulted@plt>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x116', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfielddefaulted@plt>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'movzx eax,ax', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'movzx edx,ax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'movzx eax,ax', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'movzx eax,ax', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'sub rsp,0x8', 'push <MEM>', 'mov r9d,ecx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x10', 'movzx edi,<MEM>', 'movzx eax,<MEM>', 'movzx ecx,ax', 'mov rax,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x10', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffnumberofstrips@plt>', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'mov edx,0x0', 'div <MEM>', 'mov <MEM>,ax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cdqe', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cdqe', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'add <MEM>,0x1', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cdqe', 'mov rdx,<MEM>', 'mov <MEM>,rdx', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cdqe', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'mov <MEM>,eax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffreadencodedstrip@plt>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov edx,0x0', 'div <MEM>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'jns ecf0 <readseparatestripsintobuffer+OFFSET>', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea r12d,<MEM>', 'mov ebx,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tifffilename@plt>', 'mov ecx,r12d', 'mov rdx,rbx', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'and eax,0x7', 'test ax,ax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9d,<MEM>', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'movzx eax,<MEM>', 'movzx r11d,ax', 'movzx r10d,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'sub rsp,0x8', 'push r9', 'push r8', 'push rdi', 'mov r9d,r11d', 'mov r8d,r10d', 'mov rdi,rax', 'call <combineseparatesamplesbytes>', 'add rsp,0x20', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x8', '<JUMP> <LOC>', 'cmp <MEM>,0x4', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9d,<MEM>', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'movzx eax,<MEM>', 'movzx r11d,ax', 'movzx r10d,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'sub rsp,0x8', 'push r9', 'push r8', 'push rdi', 'mov r9d,r11d', 'mov r8d,r10d', 'mov rdi,rax', 'call <combineseparatesamples8bits>', 'add rsp,0x20', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9d,<MEM>', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'movzx eax,<MEM>', 'movzx r11d,ax', 'movzx r10d,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'sub rsp,0x8', 'push r9', 'push r8', 'push rdi', 'mov r9d,r11d', 'mov r8d,r10d', 'mov rdi,rax', 'call <combineseparatesamples16bits>', 'add rsp,0x20', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9d,<MEM>', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'movzx eax,<MEM>', 'movzx r11d,ax', 'movzx r10d,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'sub rsp,0x8', 'push r9', 'push r8', 'push rdi', 'mov r9d,r11d', 'mov r8d,r10d', 'mov rdi,rax', 'call <combineseparatesamples24bits>', 'add rsp,0x20', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov r9d,<MEM>', 'mov rax,<MEM>', 'mov r8d,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'movzx eax,<MEM>', 'movzx r11d,ax', 'movzx r10d,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'sub rsp,0x8', 'push r9', 'push r8', 'push rdi', 'mov r9d,r11d', 'mov r8d,r10d', 'mov rdi,rax', 'call <combineseparatesamples32bits>', 'add rsp,0x20', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'movzx eax,ax', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add <MEM>,eax', 'add <MEM>,0x1', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cdqe', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'cmp <MEM>,0x7', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov rbx,<MEM>', 'xor rbx,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'lea rsp,<MEM>', 'pop rbx', 'pop r12', 'pop rbp', 'ret']
filter_and_generate_data_items: 100%|██████████| 160/160 [00:00<00:00, 1131.71it/s]
2024-04-26 03:51:26.310 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 160 ---> 19
2024-04-26 03:51:26.312 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['readContigStripsIntoBuffer', 'readSeparateStripsIntoBuffer']
2024-04-26 03:51:26.313 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['readContigStripsIntoBuffer', 'readSeparateStripsIntoBuffer']
2024-04-26 03:51:26.314 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['readContigStripsIntoBuffer']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.56it/s]
2024-04-26 03:51:29.141 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8858861923217773, readSeparateStripsIntoBuffer ---> process_command_opts
2024-04-26 03:51:29.141 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8833156228065491, readContigStripsIntoBuffer ---> readContigStripsIntoBuffer
2024-04-26 03:51:29.141 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 2
2024-04-26 03:51:29.141 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:51:29.142 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:51:29.142 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:29.142 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:29.143 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:29.143 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:29.143 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 292 CVE-2017-11335
filter_and_generate_data_items: 100%|██████████| 79/79 [00:00<00:00, 696.94it/s]
2024-04-26 03:51:34.350 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 79 ---> 3
2024-04-26 03:51:34.353 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['t2p_read_tiff_data']
2024-04-26 03:51:34.354 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['t2p_read_tiff_data']
2024-04-26 03:51:34.355 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['t2p_read_tiff_data']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  5.57it/s]
2024-04-26 03:51:36.301 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9971185922622681, t2p_read_tiff_data ---> t2p_read_tiff_data
2024-04-26 03:51:36.302 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:51:36.302 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:51:36.375 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.25984910130500793, fix prob: 0.7401508688926697
2024-04-26 03:51:36.375 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:36.375 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:36.375 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:36.375 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:36.376 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 293 CVE-2017-13727
filter_and_generate_data_items: 100%|██████████| 734/734 [00:00<00:00, 1898.49it/s]
2024-04-26 03:51:41.633 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 734 ---> 145
2024-04-26 03:51:41.636 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFWriteDirectoryTagSubifd']
2024-04-26 03:51:41.637 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFWriteDirectoryTagSubifd']
2024-04-26 03:51:41.638 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFWriteDirectoryTagSubifd']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.19s/it]
2024-04-26 03:51:44.807 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.6817548274993896, TIFFWriteDirectoryTagSubifd ---> TIFFWriteDirectoryTagSubifd
2024-04-26 03:51:44.808 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 1
2024-04-26 03:51:44.808 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:51:44.808 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:51:44.809 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:44.809 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:44.809 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:44.809 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:44.809 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 294 CVE-2017-18013
filter_and_generate_data_items: 100%|██████████| 734/734 [00:00<00:00, 792.99it/s]
confirming functions(batch_size: 128):: 0it [00:00, ?it/s]
2024-04-26 03:51:50.697 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 734 ---> 0
2024-04-26 03:51:50.700 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirectory']
2024-04-26 03:51:50.700 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirectory']
2024-04-26 03:51:50.701 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
2024-04-26 03:51:50.703 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:51:50.704 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:51:50.705 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:50.705 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:50.706 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:51:50.706 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:50.707 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 295 CVE-2017-7593
filter_and_generate_data_items: 100%|██████████| 720/720 [00:00<00:00, 2046.67it/s]
2024-04-26 03:51:55.990 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 720 ---> 176
2024-04-26 03:51:55.992 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadBufferSetup']
2024-04-26 03:51:55.998 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadBufferSetup']
2024-04-26 03:51:55.999 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFReadBufferSetup']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.20s/it]
2024-04-26 03:51:58.788 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8354403972625732, TIFFReadBufferSetup ---> TIFFReadBufferSetup
2024-04-26 03:51:58.788 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:51:58.789 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:51:58.789 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:51:58.789 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:51:58.789 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:51:58.789 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:51:58.790 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:51:58.790 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 296 CVE-2017-7594
filter_and_generate_data_items: 100%|██████████| 720/720 [00:00<00:00, 2067.87it/s]
2024-04-26 03:52:04.005 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 720 ---> 80
2024-04-26 03:52:04.008 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['OJPEGReadHeaderInfoSecTablesAcTable']
2024-04-26 03:52:04.008 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['OJPEGReadHeaderInfoSecTablesAcTable']
2024-04-26 03:52:04.009 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['OJPEGReadHeaderInfoSecTablesAcTable']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.32s/it]
2024-04-26 03:52:07.237 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8830094337463379, OJPEGReadHeaderInfoSecTablesAcTable ---> OJPEGReadHeaderInfoSecStreamDht
2024-04-26 03:52:07.237 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 7 ---> 1
2024-04-26 03:52:07.237 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:52:07.238 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:52:07.238 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:52:07.238 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:52:07.238 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:52:07.238 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:52:07.239 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 297 CVE-2017-7596
filter_and_generate_data_items:  58%|█████▊    | 1662/2880 [00:00<00:00, 2612.34it/s]2024-04-26 03:52:12.522 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: TIFFWriteDirectoryTagSampleformatArray, 6, 3
2024-04-26 03:52:12.524 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* dir, uint16 tag, uint32 count, double* value)', '{', 'static const char module[] = "STR";', 'void* conv;', 'uint32 i;', 'int ok;', 'conv = _TIFFmalloc(count*sizeof(double));', 'if (conv == NULL)', '{', 'TIFFErrorExt(tif->tif_clientdata, module, "STR");', 'return (0);', '}', 'switch (tif->tif_dir.td_sampleformat)', '{', 'case SAMPLEFORMAT_IEEEFP:', 'if (tif->tif_dir.td_bitspersample<=32)', '{', 'for (i = 0; i < count; ++i)', '((float*)conv)[i] = (float)value[i];', 'ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);', '}', 'else', '{', 'ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);', '}', 'break;', 'case SAMPLEFORMAT_INT:', 'if (tif->tif_dir.td_bitspersample<=8)', '{', 'for (i = 0; i < count; ++i)', '((int8*)conv)[i] = (int8)value[i];', 'ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);', '}', 'else if (tif->tif_dir.td_bitspersample<=16)', '{', 'for (i = 0; i < count; ++i)', '((int16*)conv)[i] = (int16)value[i];', 'ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);', '}', 'else', '{', 'for (i = 0; i < count; ++i)', '((int32*)conv)[i] = (int32)value[i];', 'ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);', '}', 'break;', 'case SAMPLEFORMAT_UINT:', 'if (tif->tif_dir.td_bitspersample<=8)', '{', 'for (i = 0; i < count; ++i)', '((uint8*)conv)[i] = (uint8)value[i];', 'ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);', '}', 'else if (tif->tif_dir.td_bitspersample<=16)', '{', 'for (i = 0; i < count; ++i)', '((uint16*)conv)[i] = (uint16)value[i];', 'ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);', '}', 'else', '{', 'for (i = 0; i < count; ++i)', '((uint32*)conv)[i] = (uint32)value[i];', 'ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);', '}', 'break;', 'default:', 'ok = 0;', '}', '_TIFFfree(conv);', 'return (ok);', '}']
2024-04-26 03:52:12.524 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x40', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov eax,<MEM>', 'shl rax,0x3', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x20', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvtsd2ss xmm0,xmm0', 'movss <MEM>,xmm0', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagfloatarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagdoublearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagsbytearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagsshortarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rdx,rax', 'cvttsd2si eax,xmm0', 'mov <MEM>,eax', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagslongarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagbytearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagshortarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si rdx,xmm0', 'mov <MEM>,edx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytaglongarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items:  77%|███████▋  | 2222/2880 [00:01<00:00, 2690.37it/s]2024-04-26 03:52:12.788 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: TIFFWriteDirectoryTagCheckedRationalArray, 6, 3
2024-04-26 03:52:12.789 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'TIFFWriteDirectoryTagCheckedRationalArray(TIFF* tif, uint32* ndir, TIFFDirEntry* dir, uint16 tag, uint32 count, float* value)', '{', 'static const char module[] = "STR";', 'uint32* m;', 'float* na;', 'uint32* nb;', 'uint32 nc;', 'int o;', 'assert(sizeof(uint32)==4);', 'm=_TIFFmalloc(count*2*sizeof(uint32));', 'if (m==NULL)', '{', 'TIFFErrorExt(tif->tif_clientdata,module,"STR");', 'return(0);', '}', 'for (na=value, nb=m, nc=0; nc<count; na++, nb+=2, nc++)', '{', 'if (*na<=0.0)', '{', 'nb[0]=0;', 'nb[1]=1;', '}', 'else if (*na==(float)(uint32)(*na))', '{', 'nb[0]=(uint32)(*na);', 'nb[1]=1;', '}', 'else if (*na<1.0)', '{', 'nb[0]=(uint32)((double)(*na)*0xFFFFFFFF);', 'nb[1]=0xFFFFFFFF;', '}', 'else', '{', 'nb[0]=0xFFFFFFFF;', 'nb[1]=(uint32)((double)0xFFFFFFFF/(*na));', '}', '}', 'if (tif->tif_flags&TIFF_SWAB)', 'TIFFSwabArrayOfLong(m,count*2);', 'o=TIFFWriteDirectoryTagData(tif,ndir,dir,tag,TIFF_RATIONAL,count,count*8,&m[0]);', '_TIFFfree(m);', 'return(o);', '}']
2024-04-26 03:52:12.790 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov eax,<MEM>', 'add eax,eax', 'mov eax,eax', 'shl rax,0x2', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'pxor xmm0,xmm0', 'comiss xmm0,xmm1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvttss2si rax,xmm0', 'mov eax,eax', 'test rax,rax', 'js 257e7 <tiffwritedirectorytagcheckedrationalarray+OFFSET>', 'cvtsi2ss xmm0,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'shr rdx,1', 'and eax,0x1', 'or rdx,rax', 'cvtsi2ss xmm0,rdx', 'addss xmm0,xmm0', 'ucomiss xmm1,xmm0', 'jp 2582b <tiffwritedirectorytagcheckedrationalarray+OFFSET>', 'ucomiss xmm1,xmm0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvttss2si rax,xmm0', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'movss xmm0,<MEM>', 'comiss xmm0,xmm1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvtss2sd xmm1,xmm0', 'movsd xmm0,<MEM>', 'mulsd xmm0,xmm1', 'cvttsd2si rax,xmm0', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0xffffffff', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvtss2sd xmm1,xmm0', 'movsd xmm0,<MEM>', 'divsd xmm0,xmm1', 'mov rax,<MEM>', 'add rax,0x4', 'cvttsd2si rdx,xmm0', 'mov <MEM>,edx', 'add <MEM>,0x4', 'add <MEM>,0x8', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'and eax,0x80', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,eax', 'mov edx,eax', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <tiffswabarrayoflong@plt>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'movzx ecx,<MEM>', 'mov r8d,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'push <MEM>', 'push rdi', 'mov r9d,r8d', 'mov r8d,0x5', 'mov rdi,rax', 'call <tiffwritedirectorytagdata>', 'add rsp,0x10', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 2880/2880 [00:01<00:00, 2254.80it/s]
2024-04-26 03:52:13.389 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2880 ---> 129
2024-04-26 03:52:13.392 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['_TIFFVSetField', 'TIFFReadDirEntryFloatArray', 'TIFFWriteDirectoryTagSampleformatArray', 'TIFFWriteDirectoryTagCheckedRationalArray']
2024-04-26 03:52:13.393 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['_TIFFVSetField', 'TIFFReadDirEntryFloatArray', 'TIFFWriteDirectoryTagSampleformatArray', 'TIFFWriteDirectoryTagCheckedRationalArray']
2024-04-26 03:52:13.393 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFReadDirEntryFloatArray']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:01<00:00,  1.27it/s]
2024-04-26 03:52:24.707 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9987788200378418, _TIFFVSetField ---> TIFFFetchNormalTag
2024-04-26 03:52:24.708 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9953548908233643, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntryFloatArray
2024-04-26 03:52:24.708 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9950451850891113, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntryDoubleArray
2024-04-26 03:52:24.708 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9662573933601379, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntrySbyteArray
2024-04-26 03:52:24.708 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 6 ---> 4
2024-04-26 03:52:24.708 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:52:25.086 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.3611736038225812, fix prob: 3.63882640004158
2024-04-26 03:52:25.086 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:52:25.086 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:52:25.086 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:52:25.087 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:52:25.087 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 298 CVE-2017-7597
filter_and_generate_data_items:  53%|█████▎    | 1535/2880 [00:00<00:00, 2225.53it/s]2024-04-26 03:52:30.682 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: TIFFWriteDirectoryTagSampleformatArray, 6, 3
2024-04-26 03:52:30.684 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* dir, uint16 tag, uint32 count, double* value)', '{', 'static const char module[] = "STR";', 'void* conv;', 'uint32 i;', 'int ok;', 'conv = _TIFFmalloc(count*sizeof(double));', 'if (conv == NULL)', '{', 'TIFFErrorExt(tif->tif_clientdata, module, "STR");', 'return (0);', '}', 'switch (tif->tif_dir.td_sampleformat)', '{', 'case SAMPLEFORMAT_IEEEFP:', 'if (tif->tif_dir.td_bitspersample<=32)', '{', 'for (i = 0; i < count; ++i)', '((float*)conv)[i] = (float)value[i];', 'ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);', '}', 'else', '{', 'ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);', '}', 'break;', 'case SAMPLEFORMAT_INT:', 'if (tif->tif_dir.td_bitspersample<=8)', '{', 'for (i = 0; i < count; ++i)', '((int8*)conv)[i] = (int8)value[i];', 'ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);', '}', 'else if (tif->tif_dir.td_bitspersample<=16)', '{', 'for (i = 0; i < count; ++i)', '((int16*)conv)[i] = (int16)value[i];', 'ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);', '}', 'else', '{', 'for (i = 0; i < count; ++i)', '((int32*)conv)[i] = (int32)value[i];', 'ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);', '}', 'break;', 'case SAMPLEFORMAT_UINT:', 'if (tif->tif_dir.td_bitspersample<=8)', '{', 'for (i = 0; i < count; ++i)', '((uint8*)conv)[i] = (uint8)value[i];', 'ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);', '}', 'else if (tif->tif_dir.td_bitspersample<=16)', '{', 'for (i = 0; i < count; ++i)', '((uint16*)conv)[i] = (uint16)value[i];', 'ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);', '}', 'else', '{', 'for (i = 0; i < count; ++i)', '((uint32*)conv)[i] = (uint32)value[i];', 'ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);', '}', 'break;', 'default:', 'ok = 0;', '}', '_TIFFfree(conv);', 'return (ok);', '}']
2024-04-26 03:52:30.685 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x40', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov eax,<MEM>', 'shl rax,0x3', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x20', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvtsd2ss xmm0,xmm0', 'movss <MEM>,xmm0', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagfloatarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagdoublearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagsbytearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagsshortarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rdx,rax', 'cvttsd2si eax,xmm0', 'mov <MEM>,eax', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagslongarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagbytearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagshortarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si rdx,xmm0', 'mov <MEM>,edx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytaglongarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items:  73%|███████▎  | 2104/2880 [00:01<00:00, 2539.63it/s]2024-04-26 03:52:30.921 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: TIFFWriteDirectoryTagCheckedRationalArray, 6, 3
2024-04-26 03:52:30.922 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'TIFFWriteDirectoryTagCheckedRationalArray(TIFF* tif, uint32* ndir, TIFFDirEntry* dir, uint16 tag, uint32 count, float* value)', '{', 'static const char module[] = "STR";', 'uint32* m;', 'float* na;', 'uint32* nb;', 'uint32 nc;', 'int o;', 'assert(sizeof(uint32)==4);', 'm=_TIFFmalloc(count*2*sizeof(uint32));', 'if (m==NULL)', '{', 'TIFFErrorExt(tif->tif_clientdata,module,"STR");', 'return(0);', '}', 'for (na=value, nb=m, nc=0; nc<count; na++, nb+=2, nc++)', '{', 'if (*na<=0.0)', '{', 'nb[0]=0;', 'nb[1]=1;', '}', 'else if (*na==(float)(uint32)(*na))', '{', 'nb[0]=(uint32)(*na);', 'nb[1]=1;', '}', 'else if (*na<1.0)', '{', 'nb[0]=(uint32)((double)(*na)*0xFFFFFFFF);', 'nb[1]=0xFFFFFFFF;', '}', 'else', '{', 'nb[0]=0xFFFFFFFF;', 'nb[1]=(uint32)((double)0xFFFFFFFF/(*na));', '}', '}', 'if (tif->tif_flags&TIFF_SWAB)', 'TIFFSwabArrayOfLong(m,count*2);', 'o=TIFFWriteDirectoryTagData(tif,ndir,dir,tag,TIFF_RATIONAL,count,count*8,&m[0]);', '_TIFFfree(m);', 'return(o);', '}']
2024-04-26 03:52:30.923 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov eax,<MEM>', 'add eax,eax', 'mov eax,eax', 'shl rax,0x2', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'pxor xmm0,xmm0', 'comiss xmm0,xmm1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvttss2si rax,xmm0', 'mov eax,eax', 'test rax,rax', 'js 257e7 <tiffwritedirectorytagcheckedrationalarray+OFFSET>', 'cvtsi2ss xmm0,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'shr rdx,1', 'and eax,0x1', 'or rdx,rax', 'cvtsi2ss xmm0,rdx', 'addss xmm0,xmm0', 'ucomiss xmm1,xmm0', 'jp 2582b <tiffwritedirectorytagcheckedrationalarray+OFFSET>', 'ucomiss xmm1,xmm0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvttss2si rax,xmm0', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'movss xmm0,<MEM>', 'comiss xmm0,xmm1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvtss2sd xmm1,xmm0', 'movsd xmm0,<MEM>', 'mulsd xmm0,xmm1', 'cvttsd2si rax,xmm0', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0xffffffff', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvtss2sd xmm1,xmm0', 'movsd xmm0,<MEM>', 'divsd xmm0,xmm1', 'mov rax,<MEM>', 'add rax,0x4', 'cvttsd2si rdx,xmm0', 'mov <MEM>,edx', 'add <MEM>,0x4', 'add <MEM>,0x8', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'and eax,0x80', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,eax', 'mov edx,eax', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <tiffswabarrayoflong@plt>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'movzx ecx,<MEM>', 'mov r8d,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'push <MEM>', 'push rdi', 'mov r9d,r8d', 'mov r8d,0x5', 'mov rdi,rax', 'call <tiffwritedirectorytagdata>', 'add rsp,0x10', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 2880/2880 [00:01<00:00, 2106.38it/s]
2024-04-26 03:52:31.631 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2880 ---> 129
2024-04-26 03:52:31.634 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['_TIFFVSetField', 'TIFFReadDirEntryFloatArray', 'TIFFWriteDirectoryTagSampleformatArray', 'TIFFWriteDirectoryTagCheckedRationalArray']
2024-04-26 03:52:31.634 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['_TIFFVSetField', 'TIFFReadDirEntryFloatArray', 'TIFFWriteDirectoryTagSampleformatArray', 'TIFFWriteDirectoryTagCheckedRationalArray']
2024-04-26 03:52:31.635 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFReadDirEntryFloatArray']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.03s/it]
2024-04-26 03:52:43.092 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9987788200378418, _TIFFVSetField ---> TIFFFetchNormalTag
2024-04-26 03:52:43.093 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9953548908233643, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntryFloatArray
2024-04-26 03:52:43.093 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9950451850891113, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntryDoubleArray
2024-04-26 03:52:43.094 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9662573933601379, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntrySbyteArray
2024-04-26 03:52:43.094 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 6 ---> 4
2024-04-26 03:52:43.094 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:52:43.558 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.3611736038225812, fix prob: 3.63882640004158
2024-04-26 03:52:43.558 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:52:43.558 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:52:43.558 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:52:43.559 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:52:43.559 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 299 CVE-2017-7598
filter_and_generate_data_items: 100%|██████████| 1440/1440 [00:00<00:00, 2511.40it/s]
2024-04-26 03:52:49.085 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1440 ---> 409
2024-04-26 03:52:49.088 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirEntryCheckedRational', 'TIFFReadDirEntryCheckedSrational']
2024-04-26 03:52:49.089 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirEntryCheckedRational', 'TIFFReadDirEntryCheckedSrational']
2024-04-26 03:52:49.089 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFReadDirEntryCheckedRational', 'TIFFReadDirEntryCheckedSrational']
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:05<00:00,  1.49s/it]
2024-04-26 03:52:57.428 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.995427131652832, TIFFReadDirEntryCheckedRational ---> TIFFReadBufferSetup
2024-04-26 03:52:57.428 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9986692667007446, TIFFReadDirEntryCheckedSrational ---> TIFFReadBufferSetup
2024-04-26 03:52:57.428 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 24 ---> 2
2024-04-26 03:52:57.429 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:52:57.570 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.5898228287696838, fix prob: 1.4101771116256714
2024-04-26 03:52:57.571 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:52:57.571 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:52:57.571 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:52:57.571 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:52:57.572 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 300 CVE-2017-7600
filter_and_generate_data_items:  51%|█████     | 1470/2880 [00:00<00:00, 2601.63it/s]2024-04-26 03:53:02.920 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: TIFFWriteDirectoryTagSampleformatArray, 6, 3
2024-04-26 03:53:02.921 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* dir, uint16 tag, uint32 count, double* value)', '{', 'static const char module[] = "STR";', 'void* conv;', 'uint32 i;', 'int ok;', 'conv = _TIFFmalloc(count*sizeof(double));', 'if (conv == NULL)', '{', 'TIFFErrorExt(tif->tif_clientdata, module, "STR");', 'return (0);', '}', 'switch (tif->tif_dir.td_sampleformat)', '{', 'case SAMPLEFORMAT_IEEEFP:', 'if (tif->tif_dir.td_bitspersample<=32)', '{', 'for (i = 0; i < count; ++i)', '((float*)conv)[i] = (float)value[i];', 'ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);', '}', 'else', '{', 'ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);', '}', 'break;', 'case SAMPLEFORMAT_INT:', 'if (tif->tif_dir.td_bitspersample<=8)', '{', 'for (i = 0; i < count; ++i)', '((int8*)conv)[i] = (int8)value[i];', 'ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);', '}', 'else if (tif->tif_dir.td_bitspersample<=16)', '{', 'for (i = 0; i < count; ++i)', '((int16*)conv)[i] = (int16)value[i];', 'ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);', '}', 'else', '{', 'for (i = 0; i < count; ++i)', '((int32*)conv)[i] = (int32)value[i];', 'ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);', '}', 'break;', 'case SAMPLEFORMAT_UINT:', 'if (tif->tif_dir.td_bitspersample<=8)', '{', 'for (i = 0; i < count; ++i)', '((uint8*)conv)[i] = (uint8)value[i];', 'ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);', '}', 'else if (tif->tif_dir.td_bitspersample<=16)', '{', 'for (i = 0; i < count; ++i)', '((uint16*)conv)[i] = (uint16)value[i];', 'ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);', '}', 'else', '{', 'for (i = 0; i < count; ++i)', '((uint32*)conv)[i] = (uint32)value[i];', 'ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);', '}', 'break;', 'default:', 'ok = 0;', '}', '_TIFFfree(conv);', 'return (ok);', '}']
2024-04-26 03:53:02.922 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x40', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov eax,<MEM>', 'shl rax,0x3', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x3', '<JUMP> <LOC>', 'cmp eax,0x1', '<JUMP> <LOC>', 'cmp eax,0x2', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x20', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvtsd2ss xmm0,xmm0', 'movss <MEM>,xmm0', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagfloatarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagdoublearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagsbytearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagsshortarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rdx,rax', 'cvttsd2si eax,xmm0', 'mov <MEM>,eax', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagslongarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x8', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dl', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagbytearray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x10', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si edx,xmm0', 'mov <MEM>,dx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytagshortarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movsd xmm0,<MEM>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'cvttsd2si rdx,xmm0', 'mov <MEM>,edx', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx ecx,<MEM>', 'mov r8,<MEM>', 'mov edi,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,r8', 'mov r8d,edi', 'mov rdi,rax', 'call <tiffwritedirectorytaglongarray>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items:  74%|███████▎  | 2120/2880 [00:00<00:00, 2870.04it/s]2024-04-26 03:53:03.138 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: TIFFWriteDirectoryTagCheckedRationalArray, 6, 3
2024-04-26 03:53:03.139 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'TIFFWriteDirectoryTagCheckedRationalArray(TIFF* tif, uint32* ndir, TIFFDirEntry* dir, uint16 tag, uint32 count, float* value)', '{', 'static const char module[] = "STR";', 'uint32* m;', 'float* na;', 'uint32* nb;', 'uint32 nc;', 'int o;', 'assert(sizeof(uint32)==4);', 'm=_TIFFmalloc(count*2*sizeof(uint32));', 'if (m==NULL)', '{', 'TIFFErrorExt(tif->tif_clientdata,module,"STR");', 'return(0);', '}', 'for (na=value, nb=m, nc=0; nc<count; na++, nb+=2, nc++)', '{', 'if (*na<=0.0)', '{', 'nb[0]=0;', 'nb[1]=1;', '}', 'else if (*na==(float)(uint32)(*na))', '{', 'nb[0]=(uint32)(*na);', 'nb[1]=1;', '}', 'else if (*na<1.0)', '{', 'nb[0]=(uint32)((double)(*na)*0xFFFFFFFF);', 'nb[1]=0xFFFFFFFF;', '}', 'else', '{', 'nb[0]=0xFFFFFFFF;', 'nb[1]=(uint32)((double)0xFFFFFFFF/(*na));', '}', '}', 'if (tif->tif_flags&TIFF_SWAB)', 'TIFFSwabArrayOfLong(m,count*2);', 'o=TIFFWriteDirectoryTagData(tif,ndir,dir,tag,TIFF_RATIONAL,count,count*8,&m[0]);', '_TIFFfree(m);', 'return(o);', '}']
2024-04-26 03:53:03.140 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9', 'mov <MEM>,ax', 'mov eax,<MEM>', 'add eax,eax', 'mov eax,eax', 'shl rax,0x2', 'mov rdi,rax', 'call <_tiffmalloc@plt>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'pxor xmm0,xmm0', 'comiss xmm0,xmm1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvttss2si rax,xmm0', 'mov eax,eax', 'test rax,rax', 'js 257e7 <tiffwritedirectorytagcheckedrationalarray+OFFSET>', 'cvtsi2ss xmm0,rax', '<JUMP> <LOC>', 'mov rdx,rax', 'shr rdx,1', 'and eax,0x1', 'or rdx,rax', 'cvtsi2ss xmm0,rdx', 'addss xmm0,xmm0', 'ucomiss xmm1,xmm0', 'jp 2582b <tiffwritedirectorytagcheckedrationalarray+OFFSET>', 'ucomiss xmm1,xmm0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvttss2si rax,xmm0', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm1,<MEM>', 'movss xmm0,<MEM>', 'comiss xmm0,xmm1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvtss2sd xmm1,xmm0', 'movsd xmm0,<MEM>', 'mulsd xmm0,xmm1', 'cvttsd2si rax,xmm0', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'add rax,0x4', 'mov <MEM>,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0xffffffff', 'mov rax,<MEM>', 'movss xmm0,<MEM>', 'cvtss2sd xmm1,xmm0', 'movsd xmm0,<MEM>', 'divsd xmm0,xmm1', 'mov rax,<MEM>', 'add rax,0x4', 'cvttsd2si rdx,xmm0', 'mov <MEM>,edx', 'add <MEM>,0x4', 'add <MEM>,0x8', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'and eax,0x80', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,eax', 'mov edx,eax', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <tiffswabarrayoflong@plt>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'movzx ecx,<MEM>', 'mov r8d,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'push <MEM>', 'push rdi', 'mov r9d,r8d', 'mov r8d,0x5', 'mov rdi,rax', 'call <tiffwritedirectorytagdata>', 'add rsp,0x10', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <_tifffree@plt>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 2880/2880 [00:01<00:00, 2472.45it/s]
2024-04-26 03:53:03.738 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2880 ---> 129
2024-04-26 03:53:03.741 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['_TIFFVSetField', 'TIFFReadDirEntryFloatArray', 'TIFFWriteDirectoryTagSampleformatArray', 'TIFFWriteDirectoryTagCheckedRationalArray']
2024-04-26 03:53:03.742 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['_TIFFVSetField', 'TIFFReadDirEntryFloatArray', 'TIFFWriteDirectoryTagSampleformatArray', 'TIFFWriteDirectoryTagCheckedRationalArray']
2024-04-26 03:53:03.742 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFReadDirEntryFloatArray']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.02s/it]
2024-04-26 03:53:15.405 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9987788200378418, _TIFFVSetField ---> TIFFFetchNormalTag
2024-04-26 03:53:15.406 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9953548908233643, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntryFloatArray
2024-04-26 03:53:15.406 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9950451850891113, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntryDoubleArray
2024-04-26 03:53:15.406 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9662573933601379, TIFFReadDirEntryFloatArray ---> TIFFReadDirEntrySbyteArray
2024-04-26 03:53:15.406 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 6 ---> 4
2024-04-26 03:53:15.406 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:53:15.790 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.3611736038225812, fix prob: 3.63882640004158
2024-04-26 03:53:15.790 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:53:15.790 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:53:15.790 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:53:15.791 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:53:15.791 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 03:53:15.791 | SUCCESS  | __main__:run_experiment:651 - 	total: 300
2024-04-26 03:53:15.791 | SUCCESS  | __main__:run_experiment:652 - over filter count: 29, 9.67%
2024-04-26 03:53:15.792 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 249, 83.0%
2024-04-26 03:53:15.792 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 214, 71.33%
2024-04-26 03:53:15.792 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 165, 55.0%
2024-04-26 03:53:15.792 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 49, 16.33%
2024-04-26 03:53:15.792 | SUCCESS  | __main__:run_experiment:662 - 	tp: 49, fp: 0, tn: 0, fn: 251
2024-04-26 03:53:15.793 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 03:53:15.793 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.16333333333333333
2024-04-26 03:53:15.793 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.2808022922636103
2024-04-26 03:53:15.793 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.16333333333333333
generate_asm_function_cache: 100%|██████████| 13/13 [00:07<00:00,  1.77it/s]
2024-04-26 03:53:27.292 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 03:53:27.292 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 301 CVE-2017-9403
filter_and_generate_data_items: 100%|██████████| 1440/1440 [00:01<00:00, 1122.10it/s]
2024-04-26 03:53:33.750 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1440 ---> 5
2024-04-26 03:53:33.753 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirectory', 'main']
2024-04-26 03:53:33.754 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirectory']
2024-04-26 03:53:33.754 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  4.64it/s]
2024-04-26 03:53:33.973 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:53:33.973 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:53:33.974 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:53:33.974 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:53:33.974 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:53:33.974 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:53:33.974 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 302 CVE-2017-9404
filter_and_generate_data_items: 100%|██████████| 1440/1440 [00:00<00:00, 2340.80it/s]
2024-04-26 03:53:39.697 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1440 ---> 178
2024-04-26 03:53:39.700 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['OJPEGReadHeaderInfoSecTablesQTable', 'OJPEGReadHeaderInfoSecTablesDcTable']
2024-04-26 03:53:39.701 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['OJPEGReadHeaderInfoSecTablesQTable', 'OJPEGReadHeaderInfoSecTablesDcTable']
2024-04-26 03:53:39.701 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['OJPEGReadHeaderInfoSecTablesQTable', 'OJPEGReadHeaderInfoSecTablesDcTable']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.76s/it]
2024-04-26 03:53:47.243 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9806867241859436, OJPEGReadHeaderInfoSecTablesQTable ---> makebwmap
2024-04-26 03:53:47.243 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9661919474601746, OJPEGReadHeaderInfoSecTablesQTable ---> OJPEGReadHeaderInfoSecTablesDcTable
2024-04-26 03:53:47.244 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9658835530281067, OJPEGReadHeaderInfoSecTablesQTable ---> OJPEGReadHeaderInfoSecTablesAcTable
2024-04-26 03:53:47.244 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8337113261222839, OJPEGReadHeaderInfoSecTablesDcTable ---> OJPEGReadHeaderInfoSecTablesAcTable
2024-04-26 03:53:47.244 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 14 ---> 4
2024-04-26 03:53:47.244 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:53:47.364 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.001876572147011757, fix prob: 2.9981234073638916
2024-04-26 03:53:47.364 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:53:47.365 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:53:47.365 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:53:47.365 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:53:47.365 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 303 CVE-2017-9936
filter_and_generate_data_items:  46%|████▋     | 340/734 [00:00<00:00, 1174.14it/s]2024-04-26 03:53:52.296 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: JBIGDecode, 4, 3
2024-04-26 03:53:52.297 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int JBIGDecode(TIFF* tif, uint8* buffer, tmsize_t size, uint16 s)', '{', 'struct jbg_dec_state decoder;', 'int decodeStatus = 0;', 'unsigned char* pImage = NULL;', '(void) size, (void) s;', 'if (isFillOrder(tif, tif->tif_dir.td_fillorder))', '{', 'TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);', '}', 'jbg_dec_init(&decoder);', '#if defined(HAVE_JBG_NEWLEN)', 'jbg_newlen(tif->tif_rawdata, (size_t)tif->tif_rawdatasize);', 'decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,', '(size_t)tif->tif_rawdatasize, NULL);', 'if (JBG_EOK != decodeStatus)', '{', 'TIFFErrorExt(tif->tif_clientdata,', '"STR", "STR",', 'decodeStatus,', '#if defined(JBG_EN)', 'jbg_strerror(decodeStatus, JBG_EN)', '#else', 'jbg_strerror(decodeStatus)', '#endif', ');', 'return 0;', '}', 'pImage = jbg_dec_getimage(&decoder, 0);', '_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));', 'jbg_dec_free(&decoder);', 'return 1;', '}']
2024-04-26 03:53:52.298 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x570', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov eax,ecx', 'mov <MEM>,ax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,ax', 'and eax,edx', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <tiffreversebits@plt>', 'lea rax,<MEM>', 'mov rdi,rax', 'call <jbg_dec_init@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <jbg_newlen@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,rax', 'mov rax,<MEM>', 'mov rsi,<MEM>', 'lea rax,<MEM>', 'mov ecx,0x0', 'mov rdi,rax', 'call <jbg_dec_in@plt>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edi,eax', 'call <jbg_strerror@plt>', 'mov rcx,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov r8,rcx', 'mov ecx,edx', 'lea rdx,<MEM>', 'lea rsi,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <tifferrorext@plt>', 'mov eax,0x0', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov esi,0x0', 'mov rdi,rax', 'call <jbg_dec_getimage@plt>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov rdi,rax', 'call <jbg_dec_getsize@plt>', 'mov rdx,rax', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <_tiffmemcpy@plt>', 'lea rax,<MEM>', 'mov rdi,rax', 'call <jbg_dec_free@plt>', 'mov eax,0x1', 'mov rcx,<MEM>', 'xor rcx,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 734/734 [00:00<00:00, 1596.05it/s]
2024-04-26 03:53:52.855 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 734 ---> 29
2024-04-26 03:53:52.858 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['JBIGDecode']
2024-04-26 03:53:52.859 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['JBIGDecode']
2024-04-26 03:53:52.859 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.62it/s]
2024-04-26 03:53:53.246 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:53:53.246 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:53:53.246 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:53:53.247 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:53:53.247 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:53:53.247 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:53:53.247 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 304 CVE-2018-17100
filter_and_generate_data_items: 100%|██████████| 14/14 [00:00<00:00, 435.84it/s]
2024-04-26 03:53:58.240 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 14 ---> 2
2024-04-26 03:53:58.243 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadSeparateTileData']
2024-04-26 03:53:58.243 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['cpTags']
2024-04-26 03:53:58.244 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  6.64it/s]
2024-04-26 03:53:58.397 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:53:58.397 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 03:53:58.397 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:53:58.397 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:53:58.398 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:53:58.398 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:53:58.398 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 305 CVE-2018-18661
filter_and_generate_data_items: 100%|██████████| 14/14 [00:00<00:00, 327.93it/s]
2024-04-26 03:54:03.473 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 14 ---> 2
2024-04-26 03:54:03.475 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['main']
2024-04-26 03:54:03.476 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['main']
2024-04-26 03:54:03.477 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['main']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  6.60it/s]
2024-04-26 03:54:09.282 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9411897540092469, main ---> main
2024-04-26 03:54:09.283 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:54:09.283 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:54:09.503 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.5356977749479483, fix prob: 3.4643022418022156
2024-04-26 03:54:09.504 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:54:09.504 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:54:09.504 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:54:09.504 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:54:09.504 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 306 CVE-2018-19210
filter_and_generate_data_items: 100%|██████████| 746/746 [00:00<00:00, 1846.42it/s]
2024-04-26 03:54:14.865 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 746 ---> 212
2024-04-26 03:54:14.868 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['setExtraSamples']
2024-04-26 03:54:14.869 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['setExtraSamples']
2024-04-26 03:54:14.870 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['setExtraSamples']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.53s/it]
2024-04-26 03:54:18.347 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.268388569355011, setExtraSamples ---> setExtraSamples
2024-04-26 03:54:18.348 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:54:18.348 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:54:18.349 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:54:18.349 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:54:18.349 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:54:18.349 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:54:18.349 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:54:18.349 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 307 CVE-2018-7456
filter_and_generate_data_items: 100%|██████████| 1492/1492 [00:01<00:00, 1143.87it/s]
2024-04-26 03:54:24.562 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1492 ---> 13
2024-04-26 03:54:24.565 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFReadDirectory', 'TIFFPrintDirectory']
2024-04-26 03:54:24.565 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFReadDirectory', 'TIFFPrintDirectory']
2024-04-26 03:54:24.566 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFPrintDirectory']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  3.40it/s]
2024-04-26 03:54:26.966 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9645066857337952, TIFFPrintDirectory ---> TIFFPrintDirectory
2024-04-26 03:54:26.967 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:54:26.967 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:54:27.040 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.28082704544067383, fix prob: 0.7191729545593262
2024-04-26 03:54:27.041 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:54:27.041 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:54:27.041 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:54:27.041 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:54:27.041 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 308 CVE-2019-14973
filter_and_generate_data_items: 100%|██████████| 1440/1440 [00:00<00:00, 2303.53it/s]
2024-04-26 03:54:32.642 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1440 ---> 34
2024-04-26 03:54:32.644 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gtTileSeparate', 'gtStripSeparate']
2024-04-26 03:54:32.645 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['_TIFFMultiply64', 'gtTileSeparate', 'gtStripSeparate', 'TIFFRasterScanlineSize']
2024-04-26 03:54:32.645 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gtTileSeparate', 'gtStripSeparate']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]
2024-04-26 03:54:36.656 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8304969668388367, gtTileSeparate ---> gtStripSeparate
2024-04-26 03:54:36.657 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7635866403579712, gtStripSeparate ---> gtTileSeparate
2024-04-26 03:54:36.657 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 7 ---> 2
2024-04-26 03:54:36.657 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:54:36.657 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:54:36.658 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:54:36.658 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:54:36.658 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:54:36.658 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:54:36.658 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 309 CVE-2019-17546
filter_and_generate_data_items: 100%|██████████| 1492/1492 [00:00<00:00, 2626.87it/s]
2024-04-26 03:54:42.112 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1492 ---> 41
2024-04-26 03:54:42.115 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['gtStripContig', 'gtStripSeparate']
2024-04-26 03:54:42.116 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['gtStripContig', 'gtStripSeparate']
2024-04-26 03:54:42.116 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['gtStripContig', 'gtStripSeparate']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  1.38it/s]
2024-04-26 03:54:54.540 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8632095456123352, gtStripContig ---> gtStripContig
2024-04-26 03:54:54.541 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9571436643600464, gtStripSeparate ---> gtStripSeparate
2024-04-26 03:54:54.541 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 8 ---> 2
2024-04-26 03:54:54.541 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:54:54.826 | SUCCESS  | __main__:run_tc:491 - vul prob: 3.767196062108269, fix prob: 1.2328038606792688
2024-04-26 03:54:54.826 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:54:54.827 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:54:54.827 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:54:54.827 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 03:54:54.828 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 310 CVE-2020-35521
filter_and_generate_data_items: 100%|██████████| 11/11 [00:00<00:00, 469.78it/s]
2024-04-26 03:54:59.766 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 11 ---> 5
2024-04-26 03:54:59.769 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['cvt_whole_image']
2024-04-26 03:54:59.769 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['cvt_whole_image']
2024-04-26 03:54:59.770 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['cvt_whole_image']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  7.03it/s]
2024-04-26 03:55:00.547 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7454916834831238, cvt_whole_image ---> cvt_whole_image
2024-04-26 03:55:00.547 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:55:00.547 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:55:00.548 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:55:00.548 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:00.548 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:00.548 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:55:00.549 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:00.549 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 311 CVE-2020-35522
filter_and_generate_data_items: 100%|██████████| 11/11 [00:00<00:00, 427.17it/s]
2024-04-26 03:55:05.450 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 11 ---> 5
2024-04-26 03:55:05.454 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['cvt_whole_image']
2024-04-26 03:55:05.455 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['cvt_whole_image']
2024-04-26 03:55:05.456 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['cvt_whole_image']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  8.25it/s]
2024-04-26 03:55:05.920 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7454916834831238, cvt_whole_image ---> cvt_whole_image
2024-04-26 03:55:05.920 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:55:05.920 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:55:05.920 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:55:05.921 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:05.921 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:05.921 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:55:05.921 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:05.921 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 312 CVE-2020-35524
filter_and_generate_data_items: 100%|██████████| 79/79 [00:00<00:00, 805.61it/s]
2024-04-26 03:55:10.842 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 79 ---> 13
2024-04-26 03:55:10.844 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['t2p_read_tiff_size']
2024-04-26 03:55:10.845 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['t2p_read_tiff_size']
2024-04-26 03:55:10.845 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['t2p_read_tiff_size']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.15it/s]
2024-04-26 03:55:11.314 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx t2p_read_tiff_size t2p_read_tiff_size	0.9181445837020874	['mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x1', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x117', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,rax', 'mov rax,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x4', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x117', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,rax', 'mov rax,<MEM>', 'mov <MEM>,rdx', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x6', '<JUMP> <LOC>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x117', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tifffilename@plt>', 'mov rdx,rax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffnumberofstrips@plt>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'shl rdx,0x3', 'add rax,rdx', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x201', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x202', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tifffilename@plt>', 'mov rdx,rax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tiffwarning@plt>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x6', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tifffilename@plt>', 'mov rdx,rax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x800', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x7', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x15b', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,0x4', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov eax,eax', 'add <MEM>,rax', 'sub <MEM>,0x2', '<JUMP> <LOC>', 'mov <MEM>,0x2', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffnumberofstrips@plt>', 'mov <MEM>,eax', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x117', 'mov rdi,rax', 'mov eax,0x0', 'call <tiffgetfield@plt>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tifffilename@plt>', 'mov rdx,rax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'shl rdx,0x3', 'add rax,rdx', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'sub <MEM>,0x2', 'add <MEM>,0x2', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x2', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x6', 'mov rdi,rax', 'call <checkadd64>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov ebx,eax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <tiffscanlinesize@plt>', 'mov rcx,rax', 'mov rax,<MEM>', 'mov rdx,rax', 'mov rsi,rbx', 'mov rdi,rcx', 'call <checkmultiply64>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'cmp ax,0x2', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx ecx,ax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <checkmultiply64>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov <MEM>,0x1', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'cmp rdx,rax', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov rax,<MEM>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'xor rax,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'add rsp,0x48', 'pop rbx', 'pop rbp', 'ret']
2024-04-26 03:55:11.315 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 03:55:11.315 | SUCCESS  | __main__:run_tc:480 - confirm summary: True False False False
2024-04-26 03:55:11.316 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:11.316 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:11.316 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 03:55:11.316 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:11.316 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 313 CVE-2022-1355
filter_and_generate_data_items: 100%|██████████| 49/49 [00:00<00:00, 895.71it/s]
2024-04-26 03:55:16.335 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 49 ---> 4
2024-04-26 03:55:16.338 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['main']
2024-04-26 03:55:16.339 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['main']
2024-04-26 03:55:16.339 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['main']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  5.44it/s]
2024-04-26 03:55:16.958 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8730167150497437, main ---> main
2024-04-26 03:55:16.959 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:55:16.959 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:55:16.960 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:55:16.960 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:16.960 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:16.960 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:55:16.960 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:16.961 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 314 CVE-2022-3570
filter_and_generate_data_items:   0%|          | 0/640 [00:00<?, ?it/s]2024-04-26 03:55:21.439 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: extractContigSamples32bits, 6, 3
2024-04-26 03:55:21.440 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'extractContigSamples32bits (uint8 *in, uint8 *out, uint32 cols,', 'tsample_t sample, uint16 spp, uint16 bps,', 'tsample_t count, uint32 start, uint32 end)', '{', 'int    ready_bits = 0, sindex = 0, shift_width = 0;', 'uint32 col, src_byte, src_bit, bit_offset;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'uint8 *src = in;', 'uint8 *dst = out;', 'if ((in == NULL) || (out == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'if ((start > end) || (start > cols))', '{', 'TIFFError ("STR",', '"STR", start);', 'start = 0;', '}', 'if ((end == 0) || (end > cols))', '{', 'TIFFError ("STR",', '"STR", end);', 'end = cols;', '}', 'shift_width = ((bps + 7) / 8) + 1;', 'ready_bits = 0;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'for (col = start; col < end; col++)', '{', 'bit_offset = col * bps * spp;', 'for (sindex = sample; (sindex < spp) && (sindex < (sample + count)); sindex++)', '{', 'if (sindex == 0)', '{', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sindex * bps)) / 8;', 'src_bit  = (bit_offset + (sindex * bps)) % 8;', '}', 'src = in + src_byte;', 'matchbits = maskbits << (64 - src_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16)  | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits >= 32)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'else', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:21.441 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov esi,r8d', 'mov ecx,r9d', 'mov edx,<MEM>', 'mov <MEM>,ax', 'mov eax,esi', 'mov <MEM>,ax', 'mov eax,ecx', 'mov <MEM>,ax', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'add <MEM>,0x1', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
filter_and_generate_data_items:  15%|█▌        | 98/640 [00:00<00:00, 974.45it/s]2024-04-26 03:55:21.516 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: extractContigSamplesShifted32bits, 6, 3
2024-04-26 03:55:21.517 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'extractContigSamplesShifted32bits (uint8 *in, uint8 *out, uint32 cols,', 'tsample_t sample, uint16 spp, uint16 bps,', 'tsample_t count, uint32 start, uint32 end,', 'int shift)', '{', 'int    ready_bits = 0, sindex = 0, shift_width = 0;', 'uint32 col, src_byte, src_bit, bit_offset;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'uint8 *src = in;', 'uint8 *dst = out;', 'if ((in == NULL) || (out == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'if ((start > end) || (start > cols))', '{', 'TIFFError ("STR",', '"STR", start);', 'start = 0;', '}', 'if ((end == 0) || (end > cols))', '{', 'TIFFError ("STR",', '"STR", end);', 'end = cols;', '}', 'shift_width = ((bps + 7) / 8) + 1;', 'ready_bits = shift;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'for (col = start; col < end; col++)', '{', 'bit_offset = col * bps * spp;', 'for (sindex = sample; (sindex < spp) && (sindex < (sample + count)); sindex++)', '{', 'if (sindex == 0)', '{', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sindex * bps)) / 8;', 'src_bit  = (bit_offset + (sindex * bps)) % 8;', '}', 'src = in + src_byte;', 'matchbits = maskbits << (64 - src_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'if ((col == start) && (sindex == sample))', 'buff2 = buff3 & ((uint64)-1) << (32 - shift);', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits < 32)', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:21.518 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov esi,r8d', 'mov ecx,r9d', 'mov edx,<MEM>', 'mov <MEM>,ax', 'mov eax,esi', 'mov <MEM>,ax', 'mov eax,ecx', 'mov <MEM>,ax', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0x20', 'sub eax,<MEM>', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'and rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'add <MEM>,0x1', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
2024-04-26 03:55:21.580 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: combineSeparateSamples32bits, 6, 4
2024-04-26 03:55:21.581 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'combineSeparateSamples32bits (uint8 *in[], uint8 *out, uint32 cols,', 'uint32 rows, uint16 spp, uint16 bps,', 'FILE *dumpfile, int format, int level)', '{', 'int    ready_bits = 0, bytes_per_sample = 0, shift_width = 0;', 'uint32 src_rowsize, dst_rowsize, bit_offset, src_offset;', 'uint32 src_byte = 0, src_bit = 0;', 'uint32 row, col;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'tsample_t s;', 'unsigned char *src = in[0];', 'unsigned char *dst = out;', 'char           action[8];', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'src_rowsize = ((bps * cols) + 7) / 8;', 'dst_rowsize = ((bps * cols * spp) + 7) / 8;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'shift_width = ((bps + 7) / 8) + 1;', 'for (row = 0; row < rows; row++)', '{', 'ready_bits = 0;', 'buff1 = buff2 = 0;', 'dst = out + (row * dst_rowsize);', 'src_offset = row * src_rowsize;', 'for (col = 0; col < cols; col++)', '{', 'bit_offset = col * bps;', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', 'matchbits = maskbits << (64 - src_bit - bps);', 'for (s = 0; s < spp; s++)', '{', 'src = in[s] + src_offset + src_byte;', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits >= 32)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'else', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'ready_bits += bps;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, s, src_byte, src_bit, dst - out);', 'dump_wide (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 8);', 'dump_wide (dumpfile, format, "STR", buff1);', 'dump_wide (dumpfile, format, "STR", buff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits, action);', '}', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, src_byte, src_bit, dst - out);', 'dump_long (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 4);', 'dump_long (dumpfile, format, "STR", buff1);', 'dump_long (dumpfile, format, "STR", buff2);', 'dump_byte (dumpfile, format, "STR", bytebuff1);', 'dump_byte (dumpfile, format, "STR", bytebuff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits);', '}', 'if ((dumpfile != NULL) && (level == 2))', '{', 'dump_info (dumpfile, format, "STR","STR");', 'dump_buffer(dumpfile, format, 1, dst_rowsize, row, out);', '}', '}', 'return (0);']
2024-04-26 03:55:21.582 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0xc0', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov edx,r8d', 'mov eax,r9d', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x8', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items:  78%|███████▊  | 496/640 [00:00<00:00, 1259.13it/s]2024-04-26 03:55:21.840 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: rotateContigSamples32bits, 6, 3
2024-04-26 03:55:21.841 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'rotateContigSamples32bits(uint16 rotation, uint16 spp, uint16 bps, uint32 width,', 'uint32 length,   uint32 col, uint8 *src, uint8 *dst)', '{', 'int    ready_bits = 0, shift_width = 0;', 'int    bytes_per_sample, bytes_per_pixel;', 'uint32 row, rowsize, bit_offset;', 'uint32 src_byte, src_bit;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'uint8   *next;', 'tsample_t sample;', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'bytes_per_pixel  = ((bps * spp) + 7) / 8;', 'if (bytes_per_pixel < (bytes_per_sample + 1))', 'shift_width = bytes_per_pixel;', 'else', 'shift_width = bytes_per_sample + 1;', 'rowsize = ((bps * spp * width) + 7) / 8;', 'ready_bits = 0;', 'maskbits =  (uint64)-1 >> (64 - bps);', 'buff1 = buff2 = 0;', 'for (row = 0; row < length; row++)', '{', 'bit_offset = col * bps * spp;', 'for (sample = 0; sample < spp; sample++)', '{', 'if (sample == 0)', '{', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sample * bps)) / 8;', 'src_bit  = (bit_offset + (sample * bps)) % 8;', '}', 'switch (rotation)', '{', 'case  90: next = src + src_byte - (row * rowsize);', 'break;', 'case 270: next = src + src_byte + (row * rowsize);', 'break;', 'default:  TIFFError("STR", "STR", rotation);', 'return (1);', '}', 'matchbits = maskbits << (64 - src_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (next[0] << 24) | (next[1] << 16) | (next[2] << 8) | next[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (next[3] << 24) | (next[2] << 16) | (next[1] << 8) | next[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits < 32)', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:21.842 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov eax,edx', 'mov <MEM>,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9d', 'mov edx,edi', 'mov <MEM>,dx', 'mov edx,esi', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp eax,0x5a', '<JUMP> <LOC>', 'cmp eax,0x10e', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov eax,eax', 'sub rdx,rax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov eax,eax', 'add rdx,rax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
2024-04-26 03:55:21.879 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: reverseSamples32bits, 5, 3
2024-04-26 03:55:21.880 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'reverseSamples32bits (uint16 spp, uint16 bps, uint32 width,', 'uint8 *ibuff, uint8 *obuff)', '{', 'int    ready_bits = 0, shift_width = 0;', 'int    bytes_per_sample, bytes_per_pixel;', 'uint32 bit_offset;', 'uint32 src_byte = 0, high_bit = 0;', 'uint32 col;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 mask_bits = 0, match_bits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'unsigned char *src;', 'unsigned char *dst;', 'tsample_t sample;', 'if ((ibuff == NULL) || (obuff == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'ready_bits = 0;', 'mask_bits =  (uint64)-1 >> (64 - bps);', 'dst = obuff;', 'bytes_per_sample = (bps + 7) / 8;', 'bytes_per_pixel  = ((bps * spp) + 7) / 8;', 'if (bytes_per_pixel < (bytes_per_sample + 1))', 'shift_width = bytes_per_pixel;', 'else', 'shift_width = bytes_per_sample + 1;', 'for (col = width; col > 0; col--)', '{', 'bit_offset = (col - 1) * bps * spp;', 'for (sample = 0; sample < spp; sample++)', '{', 'if (sample == 0)', '{', 'src_byte = bit_offset / 8;', 'high_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sample * bps)) / 8;', 'high_bit  = (bit_offset + (sample * bps)) % 8;', '}', 'src = ibuff + src_byte;', 'match_bits = mask_bits << (64 - high_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & match_bits) << (high_bit);', 'if (ready_bits < 32)', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:21.880 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov eax,esi', 'mov <MEM>,edx', 'mov <MEM>,rcx', 'mov <MEM>,r8', 'mov edx,edi', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'imul edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'sub <MEM>,0x1', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 640/640 [00:00<00:00, 1298.70it/s]
2024-04-26 03:55:22.328 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 640 ---> 92
2024-04-26 03:55:22.330 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['extractContigSamples32bits', 'extractContigSamplesShifted32bits', 'combineSeparateSamples32bits', 'combineSeparateTileSamples32bits', 'writeSingleSection', 'writeCroppedImage', 'rotateContigSamples32bits', 'reverseSamples32bits']
2024-04-26 03:55:22.331 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['extractContigSamples32bits', 'extractContigSamplesShifted32bits', 'combineSeparateSamples32bits', 'combineSeparateTileSamples32bits', 'writeSingleSection', 'writeCroppedImage', 'rotateContigSamples32bits', 'reverseSamples32bits']
2024-04-26 03:55:22.331 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['combineSeparateTileSamples32bits', 'writeSingleSection', 'writeCroppedImage']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.47s/it]
2024-04-26 03:55:23.814 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx combineSeparateTileSamples32bits combineSeparateTileSamples32bits	0.9998478889465332	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x8', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:55:27.016 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9985658526420593, writeSingleSection ---> writeSingleSection
2024-04-26 03:55:27.017 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9660190343856812, writeSingleSection ---> writeCroppedImage
2024-04-26 03:55:27.017 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9985658526420593, writeCroppedImage ---> writeSingleSection
2024-04-26 03:55:27.017 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9660190343856812, writeCroppedImage ---> writeCroppedImage
2024-04-26 03:55:27.018 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 4
2024-04-26 03:55:27.018 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:55:27.295 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.872111737728119, fix prob: 2.127888321876526
2024-04-26 03:55:27.295 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:27.295 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:27.296 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:55:27.296 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:27.296 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 315 CVE-2022-3598
filter_and_generate_data_items:   0%|          | 0/640 [00:00<?, ?it/s]2024-04-26 03:55:31.837 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: extractContigSamples32bits, 6, 3
2024-04-26 03:55:31.838 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'extractContigSamples32bits (uint8 *in, uint8 *out, uint32 cols,', 'tsample_t sample, uint16 spp, uint16 bps,', 'tsample_t count, uint32 start, uint32 end)', '{', 'int    ready_bits = 0, sindex = 0, shift_width = 0;', 'uint32 col, src_byte, src_bit, bit_offset;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'uint8 *src = in;', 'uint8 *dst = out;', 'if ((in == NULL) || (out == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'if ((start > end) || (start > cols))', '{', 'TIFFError ("STR",', '"STR", start);', 'start = 0;', '}', 'if ((end == 0) || (end > cols))', '{', 'TIFFError ("STR",', '"STR", end);', 'end = cols;', '}', 'shift_width = ((bps + 7) / 8) + 1;', 'ready_bits = 0;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'for (col = start; col < end; col++)', '{', 'bit_offset = col * bps * spp;', 'for (sindex = sample; (sindex < spp) && (sindex < (sample + count)); sindex++)', '{', 'if (sindex == 0)', '{', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sindex * bps)) / 8;', 'src_bit  = (bit_offset + (sindex * bps)) % 8;', '}', 'src = in + src_byte;', 'matchbits = maskbits << (64 - src_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16)  | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits >= 32)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'else', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:31.839 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov esi,r8d', 'mov ecx,r9d', 'mov edx,<MEM>', 'mov <MEM>,ax', 'mov eax,esi', 'mov <MEM>,ax', 'mov eax,ecx', 'mov <MEM>,ax', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'add <MEM>,0x1', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
2024-04-26 03:55:31.895 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: extractContigSamplesShifted32bits, 6, 3
2024-04-26 03:55:31.896 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'extractContigSamplesShifted32bits (uint8 *in, uint8 *out, uint32 cols,', 'tsample_t sample, uint16 spp, uint16 bps,', 'tsample_t count, uint32 start, uint32 end,', 'int shift)', '{', 'int    ready_bits = 0, sindex = 0, shift_width = 0;', 'uint32 col, src_byte, src_bit, bit_offset;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'uint8 *src = in;', 'uint8 *dst = out;', 'if ((in == NULL) || (out == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'if ((start > end) || (start > cols))', '{', 'TIFFError ("STR",', '"STR", start);', 'start = 0;', '}', 'if ((end == 0) || (end > cols))', '{', 'TIFFError ("STR",', '"STR", end);', 'end = cols;', '}', 'shift_width = ((bps + 7) / 8) + 1;', 'ready_bits = shift;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'for (col = start; col < end; col++)', '{', 'bit_offset = col * bps * spp;', 'for (sindex = sample; (sindex < spp) && (sindex < (sample + count)); sindex++)', '{', 'if (sindex == 0)', '{', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sindex * bps)) / 8;', 'src_bit  = (bit_offset + (sindex * bps)) % 8;', '}', 'src = in + src_byte;', 'matchbits = maskbits << (64 - src_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'if ((col == start) && (sindex == sample))', 'buff2 = buff3 & ((uint64)-1) << (32 - shift);', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits < 32)', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:31.896 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov eax,ecx', 'mov esi,r8d', 'mov ecx,r9d', 'mov edx,<MEM>', 'mov <MEM>,ax', 'mov eax,esi', 'mov <MEM>,ax', 'mov eax,ecx', 'mov <MEM>,ax', 'mov eax,edx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0x20', 'sub eax,<MEM>', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'and rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'add <MEM>,0x1', 'movzx eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
filter_and_generate_data_items:  18%|█▊        | 113/640 [00:00<00:00, 1112.80it/s]2024-04-26 03:55:31.978 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: combineSeparateSamples32bits, 6, 4
2024-04-26 03:55:31.979 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'combineSeparateSamples32bits (uint8 *in[], uint8 *out, uint32 cols,', 'uint32 rows, uint16 spp, uint16 bps,', 'FILE *dumpfile, int format, int level)', '{', 'int    ready_bits = 0, bytes_per_sample = 0, shift_width = 0;', 'uint32 src_rowsize, dst_rowsize, bit_offset, src_offset;', 'uint32 src_byte = 0, src_bit = 0;', 'uint32 row, col;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'tsample_t s;', 'unsigned char *src = in[0];', 'unsigned char *dst = out;', 'char           action[8];', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'src_rowsize = ((bps * cols) + 7) / 8;', 'dst_rowsize = ((bps * cols * spp) + 7) / 8;', 'maskbits =  (uint64)-1 >> ( 64 - bps);', 'shift_width = ((bps + 7) / 8) + 1;', 'for (row = 0; row < rows; row++)', '{', 'ready_bits = 0;', 'buff1 = buff2 = 0;', 'dst = out + (row * dst_rowsize);', 'src_offset = row * src_rowsize;', 'for (col = 0; col < cols; col++)', '{', 'bit_offset = col * bps;', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', 'matchbits = maskbits << (64 - src_bit - bps);', 'for (s = 0; s < spp; s++)', '{', 'src = in[s] + src_offset + src_byte;', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits >= 32)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'else', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', 'strcpy (action, "STR");', '}', 'ready_bits += bps;', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, s, src_byte, src_bit, dst - out);', 'dump_wide (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 8);', 'dump_wide (dumpfile, format, "STR", buff1);', 'dump_wide (dumpfile, format, "STR", buff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits, action);', '}', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'if ((dumpfile != NULL) && (level == 3))', '{', 'dump_info (dumpfile, format, "STR",', '"STR",', 'row + 1, col + 1, src_byte, src_bit, dst - out);', 'dump_long (dumpfile, format, "STR", matchbits);', 'dump_data (dumpfile, format, "STR", src, 4);', 'dump_long (dumpfile, format, "STR", buff1);', 'dump_long (dumpfile, format, "STR", buff2);', 'dump_byte (dumpfile, format, "STR", bytebuff1);', 'dump_byte (dumpfile, format, "STR", bytebuff2);', 'dump_info (dumpfile, format, "STR", "STR", ready_bits);', '}', 'if ((dumpfile != NULL) && (level == 2))', '{', 'dump_info (dumpfile, format, "STR","STR");', 'dump_buffer(dumpfile, format, 1, dst_rowsize, row, out);', '}', '}', 'return (0);']
2024-04-26 03:55:31.980 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0xc0', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,edx', 'mov <MEM>,ecx', 'mov edx,r8d', 'mov eax,r9d', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x8', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
filter_and_generate_data_items:  89%|████████▉ | 571/640 [00:00<00:00, 1529.38it/s]2024-04-26 03:55:32.192 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: rotateContigSamples32bits, 6, 3
2024-04-26 03:55:32.193 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'rotateContigSamples32bits(uint16 rotation, uint16 spp, uint16 bps, uint32 width,', 'uint32 length,   uint32 col, uint8 *src, uint8 *dst)', '{', 'int    ready_bits = 0, shift_width = 0;', 'int    bytes_per_sample, bytes_per_pixel;', 'uint32 row, rowsize, bit_offset;', 'uint32 src_byte, src_bit;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 maskbits = 0, matchbits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'uint8   *next;', 'tsample_t sample;', 'if ((src == NULL) || (dst == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'bytes_per_sample = (bps + 7) / 8;', 'bytes_per_pixel  = ((bps * spp) + 7) / 8;', 'if (bytes_per_pixel < (bytes_per_sample + 1))', 'shift_width = bytes_per_pixel;', 'else', 'shift_width = bytes_per_sample + 1;', 'rowsize = ((bps * spp * width) + 7) / 8;', 'ready_bits = 0;', 'maskbits =  (uint64)-1 >> (64 - bps);', 'buff1 = buff2 = 0;', 'for (row = 0; row < length; row++)', '{', 'bit_offset = col * bps * spp;', 'for (sample = 0; sample < spp; sample++)', '{', 'if (sample == 0)', '{', 'src_byte = bit_offset / 8;', 'src_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sample * bps)) / 8;', 'src_bit  = (bit_offset + (sample * bps)) % 8;', '}', 'switch (rotation)', '{', 'case  90: next = src + src_byte - (row * rowsize);', 'break;', 'case 270: next = src + src_byte + (row * rowsize);', 'break;', 'default:  TIFFError("STR", "STR", rotation);', 'return (1);', '}', 'matchbits = maskbits << (64 - src_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (next[0] << 24) | (next[1] << 16) | (next[2] << 8) | next[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (next[3] << 24) | (next[2] << 16) | (next[1] << 8) | next[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & matchbits) << (src_bit);', 'if (ready_bits < 32)', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:32.193 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov eax,edx', 'mov <MEM>,ecx', 'mov <MEM>,r8d', 'mov <MEM>,r9d', 'mov edx,edi', 'mov <MEM>,dx', 'mov edx,esi', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'cmp eax,0x5a', '<JUMP> <LOC>', 'cmp eax,0x10e', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov eax,eax', 'sub rdx,rax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov eax,eax', 'add rdx,rax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,eax', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
2024-04-26 03:55:32.237 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: reverseSamples32bits, 5, 3
2024-04-26 03:55:32.238 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int', 'reverseSamples32bits (uint16 spp, uint16 bps, uint32 width,', 'uint8 *ibuff, uint8 *obuff)', '{', 'int    ready_bits = 0, shift_width = 0;', 'int    bytes_per_sample, bytes_per_pixel;', 'uint32 bit_offset;', 'uint32 src_byte = 0, high_bit = 0;', 'uint32 col;', 'uint32 longbuff1 = 0, longbuff2 = 0;', 'uint64 mask_bits = 0, match_bits = 0;', 'uint64 buff1 = 0, buff2 = 0, buff3 = 0;', 'uint8  bytebuff1 = 0, bytebuff2 = 0, bytebuff3 = 0, bytebuff4 = 0;', 'unsigned char *src;', 'unsigned char *dst;', 'tsample_t sample;', 'if ((ibuff == NULL) || (obuff == NULL))', '{', 'TIFFError("STR","STR");', 'return (1);', '}', 'ready_bits = 0;', 'mask_bits =  (uint64)-1 >> (64 - bps);', 'dst = obuff;', 'bytes_per_sample = (bps + 7) / 8;', 'bytes_per_pixel  = ((bps * spp) + 7) / 8;', 'if (bytes_per_pixel < (bytes_per_sample + 1))', 'shift_width = bytes_per_pixel;', 'else', 'shift_width = bytes_per_sample + 1;', 'for (col = width; col > 0; col--)', '{', 'bit_offset = (col - 1) * bps * spp;', 'for (sample = 0; sample < spp; sample++)', '{', 'if (sample == 0)', '{', 'src_byte = bit_offset / 8;', 'high_bit  = bit_offset % 8;', '}', 'else', '{', 'src_byte = (bit_offset + (sample * bps)) / 8;', 'high_bit  = (bit_offset + (sample * bps)) % 8;', '}', 'src = ibuff + src_byte;', 'match_bits = mask_bits << (64 - high_bit - bps);', 'if (little_endian)', '{', 'longbuff1 = (src[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];', 'longbuff2 = longbuff1;', '}', 'else', '{', 'longbuff1 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];', 'longbuff2 = longbuff1;', '}', 'buff3 = ((uint64)longbuff1 << 32) | longbuff2;', 'buff1 = (buff3 & match_bits) << (high_bit);', 'if (ready_bits < 32)', 'bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0;', 'buff2 = (buff2 | (buff1 >> ready_bits));', '}', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'bytebuff2 = (buff2 >> 48);', '*dst++ = bytebuff2;', 'bytebuff3 = (buff2 >> 40);', '*dst++ = bytebuff3;', 'bytebuff4 = (buff2 >> 32);', '*dst++ = bytebuff4;', 'ready_bits -= 32;', 'buff2 = ((buff2 << 32) | (buff1 >> ready_bits));', '}', 'ready_bits += bps;', '}', '}', 'while (ready_bits > 0)', '{', 'bytebuff1 = (buff2 >> 56);', '*dst++ = bytebuff1;', 'buff2 = (buff2 << 8);', 'ready_bits -= 8;', '}', 'return (0);']
2024-04-26 03:55:32.238 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x90', 'mov eax,esi', 'mov <MEM>,edx', 'mov <MEM>,rcx', 'mov <MEM>,r8', 'mov edx,edi', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'lea edx,<MEM>', 'movzx eax,<MEM>', 'imul edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', '<JUMP> <LOC>', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'movzx eax,<MEM>', 'imul eax,edx', 'mov edx,eax', 'mov eax,<MEM>', 'add eax,edx', 'and eax,0x7', 'mov <MEM>,eax', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add <MEM>,eax', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'sub <MEM>,0x1', 'cmp <MEM>,0x0', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 640/640 [00:00<00:00, 1417.50it/s]
2024-04-26 03:55:32.683 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 640 ---> 92
2024-04-26 03:55:32.685 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['extractContigSamples32bits', 'extractContigSamplesShifted32bits', 'combineSeparateSamples32bits', 'combineSeparateTileSamples32bits', 'writeSingleSection', 'writeCroppedImage', 'rotateContigSamples32bits', 'reverseSamples32bits']
2024-04-26 03:55:32.686 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['extractContigSamples32bits', 'extractContigSamplesShifted32bits', 'combineSeparateSamples32bits', 'combineSeparateTileSamples32bits', 'writeSingleSection', 'writeCroppedImage', 'rotateContigSamples32bits', 'reverseSamples32bits']
2024-04-26 03:55:32.686 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['combineSeparateTileSamples32bits', 'writeSingleSection', 'writeCroppedImage']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:01<00:00,  1.46s/it]
2024-04-26 03:55:34.158 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx combineSeparateTileSamples32bits combineSeparateTileSamples32bits	0.9998478889465332	['mov edx,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,dx', 'mov <MEM>,ax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'lea rsi,<MEM>', 'lea rdi,<MEM>', 'mov eax,0x0', 'call <tifferror@plt>', 'mov eax,0x1', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'movzx eax,<MEM>', 'imul eax,edx', 'add eax,0x7', 'shr eax,0x3', 'mov <MEM>,eax', 'movzx eax,<MEM>', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,0xffffffffffffffff', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'movzx eax,<MEM>', 'add eax,0x7', 'lea edx,<MEM>', 'test eax,eax', 'cmovs eax,edx', 'sar eax,0x3', 'add eax,0x1', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'imul eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shr eax,0x3', 'mov <MEM>,eax', 'mov eax,<MEM>', 'and eax,0x7', 'mov <MEM>,eax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'add eax,edx', 'mov edx,0x40', 'sub edx,eax', 'mov eax,edx', 'mov rdx,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'movzx eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov rax,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'add rdx,rcx', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'add rax,0x3', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x18', 'mov edx,eax', 'mov rax,<MEM>', 'add rax,0x2', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x10', 'or edx,eax', 'mov rax,<MEM>', 'add rax,0x1', 'movzx eax,<MEM>', 'movzx eax,al', 'shl eax,0x8', 'or edx,eax', 'mov rax,<MEM>', 'movzx eax,<MEM>', 'movzx eax,al', 'or eax,edx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'shl rax,0x20', 'mov rdx,rax', 'mov eax,<MEM>', 'or rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'and rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov ecx,eax', 'shl rdx,cl', 'mov rax,rdx', 'mov <MEM>,rax', 'cmp <MEM>,0x1f', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x30', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x28', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'mov rax,<MEM>', 'shr rax,0x20', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'sub <MEM>,0x20', 'mov rax,<MEM>', 'shl rax,0x20', 'mov rsi,rax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or rax,rsi', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x73756c46', 'mov <MEM>,0x68', '<JUMP> <LOC>', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'movzx eax,<MEM>', 'mov <MEM>,al', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'mov ecx,eax', 'shr rdx,cl', 'mov rax,rdx', 'or <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,0x61647055', 'mov <MEM>,0x6574', 'mov <MEM>,0x0', 'movzx eax,<MEM>', 'add <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rcx,rax', 'movzx edx,<MEM>', 'mov eax,<MEM>', 'lea r8d,<MEM>', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'mov ecx,<MEM>', 'push rcx', 'push rdx', 'mov r9d,r8d', 'mov r8d,edi', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x8', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_wide>', 'lea rcx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rcx', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'movzx eax,<MEM>', 'add eax,0x1', 'mov <MEM>,ax', 'movzx eax,<MEM>', 'cmp ax,<MEM>', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'shr rax,0x38', 'mov <MEM>,al', 'mov rax,<MEM>', 'lea rdx,<MEM>', 'mov <MEM>,rdx', 'movzx edx,<MEM>', 'mov <MEM>,dl', 'shl <MEM>,0x8', 'sub <MEM>,0x8', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x3', '<JUMP> <LOC>', 'mov rax,<MEM>', 'sub rax,<MEM>', 'mov rdx,rax', 'mov eax,<MEM>', 'lea edi,<MEM>', 'mov eax,<MEM>', 'lea ecx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov edx,<MEM>', 'push rdx', 'mov r9d,edi', 'mov r8d,ecx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'add rsp,0x20', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x4', 'mov rcx,rdx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_data>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'mov rax,<MEM>', 'mov edx,eax', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_long>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'movzx edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov ecx,edx', 'lea rdx,<MEM>', 'mov rdi,rax', 'call <dump_byte>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r8d,edx', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x2', '<JUMP> <LOC>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'lea rdx,<MEM>', 'mov rdi,rax', 'mov eax,0x0', 'call <dump_info>', 'mov rdi,<MEM>', 'mov ecx,<MEM>', 'mov edx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov r9,rdi', 'mov r8d,ecx', 'mov ecx,edx', 'mov edx,0x1', 'mov rdi,rax', 'call <dump_buffer>', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 03:55:37.667 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9985658526420593, writeSingleSection ---> writeSingleSection
2024-04-26 03:55:37.667 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9660190343856812, writeSingleSection ---> writeCroppedImage
2024-04-26 03:55:37.667 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9985658526420593, writeCroppedImage ---> writeSingleSection
2024-04-26 03:55:37.667 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9660190343856812, writeCroppedImage ---> writeCroppedImage
2024-04-26 03:55:37.667 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 4
2024-04-26 03:55:37.668 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:55:37.947 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.872111737728119, fix prob: 2.127888321876526
2024-04-26 03:55:37.947 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:37.948 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:37.948 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:55:37.948 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:37.948 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 316 CVE-2022-3599
filter_and_generate_data_items: 100%|██████████| 590/590 [00:00<00:00, 1525.69it/s]
2024-04-26 03:55:43.258 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 590 ---> 12
2024-04-26 03:55:43.259 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['TIFFPrintDirectory']
2024-04-26 03:55:43.260 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['TIFFPrintDirectory']
2024-04-26 03:55:43.260 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['TIFFPrintDirectory']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  3.40it/s]
2024-04-26 03:55:45.314 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8770208358764648, TIFFPrintDirectory ---> TIFFPrintDirectory
2024-04-26 03:55:45.314 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:55:45.314 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:55:45.315 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:55:45.315 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:55:45.315 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:55:45.315 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:55:45.315 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:55:45.316 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 317 CVE-2009-2414
filter_and_generate_data_items: 100%|██████████| 748/748 [00:00<00:00, 1250.64it/s]
2024-04-26 03:55:50.779 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 748 ---> 228
2024-04-26 03:55:50.782 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['xmlParseEnumerationType']
2024-04-26 03:55:50.783 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['xmlParseEnumerationType']
2024-04-26 03:55:50.783 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['xmlParseEnumerationType']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.53s/it]
2024-04-26 03:56:11.509 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8983395099639893, xmlParseEnumerationType ---> xmlParseEnumerationType
2024-04-26 03:56:11.510 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 38 ---> 1
2024-04-26 03:56:11.510 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:56:11.511 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:56:11.511 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:56:11.511 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:56:11.512 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:56:11.512 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:56:11.516 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 318 CVE-2020-7595
filter_and_generate_data_items: 100%|██████████| 2998/2998 [00:01<00:00, 2065.57it/s]
2024-04-26 03:56:17.868 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 2998 ---> 547
2024-04-26 03:56:17.871 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['xmlSchemaPreRun']
2024-04-26 03:56:17.871 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['xmlSchemaPreRun']
2024-04-26 03:56:17.872 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['xmlSchemaPreRun']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:07<00:00,  1.57s/it]
2024-04-26 03:56:25.841 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.39201468229293823, xmlSchemaPreRun ---> xmlSchemaPreRun
2024-04-26 03:56:25.843 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:56:25.843 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:56:25.844 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:56:25.845 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:56:25.845 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:56:25.845 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:56:25.846 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:56:25.846 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 319 CVE-2019-1543
filter_and_generate_data_items: 100%|██████████| 6319/6319 [00:02<00:00, 2654.87it/s]
2024-04-26 03:56:33.159 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 6319 ---> 238
2024-04-26 03:56:33.161 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['chacha20_poly1305_ctrl']
2024-04-26 03:56:33.161 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['chacha20_poly1305_ctrl']
2024-04-26 03:56:33.162 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['chacha20_poly1305_ctrl']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.68s/it]
2024-04-26 03:56:37.972 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9066872596740723, chacha20_poly1305_ctrl ---> aes_gcm_ctrl
2024-04-26 03:56:37.972 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 4 ---> 1
2024-04-26 03:56:37.972 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 03:56:38.045 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.3730575442314148, fix prob: 0.6269424557685852
2024-04-26 03:56:38.046 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:56:38.046 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:56:38.046 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:56:38.046 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:56:38.046 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 320 CVE-2019-1549
filter_and_generate_data_items: 100%|██████████| 18963/18963 [00:06<00:00, 2977.41it/s]
2024-04-26 03:56:49.295 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 18963 ---> 758
2024-04-26 03:56:49.301 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['*rand_drbg_new', 'RAND_DRBG_generate', 'test_rand_drbg_reseed']
2024-04-26 03:56:49.302 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['rand_drbg_new', 'RAND_DRBG_generate', 'rand_drbg_cleanup_additional_data']
2024-04-26 03:56:49.302 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['rand_drbg_new', 'RAND_DRBG_generate']
confirming functions(batch_size: 128):: 100%|██████████| 6/6 [00:11<00:00,  1.85s/it]
2024-04-26 03:57:06.386 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9702514111995697, RAND_DRBG_generate ---> RAND_DRBG_generate
2024-04-26 03:57:06.387 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8396288156509399, test_rand_drbg_reseed ---> sha1_block_data_order_avx
2024-04-26 03:57:06.387 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7008810639381409, rand_drbg_new ---> addrinfo_wrap
2024-04-26 03:57:06.387 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 7 ---> 3
2024-04-26 03:57:06.387 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:57:06.571 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.4512012302875519, fix prob: 1.5487987995147705
2024-04-26 03:57:06.571 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:57:06.572 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:57:06.572 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:57:06.572 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:57:06.572 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 03:57:06.572 | SUCCESS  | __main__:run_experiment:651 - 	total: 320
2024-04-26 03:57:06.573 | SUCCESS  | __main__:run_experiment:652 - over filter count: 32, 10.0%
2024-04-26 03:57:06.573 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 265, 82.81%
2024-04-26 03:57:06.573 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 227, 70.94%
2024-04-26 03:57:06.573 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 175, 54.69%
2024-04-26 03:57:06.573 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 50, 15.62%
2024-04-26 03:57:06.573 | SUCCESS  | __main__:run_experiment:662 - 	tp: 50, fp: 0, tn: 0, fn: 270
2024-04-26 03:57:06.574 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 03:57:06.574 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.15625
2024-04-26 03:57:06.574 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.2702702702702703
2024-04-26 03:57:06.574 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.15625
generate_asm_function_cache: 100%|██████████| 12/12 [00:19<00:00,  1.62s/it]
2024-04-26 03:57:30.879 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 03:57:30.879 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 321 CVE-2019-1563
filter_and_generate_data_items: 100%|██████████| 25284/25284 [00:08<00:00, 3130.89it/s]
2024-04-26 03:57:51.194 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 25284 ---> 1268
2024-04-26 03:57:51.203 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['cms_RecipientInfo_ktri_decrypt', 'CMS_decrypt', 'pkcs7_decrypt_rinfo', '*PKCS7_dataDecode']
2024-04-26 03:57:51.204 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['cms_RecipientInfo_ktri_decrypt', 'CMS_decrypt', 'pkcs7_decrypt_rinfo', 'PKCS7_dataDecode']
2024-04-26 03:57:51.205 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['cms_RecipientInfo_ktri_decrypt', 'CMS_decrypt', 'pkcs7_decrypt_rinfo', 'PKCS7_dataDecode']
confirming functions(batch_size: 128):: 100%|██████████| 10/10 [00:18<00:00,  1.82s/it]
2024-04-26 03:58:13.650 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9061447183291117, cms_RecipientInfo_ktri_decrypt ---> cms_RecipientInfo_ktri_decrypt
2024-04-26 03:58:13.651 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9983264803886414, CMS_decrypt ---> CMS_decrypt
2024-04-26 03:58:13.651 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8016860485076904, pkcs7_decrypt_rinfo ---> pkcs7_decrypt_rinfo
2024-04-26 03:58:13.651 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9991784691810608, PKCS7_dataDecode ---> PKCS7_dataDecode
2024-04-26 03:58:13.652 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9958147406578064, PKCS7_dataDecode ---> X509_print_ex
2024-04-26 03:58:13.652 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9923896193504333, PKCS7_dataDecode ---> PEM_X509_INFO_read_bio
2024-04-26 03:58:13.652 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 9 ---> 6
2024-04-26 03:58:13.652 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:58:14.044 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.9293430136950589, fix prob: 5.070656836032867
2024-04-26 03:58:14.045 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:58:14.052 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:58:14.053 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:58:14.053 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:58:14.053 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 322 CVE-2020-1967
filter_and_generate_data_items: 100%|██████████| 1260/1260 [00:00<00:00, 2875.17it/s]
2024-04-26 03:58:19.177 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1260 ---> 140
2024-04-26 03:58:19.179 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['tls1_check_sig_alg']
2024-04-26 03:58:19.180 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['tls1_check_sig_alg']
2024-04-26 03:58:19.181 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['tls1_check_sig_alg']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.17s/it]
2024-04-26 03:58:21.680 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.5271532535552979, tls1_check_sig_alg ---> tls1_check_sig_alg
2024-04-26 03:58:21.681 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 03:58:21.681 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:58:21.681 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:58:21.682 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:58:21.682 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:58:21.682 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:58:21.682 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:58:21.682 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 323 CVE-2020-1971
filter_and_generate_data_items:  31%|███       | 5849/18990 [00:02<00:03, 3361.80it/s]2024-04-26 03:58:28.023 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: GENERAL_NAME_cmp, 2, 3
2024-04-26 03:58:28.024 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)', '{', 'int result = -1;', 'if (!a || !b || a->type != b->type)', 'return -1;', 'switch (a->type) {', 'case GEN_X400:', 'case GEN_EDIPARTY:', 'result = ASN1_TYPE_cmp(a->d.other, b->d.other);', 'break;', 'case GEN_OTHERNAME:', 'result = OTHERNAME_cmp(a->d.otherName, b->d.otherName);', 'break;', 'case GEN_EMAIL:', 'case GEN_DNS:', 'case GEN_URI:', 'result = ASN1_STRING_cmp(a->d.ia5, b->d.ia5);', 'break;', 'case GEN_DIRNAME:', 'result = X509_NAME_cmp(a->d.dirn, b->d.dirn);', 'break;', 'case GEN_IPADD:', 'result = ASN1_OCTET_STRING_cmp(a->d.ip, b->d.ip);', 'break;', 'case GEN_RID:', 'result = OBJ_cmp(a->d.rid, b->d.rid);', 'break;', '}', 'return result;', '}']
2024-04-26 03:58:28.025 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x20', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,0xffffffff', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x8', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <asn1_type_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <othername_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <asn1_string_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <x509_name_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <asn1_octet_string_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <obj_cmp>', 'mov <MEM>,eax', 'nop', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 18990/18990 [00:05<00:00, 3187.71it/s]
2024-04-26 03:58:32.380 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 18990 ---> 2230
2024-04-26 03:58:32.387 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['GENERAL_NAME_cmp', 'GENERAL_NAME_set0_value', '*GENERAL_NAME_get0_value']
2024-04-26 03:58:32.388 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['GENERAL_NAME_cmp', 'GENERAL_NAME_set0_value', 'GENERAL_NAME_get0_value']
2024-04-26 03:58:32.388 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['GENERAL_NAME_set0_value', 'GENERAL_NAME_get0_value']
confirming functions(batch_size: 128):: 100%|██████████| 18/18 [00:32<00:00,  1.79s/it]
2024-04-26 03:59:05.849 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6642259359359741, GENERAL_NAME_cmp ---> X509_check_akid
2024-04-26 03:59:05.850 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9388108253479004, GENERAL_NAME_set0_value ---> GENERAL_NAME_set0_value
2024-04-26 03:59:05.850 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9999253749847412, GENERAL_NAME_get0_value ---> GENERAL_NAME_get0_value
2024-04-26 03:59:05.850 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 18 ---> 3
2024-04-26 03:59:05.850 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:59:05.988 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.007365132876657299, fix prob: 1.992634892463684
2024-04-26 03:59:05.988 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:59:05.988 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:59:05.988 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:59:05.988 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:59:05.989 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 324 CVE-2021-23840
filter_and_generate_data_items: 100%|██████████| 12664/12664 [00:04<00:00, 3033.30it/s]
2024-04-26 03:59:14.884 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 12664 ---> 386
2024-04-26 03:59:14.887 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['evp_EncryptDecryptUpdate', 'EVP_DecryptUpdate']
2024-04-26 03:59:14.887 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['evp_EncryptDecryptUpdate', 'EVP_DecryptUpdate']
2024-04-26 03:59:14.888 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['evp_EncryptDecryptUpdate', 'EVP_DecryptUpdate']
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:05<00:00,  1.35s/it]
2024-04-26 03:59:21.229 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8283683657646179, evp_EncryptDecryptUpdate ---> evp_EncryptDecryptUpdate
2024-04-26 03:59:21.229 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9820898771286011, EVP_DecryptUpdate ---> EVP_DecryptUpdate
2024-04-26 03:59:21.230 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9707673192024231, EVP_DecryptUpdate ---> evp_EncryptDecryptUpdate
2024-04-26 03:59:21.230 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 3
2024-04-26 03:59:21.230 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:59:21.371 | SUCCESS  | __main__:run_tc:491 - vul prob: 9.783040866295778e-08, fix prob: 1.9999998807907104
2024-04-26 03:59:21.371 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:59:21.371 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:59:21.371 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:59:21.372 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:59:21.372 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 325 CVE-2021-23841
filter_and_generate_data_items: 100%|██████████| 6332/6332 [00:02<00:00, 3090.32it/s]
2024-04-26 03:59:28.173 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 6332 ---> 624
2024-04-26 03:59:28.176 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['X509_issuer_and_serial_hash']
2024-04-26 03:59:28.177 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['X509_issuer_and_serial_hash']
2024-04-26 03:59:28.178 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['X509_issuer_and_serial_hash']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:09<00:00,  1.83s/it]
2024-04-26 03:59:37.539 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8586187362670898, X509_issuer_and_serial_hash ---> X509_issuer_and_serial_hash
2024-04-26 03:59:37.539 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 03:59:37.540 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 03:59:37.540 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 03:59:37.540 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:59:37.541 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:59:37.541 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:59:37.541 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:59:37.541 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 326 CVE-2021-3449
filter_and_generate_data_items: 100%|██████████| 1260/1260 [00:00<00:00, 2867.28it/s]
2024-04-26 03:59:42.604 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 1260 ---> 472
2024-04-26 03:59:42.606 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['init_sig_algs']
2024-04-26 03:59:42.607 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['init_sig_algs']
2024-04-26 03:59:42.607 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['init_sig_algs']
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:06<00:00,  1.53s/it]
2024-04-26 03:59:49.348 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9903776049613953, init_sig_algs ---> init_sig_algs
2024-04-26 03:59:49.349 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9881309270858765, init_sig_algs ---> init_sig_algs_cert
2024-04-26 03:59:49.349 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.981495201587677, init_sig_algs ---> init_srp
2024-04-26 03:59:49.349 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 14 ---> 3
2024-04-26 03:59:49.350 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 03:59:49.455 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.002344433858525008, fix prob: 2.9976555705070496
2024-04-26 03:59:49.455 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 03:59:49.456 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 03:59:49.456 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 03:59:49.456 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 03:59:49.456 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 327 CVE-2021-3450
filter_and_generate_data_items: 100%|██████████| 12664/12664 [00:04<00:00, 2923.62it/s]
2024-04-26 03:59:58.519 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 12664 ---> 224
2024-04-26 03:59:58.525 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['check_chain_extensions', 'test_alt_chains_cert_forgery']
2024-04-26 03:59:58.526 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['check_chain_extensions']
2024-04-26 03:59:58.527 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['check_chain_extensions']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.61s/it]
2024-04-26 04:00:02.178 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9346601963043213, check_chain_extensions ---> check_chain_extensions
2024-04-26 04:00:02.178 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 04:00:02.178 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:00:02.223 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.1645226925611496, fix prob: 0.8354772925376892
2024-04-26 04:00:02.224 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:00:02.224 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:00:02.224 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:00:02.224 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:00:02.225 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 328 CVE-2021-3711
filter_and_generate_data_items: 100%|██████████| 12664/12664 [00:04<00:00, 3139.15it/s]
2024-04-26 04:00:10.870 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 12664 ---> 572
2024-04-26 04:00:10.876 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['pkey_sm2_decrypt', 'test_sm2_crypt']
2024-04-26 04:00:10.877 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['pkey_sm2_decrypt']
2024-04-26 04:00:10.877 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['pkey_sm2_decrypt']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.65s/it]
2024-04-26 04:00:19.341 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7168005704879761, pkey_sm2_decrypt ---> pkey_sm2_encrypt
2024-04-26 04:00:19.342 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 5 ---> 1
2024-04-26 04:00:19.342 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 04:00:19.342 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:00:19.342 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:00:19.343 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:00:19.343 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:00:19.343 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:00:19.343 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 329 CVE-2022-1343
filter_and_generate_data_items:  54%|█████▍    | 5636/10439 [00:01<00:01, 3419.61it/s]2024-04-26 04:00:25.528 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ocsp_verify_signer, 1, 6
2024-04-26 04:00:25.530 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int ocsp_verify_signer(X509 *signer, int response,', 'X509_STORE *st, unsigned long flags,', 'STACK_OF(X509) *untrusted, STACK_OF(X509) **chain)', '{', 'X509_STORE_CTX *ctx = X509_STORE_CTX_new();', 'X509_VERIFY_PARAM *vp;', 'int ret = -1;', 'if (ctx == NULL) {', 'ERR_raise(ERR_LIB_OCSP, ERR_R_MALLOC_FAILURE);', 'goto end;', '}', 'if (!X509_STORE_CTX_init(ctx, st, signer, untrusted)) {', 'ERR_raise(ERR_LIB_OCSP, ERR_R_X509_LIB);', 'goto end;', '}', 'if ((vp = X509_STORE_CTX_get0_param(ctx)) == NULL)', 'goto end;', 'if ((flags & OCSP_PARTIAL_CHAIN) != 0)', 'X509_VERIFY_PARAM_set_flags(vp, X509_V_FLAG_PARTIAL_CHAIN);', 'if (response', '&& X509_get_ext_by_NID(signer, NID_id_pkix_OCSP_noCheck, -1) >= 0)', 'X509_VERIFY_PARAM_clear_flags(vp, X509_V_FLAG_CRL_CHECK);', 'X509_STORE_CTX_set_purpose(ctx, X509_PURPOSE_OCSP_HELPER);', 'X509_STORE_CTX_set_trust(ctx, X509_TRUST_OCSP_REQUEST);', 'ret = X509_verify_cert(ctx);', 'if (ret <= 0) {', 'ret = X509_STORE_CTX_get_error(ctx);', 'ERR_raise_data(ERR_LIB_OCSP, OCSP_R_CERTIFICATE_VERIFY_ERROR,', '"STR", X509_verify_cert_error_string(ret));', 'goto end;', '}', 'if (chain != NULL)', '*chain = X509_STORE_CTX_get1_chain(ctx);', 'end:', 'X509_STORE_CTX_free(ctx);', 'return ret;', '}']
2024-04-26 04:00:25.531 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x50', 'mov <MEM>,rdi', 'mov <MEM>,esi', 'mov <MEM>,rdx', 'mov <MEM>,rcx', 'mov <MEM>,r8', 'mov <MEM>,r9', 'call <x509_store_ctx_new>', 'mov <MEM>,rax', 'mov <MEM>,0xffffffff', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x27', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0xc0100', 'mov edi,0x27', 'mov eax,0x0', 'call <err_set_error>', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <x509_store_ctx_init>', 'test eax,eax', '<JUMP> <LOC>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x2b', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0x8000b', 'mov edi,0x27', 'mov eax,0x0', 'call <err_set_error>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <x509_store_ctx_get0_param>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'and eax,0x1000', 'test rax,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov esi,0x80000', 'mov rdi,rax', 'call <x509_verify_param_set_flags>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,0xffffffff', 'mov esi,0x171', 'mov rdi,rax', 'call <x509_get_ext_by_nid>', 'test eax,eax', 'js 286c9b <ocsp_verify_signer+OFFSET>', 'mov rax,<MEM>', 'mov esi,0x4', 'mov rdi,rax', 'call <x509_verify_param_clear_flags>', 'mov rax,<MEM>', 'mov esi,0x8', 'mov rdi,rax', 'call <x509_store_ctx_set_purpose>', 'mov rax,<MEM>', 'mov esi,0x7', 'mov rdi,rax', 'call <x509_store_ctx_set_trust>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <x509_verify_cert>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <x509_store_ctx_get_error>', 'mov <MEM>,eax', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x3f', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov eax,<MEM>', 'cdqe', 'mov rdi,rax', 'call <x509_verify_cert_error_string>', 'mov rcx,rax', 'lea rdx,<MEM>', 'mov esi,0x65', 'mov edi,0x27', 'mov eax,0x0', 'call <err_set_error>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <x509_store_ctx_get1_chain>', 'mov rdx,<MEM>', 'mov <MEM>,rax', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'mov rax,<MEM>', 'mov rdi,rax', 'call <x509_store_ctx_free>', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 10439/10439 [00:03<00:00, 3042.67it/s]
2024-04-26 04:00:27.474 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10439 ---> 648
2024-04-26 04:00:27.478 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ocsp_verify_signer']
2024-04-26 04:00:27.479 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ocsp_verify_signer']
2024-04-26 04:00:27.479 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 6/6 [00:09<00:00,  1.52s/it]
2024-04-26 04:00:36.647 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 04:00:36.648 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 04:00:36.648 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:00:36.648 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:00:36.648 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 04:00:36.648 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:00:36.648 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 330 CVE-2022-2274
filter_and_generate_data_items: 100%|██████████| 10458/10458 [00:03<00:00, 2804.34it/s]
2024-04-26 04:00:45.138 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10458 ---> 392
2024-04-26 04:00:45.144 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_rsaz_mod_exp_avx512_x2']
2024-04-26 04:00:45.144 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_rsaz_mod_exp_avx512_x2']
2024-04-26 04:00:45.145 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['ossl_rsaz_mod_exp_avx512_x2']
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:05<00:00,  1.47s/it]
2024-04-26 04:00:51.037 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx ossl_rsaz_mod_exp_avx512_x2 ossl_rsaz_mod_exp_avx512_x2	0.7576093077659607	['mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov eax,<MEM>', 'add eax,0x2', 'mov esi,0x34', 'mov edi,eax', 'call <number_of_digits>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'imul eax,eax,0x34', 'sub eax,<MEM>', 'shl eax,0x2', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov edx,<MEM>', 'mov eax,edx', 'shl eax,0x3', 'sub eax,edx', 'cdqe', 'shl rax,0x3', 'mov <MEM>,rax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'cmp <MEM>,0x400', '<JUMP> <LOC>', 'lea rax,<MEM>', 'mov <MEM>,rax', 'lea rax,<MEM>', 'mov <MEM>,rax', 'nop', 'mov rax,<MEM>', 'add rax,0x40', 'mov edx,0xa3', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <crypto_malloc>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'and eax,0x3f', 'mov edx,0x40', 'sub rdx,rax', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'add eax,eax', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov edx,<MEM>', 'mov eax,edx', 'add eax,eax', 'add eax,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov eax,<MEM>', 'shl eax,0x2', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov edx,<MEM>', 'mov eax,edx', 'shl eax,0x2', 'add eax,edx', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov edx,<MEM>', 'mov eax,edx', 'add eax,eax', 'add eax,edx', 'add eax,eax', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'mov <MEM>,rax', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <to_words52>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <to_words52>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <to_words52>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <to_words52>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <to_words52>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <to_words52>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'mov esi,0x0', 'mov rdi,rax', 'call <memset@plt>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'imul rdx,rdx,0x4ec4ec4f', 'shr rdx,0x20', 'sar edx,0x4', 'sar eax,0x1f', 'sub edx,eax', 'mov eax,edx', 'shl eax,0x6', 'mov ecx,eax', 'mov eax,<MEM>', 'movsxd rdx,eax', 'imul rdx,rdx,0x4ec4ec4f', 'shr rdx,0x20', 'mov esi,edx', 'sar esi,0x4', 'cdq', 'sub esi,edx', 'mov edx,esi', 'imul edx,edx,0x34', 'sub eax,edx', 'mov edx,eax', 'add edx,ecx', 'mov rax,<MEM>', 'mov esi,edx', 'mov rdi,rax', 'call <set_bit>', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call r9', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call r9', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call r9', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r9,<MEM>', 'mov r8,rdi', 'mov rdi,rax', 'call r9', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'lea r8,<MEM>', 'mov rdi,<MEM>', 'mov rcx,<MEM>', 'lea rdx,<MEM>', 'mov rsi,<MEM>', 'mov rax,<MEM>', 'mov r10,<MEM>', 'mov r9,r8', 'mov r8,rdi', 'mov rdi,rax', 'call r10', 'mov rdx,<MEM>', 'mov ecx,<MEM>', 'mov rax,<MEM>', 'mov esi,ecx', 'mov rdi,rax', 'call <from_words52>', 'mov rdx,<MEM>', 'mov ecx,<MEM>', 'mov rax,<MEM>', 'mov esi,ecx', 'mov rdi,rax', 'call <from_words52>', 'mov eax,<MEM>', 'movsxd rsi,eax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov r8,rsi', 'mov esi,0x0', 'mov rdi,rax', 'call <bn_reduce_once_in_place>', 'mov eax,<MEM>', 'movsxd rsi,eax', 'mov rcx,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov r8,rsi', 'mov esi,0x0', 'mov rdi,rax', 'call <bn_reduce_once_in_place>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <openssl_cleanse>', 'mov rax,<MEM>', 'mov edx,0xe6', 'lea rsi,<MEM>', 'mov rdi,rax', 'call <crypto_free>', 'mov eax,<MEM>', 'mov rdi,<MEM>', 'xor rdi,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 04:00:51.044 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 04:00:51.045 | SUCCESS  | __main__:run_tc:480 - confirm summary: True False False False
2024-04-26 04:00:51.045 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:00:51.045 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:00:51.045 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 04:00:51.045 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:00:51.045 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 331 CVE-2022-3358
filter_and_generate_data_items: 100%|██████████| 10458/10458 [00:03<00:00, 3080.54it/s]
2024-04-26 04:00:59.176 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10458 ---> 143
2024-04-26 04:00:59.178 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['evp_md_init_internal']
2024-04-26 04:00:59.179 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['evp_md_init_internal']
2024-04-26 04:00:59.179 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['evp_md_init_internal']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.17s/it]
2024-04-26 04:01:02.442 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.8867725729942322, evp_md_init_internal ---> evp_md_init_internal
2024-04-26 04:01:02.442 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 04:01:02.442 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:01:02.443 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:01:02.443 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:01:02.443 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:01:02.443 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:01:02.443 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:01:02.444 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 332 CVE-2022-3602
filter_and_generate_data_items:  51%|█████     | 5301/10478 [00:01<00:01, 3110.08it/s]2024-04-26 04:01:08.554 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ossl_punycode_decode, 4, 5
2024-04-26 04:01:08.555 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['int ossl_punycode_decode(const char *pEncoded, const size_t enc_len,', 'unsigned int *pDecoded, unsigned int *pout_length)', '{', 'unsigned int n = initial_n;', 'unsigned int i = 0;', 'unsigned int bias = initial_bias;', 'size_t processed_in = 0, written_out = 0;', 'unsigned int max_out = *pout_length;', 'unsigned int basic_count = 0;', 'unsigned int loop;', 'for (loop = 0; loop < enc_len; loop++) {', 'if (pEncoded[loop] == delimiter)', 'basic_count = loop;', '}', 'if (basic_count > 0) {', 'if (basic_count > max_out)', 'return 0;', 'for (loop = 0; loop < basic_count; loop++) {', 'if (is_basic(pEncoded[loop]) == 0)', 'return 0;', 'pDecoded[loop] = pEncoded[loop];', 'written_out++;', '}', 'processed_in = basic_count + 1;', '}', 'for (loop = processed_in; loop < enc_len;) {', 'unsigned int oldi = i;', 'unsigned int w = 1;', 'unsigned int k, t;', 'int digit;', 'for (k = base;; k += base) {', 'if (loop >= enc_len)', 'return 0;', 'digit = digit_decoded(pEncoded[loop]);', 'loop++;', 'if (digit < 0)', 'return 0;', 'if ((unsigned int)digit > (maxint - i) / w)', 'return 0;', 'i = i + digit * w;', 't = (k <= bias) ? tmin : (k >= bias + tmax) ? tmax : k - bias;', 'if ((unsigned int)digit < t)', 'break;', 'if (w > maxint / (base - t))', 'return 0;', 'w = w * (base - t);', '}', 'bias = adapt(i - oldi, written_out + 1, (oldi == 0));', 'if (i / (written_out + 1) > maxint - n)', 'return 0;', 'n = n + i / (written_out + 1);', 'i %= (written_out + 1);', 'if (written_out > max_out)', 'return 0;', 'memmove(pDecoded + i + 1, pDecoded + i,', '(written_out - i) * sizeof *pDecoded);', 'pDecoded[i] = n;', 'i++;', 'written_out++;', '}', '*pout_length = written_out;', 'return 1;', '}']
2024-04-26 04:01:08.555 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x60', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov <MEM>,rcx', 'mov <MEM>,0x80', 'mov <MEM>,0x0', 'mov <MEM>,0x48', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'mov edx,0x2d', 'cmp al,dl', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'movsx eax,al', 'mov edi,eax', 'call <is_basic>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'add rdx,rcx', 'movsx eax,al', 'mov <MEM>,eax', 'add <MEM>,0x1', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov eax,eax', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x1', 'mov <MEM>,0x24', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'movzx eax,al', 'mov edi,eax', 'call <digit_decoded>', 'mov <MEM>,eax', 'add <MEM>,0x1', 'cmp <MEM>,0x0', 'jns 27060a <ossl_punycode_decode+OFFSET>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,0xffffffff', 'sub eax,<MEM>', 'mov edx,0x0', 'div <MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'add <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov edx,0x1a', 'mov eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x1a', '<JUMP> <LOC>', 'mov eax,0x1', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', 'mov edx,0x24', 'mov esi,edx', 'sub esi,<MEM>', 'mov edx,0x0', 'div esi', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,0x24', 'sub eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,0x24', 'add <MEM>,eax', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', 'sete al', 'movzx edx,al', 'mov rax,<MEM>', 'lea ecx,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov esi,ecx', 'mov edi,eax', 'call <adapt>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'lea rdi,<MEM>', 'mov edx,0x0', 'div rdi', 'mov rdx,rax', 'mov eax,0xffffffff', 'sub eax,<MEM>', 'mov eax,eax', 'cmp rdx,rax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov edx,0x0', 'div rsi', 'add <MEM>,eax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'lea rcx,<MEM>', 'mov edx,0x0', 'div rcx', 'mov rax,rdx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'sub rdx,rax', 'mov rax,rdx', 'lea rdx,<MEM>', 'mov eax,<MEM>', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'add rcx,rax', 'mov eax,<MEM>', 'add rax,0x1', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'add rax,rsi', 'mov rsi,rcx', 'mov rdi,rax', 'call <memmove@plt>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rdx,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'add <MEM>,0x1', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 10478/10478 [00:03<00:00, 3014.71it/s]
2024-04-26 04:01:10.597 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10478 ---> 479
2024-04-26 04:01:10.602 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_punycode_decode']
2024-04-26 04:01:10.602 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_punycode_decode']
2024-04-26 04:01:10.603 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:06<00:00,  1.68s/it]
2024-04-26 04:01:17.355 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 04:01:17.355 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 04:01:17.355 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:01:17.356 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:01:17.356 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 04:01:17.356 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:01:17.356 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 333 CVE-2022-3786
filter_and_generate_data_items:  49%|████▉     | 5153/10478 [00:01<00:01, 3346.40it/s]2024-04-26 04:01:23.527 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: ossl_punycode_decode, 4, 5
2024-04-26 04:01:23.529 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['int ossl_punycode_decode(const char *pEncoded, const size_t enc_len,', 'unsigned int *pDecoded, unsigned int *pout_length)', '{', 'unsigned int n = initial_n;', 'unsigned int i = 0;', 'unsigned int bias = initial_bias;', 'size_t processed_in = 0, written_out = 0;', 'unsigned int max_out = *pout_length;', 'unsigned int basic_count = 0;', 'unsigned int loop;', 'for (loop = 0; loop < enc_len; loop++) {', 'if (pEncoded[loop] == delimiter)', 'basic_count = loop;', '}', 'if (basic_count > 0) {', 'if (basic_count > max_out)', 'return 0;', 'for (loop = 0; loop < basic_count; loop++) {', 'if (is_basic(pEncoded[loop]) == 0)', 'return 0;', 'pDecoded[loop] = pEncoded[loop];', 'written_out++;', '}', 'processed_in = basic_count + 1;', '}', 'for (loop = processed_in; loop < enc_len;) {', 'unsigned int oldi = i;', 'unsigned int w = 1;', 'unsigned int k, t;', 'int digit;', 'for (k = base;; k += base) {', 'if (loop >= enc_len)', 'return 0;', 'digit = digit_decoded(pEncoded[loop]);', 'loop++;', 'if (digit < 0)', 'return 0;', 'if ((unsigned int)digit > (maxint - i) / w)', 'return 0;', 'i = i + digit * w;', 't = (k <= bias) ? tmin : (k >= bias + tmax) ? tmax : k - bias;', 'if ((unsigned int)digit < t)', 'break;', 'if (w > maxint / (base - t))', 'return 0;', 'w = w * (base - t);', '}', 'bias = adapt(i - oldi, written_out + 1, (oldi == 0));', 'if (i / (written_out + 1) > maxint - n)', 'return 0;', 'n = n + i / (written_out + 1);', 'i %= (written_out + 1);', 'if (written_out > max_out)', 'return 0;', 'memmove(pDecoded + i + 1, pDecoded + i,', '(written_out - i) * sizeof *pDecoded);', 'pDecoded[i] = n;', 'i++;', 'written_out++;', '}', '*pout_length = written_out;', 'return 1;', '}']
2024-04-26 04:01:23.530 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x60', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov <MEM>,rcx', 'mov <MEM>,0x80', 'mov <MEM>,0x0', 'mov <MEM>,0x48', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'mov edx,0x2d', 'cmp al,dl', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'movsx eax,al', 'mov edi,eax', 'call <is_basic>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'mov edx,<MEM>', 'lea rcx,<MEM>', 'mov rdx,<MEM>', 'add rdx,rcx', 'movsx eax,al', 'mov <MEM>,eax', 'add <MEM>,0x1', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov eax,<MEM>', 'add eax,0x1', 'mov eax,eax', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov <MEM>,0x1', 'mov <MEM>,0x24', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'add rax,rdx', 'movzx eax,<MEM>', 'movzx eax,al', 'mov edi,eax', 'call <digit_decoded>', 'mov <MEM>,eax', 'add <MEM>,0x1', 'cmp <MEM>,0x0', 'jns 27060a <ossl_punycode_decode+OFFSET>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,0xffffffff', 'sub eax,<MEM>', 'mov edx,0x0', 'div <MEM>', 'mov edx,eax', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'imul eax,<MEM>', 'add <MEM>,eax', 'mov eax,<MEM>', 'cmp eax,<MEM>', '<JUMP> <LOC>', 'mov edx,0x1a', 'mov eax,<MEM>', 'add eax,edx', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,<MEM>', 'sub eax,<MEM>', '<JUMP> <LOC>', 'mov eax,0x1a', '<JUMP> <LOC>', 'mov eax,0x1', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', 'mov edx,0x24', 'mov esi,edx', 'sub esi,<MEM>', 'mov edx,0x0', 'div esi', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,0x24', 'sub eax,<MEM>', 'mov edx,<MEM>', 'imul eax,edx', 'mov <MEM>,eax', 'mov eax,0x24', 'add <MEM>,eax', '<JUMP> <LOC>', 'nop', 'cmp <MEM>,0x0', 'sete al', 'movzx edx,al', 'mov rax,<MEM>', 'lea ecx,<MEM>', 'mov eax,<MEM>', 'sub eax,<MEM>', 'mov esi,ecx', 'mov edi,eax', 'call <adapt>', 'mov <MEM>,eax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'lea rdi,<MEM>', 'mov edx,0x0', 'div rdi', 'mov rdx,rax', 'mov eax,0xffffffff', 'sub eax,<MEM>', 'mov eax,eax', 'cmp rdx,rax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'lea rsi,<MEM>', 'mov edx,0x0', 'div rsi', 'add <MEM>,eax', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'lea rcx,<MEM>', 'mov edx,0x0', 'div rcx', 'mov rax,rdx', 'mov <MEM>,eax', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov eax,<MEM>', 'mov rdx,<MEM>', 'sub rdx,rax', 'mov rax,rdx', 'lea rdx,<MEM>', 'mov eax,<MEM>', 'lea rcx,<MEM>', 'mov rax,<MEM>', 'add rcx,rax', 'mov eax,<MEM>', 'add rax,0x1', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'add rax,rsi', 'mov rsi,rcx', 'mov rdi,rax', 'call <memmove@plt>', 'mov eax,<MEM>', 'lea rdx,<MEM>', 'mov rax,<MEM>', 'add rdx,rax', 'mov eax,<MEM>', 'mov <MEM>,eax', 'add <MEM>,0x1', 'add <MEM>,0x1', 'mov eax,<MEM>', 'cmp <MEM>,rax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov eax,0x1', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 10478/10478 [00:03<00:00, 2881.65it/s]
2024-04-26 04:01:25.726 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10478 ---> 479
2024-04-26 04:01:25.733 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_punycode_decode']
2024-04-26 04:01:25.733 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_punycode_decode']
2024-04-26 04:01:25.734 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:06<00:00,  1.62s/it]
2024-04-26 04:01:32.264 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 0 ---> 0
2024-04-26 04:01:32.265 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 04:01:32.265 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:01:32.265 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:01:32.265 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: False, is_fixed: False
2024-04-26 04:01:32.266 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:01:32.266 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 334 CVE-2022-4304
filter_and_generate_data_items: 100%|██████████| 10485/10485 [00:03<00:00, 2988.53it/s]
2024-04-26 04:01:40.651 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10485 ---> 177
2024-04-26 04:01:40.657 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['rsa_ossl_private_decrypt']
2024-04-26 04:01:40.658 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['rsa_ossl_private_decrypt']
2024-04-26 04:01:40.658 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['rsa_ossl_private_decrypt']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:02<00:00,  1.33s/it]
2024-04-26 04:01:44.917 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7949248552322388, rsa_ossl_private_decrypt ---> rsa_ossl_private_decrypt
2024-04-26 04:01:44.918 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 04:01:44.918 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:01:44.918 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:01:44.919 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:01:44.919 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:01:44.919 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:01:44.919 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:01:44.919 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 335 CVE-2022-4450
filter_and_generate_data_items: 100%|██████████| 10485/10485 [00:03<00:00, 3072.42it/s]
2024-04-26 04:01:53.104 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10485 ---> 394
2024-04-26 04:01:53.108 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['PEM_read_bio_ex']
2024-04-26 04:01:53.109 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['PEM_read_bio_ex']
2024-04-26 04:01:53.109 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PEM_read_bio_ex']
confirming functions(batch_size: 128):: 100%|██████████| 4/4 [00:05<00:00,  1.45s/it]
2024-04-26 04:01:59.304 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9958118200302124, PEM_read_bio_ex ---> PEM_read_bio_ex
2024-04-26 04:01:59.304 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 04:01:59.305 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:01:59.342 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.04416531324386597, fix prob: 0.955834686756134
2024-04-26 04:01:59.342 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:01:59.343 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:01:59.343 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:01:59.343 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:01:59.343 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 336 CVE-2023-0215
filter_and_generate_data_items: 100%|██████████| 10485/10485 [00:03<00:00, 2792.31it/s]
2024-04-26 04:02:07.834 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10485 ---> 926
2024-04-26 04:02:07.838 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['*BIO_new_NDEF']
2024-04-26 04:02:07.839 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ndef_suffix', 'BIO_new_NDEF']
2024-04-26 04:02:07.840 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['BIO_new_NDEF']
confirming functions(batch_size: 128):: 100%|██████████| 8/8 [00:13<00:00,  1.67s/it]
2024-04-26 04:02:24.562 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8549009561538696, BIO_new_NDEF ---> X509_REQ_to_X509
2024-04-26 04:02:24.563 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 8 ---> 1
2024-04-26 04:02:24.563 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 04:02:24.631 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.41532421112060547, fix prob: 0.5846757888793945
2024-04-26 04:02:24.631 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:02:24.631 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:02:24.631 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:02:24.631 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:02:24.632 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 337 CVE-2023-0216
filter_and_generate_data_items: 100%|██████████| 10485/10485 [00:03<00:00, 2998.18it/s]
2024-04-26 04:02:32.844 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10485 ---> 1223
2024-04-26 04:02:32.848 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_pkcs7_resolve_libctx']
2024-04-26 04:02:32.849 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_pkcs7_resolve_libctx']
2024-04-26 04:02:32.850 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['ossl_pkcs7_resolve_libctx']
confirming functions(batch_size: 128):: 100%|██████████| 10/10 [00:17<00:00,  1.75s/it]
2024-04-26 04:02:50.847 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6107513904571533, ossl_pkcs7_resolve_libctx ---> ossl_cms_resolve_libctx
2024-04-26 04:02:50.847 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 1
2024-04-26 04:02:50.847 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 04:02:50.848 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:02:50.848 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:02:50.848 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:02:50.848 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:02:50.849 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:02:50.849 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 338 CVE-2023-0217
filter_and_generate_data_items: 100%|██████████| 41940/41940 [00:12<00:00, 3486.62it/s]
2024-04-26 04:03:07.679 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 41940 ---> 2705
2024-04-26 04:03:07.693 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_ffc_validate_public_key_partial', 'ossl_ffc_validate_private_key', 'ffc_public_validate_test', 'ffc_private_validate_test']
2024-04-26 04:03:07.694 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_ffc_validate_public_key_partial', 'ossl_ffc_validate_private_key']
2024-04-26 04:03:07.694 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['ossl_ffc_validate_public_key_partial', 'ossl_ffc_validate_private_key']
confirming functions(batch_size: 128):: 100%|██████████| 22/22 [00:38<00:00,  1.74s/it]
2024-04-26 04:03:47.748 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.8360695242881775, ossl_ffc_validate_public_key_partial ---> ec_param_explicit_to_text
2024-04-26 04:03:47.748 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.7216566801071167, ossl_ffc_validate_private_key ---> ossl_ffc_validate_public_key
2024-04-26 04:03:47.749 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 11 ---> 2
2024-04-26 04:03:47.749 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 04:03:47.749 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:03:47.750 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:03:47.750 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:03:47.750 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:03:47.750 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:03:47.750 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 339 CVE-2023-0286
filter_and_generate_data_items:  69%|██████▉   | 7277/10485 [00:02<00:01, 2621.19it/s]2024-04-26 04:03:54.779 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: GENERAL_NAME_cmp, 2, 3
2024-04-26 04:03:54.780 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)', '{', 'int result = -1;', 'if (!a || !b || a->type != b->type)', 'return -1;', 'switch (a->type) {', 'case GEN_X400:', 'result = ASN1_TYPE_cmp(a->d.x400Address, b->d.x400Address);', 'break;', 'case GEN_EDIPARTY:', 'result = edipartyname_cmp(a->d.ediPartyName, b->d.ediPartyName);', 'break;', 'case GEN_OTHERNAME:', 'result = OTHERNAME_cmp(a->d.otherName, b->d.otherName);', 'break;', 'case GEN_EMAIL:', 'case GEN_DNS:', 'case GEN_URI:', 'result = ASN1_STRING_cmp(a->d.ia5, b->d.ia5);', 'break;', 'case GEN_DIRNAME:', 'result = X509_NAME_cmp(a->d.dirn, b->d.dirn);', 'break;', 'case GEN_IPADD:', 'result = ASN1_OCTET_STRING_cmp(a->d.ip, b->d.ip);', 'break;', 'case GEN_RID:', 'result = OBJ_cmp(a->d.rid, b->d.rid);', 'break;', '}', 'return result;', '}']
2024-04-26 04:03:54.781 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'sub rsp,0x20', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,0xffffffff', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov edx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp edx,eax', '<JUMP> <LOC>', 'mov eax,0xffffffff', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cmp eax,0x8', '<JUMP> <LOC>', 'mov eax,eax', 'lea rdx,<MEM>', 'lea rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'lea rdx,<MEM>', 'add rax,rdx', 'notrack jmp rax', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <asn1_type_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <edipartyname_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <othername_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <asn1_string_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <x509_name_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <asn1_octet_string_cmp>', 'mov <MEM>,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <obj_cmp>', 'mov <MEM>,eax', 'nop', 'mov eax,<MEM>', 'leave', 'ret']
filter_and_generate_data_items: 100%|██████████| 10485/10485 [00:03<00:00, 3010.62it/s]
2024-04-26 04:03:56.030 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10485 ---> 1184
2024-04-26 04:03:56.035 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['GENERAL_NAME_cmp']
2024-04-26 04:03:56.036 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['GENERAL_NAME_cmp']
2024-04-26 04:03:56.037 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: []
confirming functions(batch_size: 128):: 100%|██████████| 10/10 [00:17<00:00,  1.73s/it]
2024-04-26 04:04:13.573 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.662174642086029, GENERAL_NAME_cmp ---> X509_check_akid
2024-04-26 04:04:13.573 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 04:04:13.573 | SUCCESS  | __main__:run_tc:480 - confirm summary: False False False False
2024-04-26 04:04:13.574 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:04:13.574 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:04:13.574 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:04:13.574 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:04:13.575 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:04:13.575 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 340 CVE-2023-0401
filter_and_generate_data_items: 100%|██████████| 20970/20970 [00:06<00:00, 3297.09it/s]
2024-04-26 04:04:24.710 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 20970 ---> 978
2024-04-26 04:04:24.718 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['pkcs7_bio_add_digest', '*PKCS7_dataDecode']
2024-04-26 04:04:24.718 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['pkcs7_bio_add_digest', 'PKCS7_dataDecode']
2024-04-26 04:04:24.719 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['pkcs7_bio_add_digest', 'PKCS7_dataDecode']
confirming functions(batch_size: 128):: 100%|██████████| 8/8 [00:14<00:00,  1.78s/it]
2024-04-26 04:04:41.752 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9940061569213867, pkcs7_bio_add_digest ---> evp_md_from_algorithm
2024-04-26 04:04:41.753 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9917662739753723, PKCS7_dataDecode ---> X509_print_ex
2024-04-26 04:04:41.753 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9896034002304077, PKCS7_dataDecode ---> OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert
2024-04-26 04:04:41.753 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9769212603569031, PKCS7_dataDecode ---> PKCS7_dataDecode
2024-04-26 04:04:41.753 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 7 ---> 4
2024-04-26 04:04:41.753 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 04:04:42.032 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0012285288557905005, fix prob: 3.9987713098526
2024-04-26 04:04:42.032 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:04:42.032 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:04:42.033 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:04:42.033 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:04:42.033 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 04:04:42.033 | SUCCESS  | __main__:run_experiment:651 - 	total: 340
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:652 - over filter count: 36, 10.59%
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 280, 82.35%
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 238, 70.0%
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 181, 53.24%
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 50, 14.71%
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:662 - 	tp: 50, fp: 0, tn: 0, fn: 290
2024-04-26 04:04:42.034 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 04:04:42.035 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.14705882352941177
2024-04-26 04:04:42.035 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.25641025641025644
2024-04-26 04:04:42.035 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.14705882352941177
generate_asm_function_cache: 100%|██████████| 5/5 [00:14<00:00,  2.82s/it]
2024-04-26 04:05:01.696 | SUCCESS  | __main__:run_experiment:643 - asm functions cache generated
2024-04-26 04:05:01.697 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 341 CVE-2023-0464
filter_and_generate_data_items:  78%|███████▊  | 49677/63360 [00:17<00:05, 2534.41it/s]2024-04-26 04:05:27.791 | WARNING  | __main__:generate_model_input:100 - 		missing vul function:: tree_calculate_user_set, 1, 3
2024-04-26 04:05:27.792 | WARNING  | __main__:generate_model_input:102 - 		src codes: ['static int tree_calculate_user_set(X509_POLICY_TREE *tree,', 'STACK_OF(ASN1_OBJECT) *policy_oids,', 'STACK_OF(X509_POLICY_NODE) *auth_nodes)', '{', 'int i;', 'X509_POLICY_NODE *node;', 'ASN1_OBJECT *oid;', 'X509_POLICY_NODE *anyPolicy;', 'X509_POLICY_DATA *extra;', 'if (sk_ASN1_OBJECT_num(policy_oids) <= 0)', 'return 1;', 'anyPolicy = tree->levels[tree->nlevel - 1].anyPolicy;', 'for (i = 0; i < sk_ASN1_OBJECT_num(policy_oids); i++) {', 'oid = sk_ASN1_OBJECT_value(policy_oids, i);', 'if (OBJ_obj2nid(oid) == NID_any_policy) {', 'tree->flags |= POLICY_FLAG_ANY_POLICY;', 'return 1;', '}', '}', 'for (i = 0; i < sk_ASN1_OBJECT_num(policy_oids); i++) {', 'oid = sk_ASN1_OBJECT_value(policy_oids, i);', 'node = ossl_policy_tree_find_sk(auth_nodes, oid);', 'if (!node) {', 'if (!anyPolicy)', 'continue;', 'extra = ossl_policy_data_new(NULL, oid, node_critical(anyPolicy));', 'if (extra == NULL)', 'return 0;', 'extra->qualifier_set = anyPolicy->data->qualifier_set;', 'extra->flags = POLICY_DATA_FLAG_SHARED_QUALIFIERS', '| POLICY_DATA_FLAG_EXTRA_NODE;', 'node = ossl_policy_level_add_node(NULL, extra, anyPolicy->parent,', 'tree);', '}', 'if (!tree->user_policies) {', 'tree->user_policies = sk_X509_POLICY_NODE_new_null();', 'if (!tree->user_policies)', 'return 1;', '}', 'if (!sk_X509_POLICY_NODE_push(tree->user_policies, node))', 'return 0;', '}', 'return 1;', '}']
2024-04-26 04:05:27.792 | WARNING  | __main__:generate_model_input:103 - 		asm codes: ['endbr64', 'push rbp', 'mov rbp,rsp', 'push rbx', 'sub rsp,0x58', 'mov <MEM>,rdi', 'mov <MEM>,rsi', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_const_asn1_object_sk_type>', 'mov rdi,rax', 'call <openssl_sk_num>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'cdqe', 'shl rax,0x5', 'sub rax,0x20', 'add rax,rdx', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_const_asn1_object_sk_type>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov esi,eax', 'mov rdi,rdx', 'call <openssl_sk_value>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <obj_obj2nid>', 'cmp eax,0x2ea', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'or eax,0x2', 'mov edx,eax', 'mov rax,<MEM>', 'mov <MEM>,edx', 'mov eax,0x1', '<JUMP> <LOC>', 'add <MEM>,0x1', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_const_asn1_object_sk_type>', 'mov rdi,rax', 'call <openssl_sk_num>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_const_asn1_object_sk_type>', 'mov rdx,rax', 'mov eax,<MEM>', 'mov esi,eax', 'mov rdi,rdx', 'call <openssl_sk_value>', 'mov <MEM>,rax', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rdx', 'mov rdi,rax', 'call <ossl_policy_tree_find_sk>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'and eax,0x10', 'mov edx,eax', 'mov rax,<MEM>', 'mov rsi,rax', 'mov edi,0x0', 'call <ossl_policy_data_new>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rdx', 'mov rax,<MEM>', 'mov <MEM>,0xc', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rax', 'mov edi,0x0', 'call <ossl_policy_level_add_node>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'call <openssl_sk_new_null>', 'mov rdx,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov eax,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_x509_policy_node_type>', 'mov rbx,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_x509_policy_node_sk_type>', 'mov rsi,rbx', 'mov rdi,rax', 'call <openssl_sk_push>', 'test eax,eax', '<JUMP> <LOC>', 'mov eax,0x0', '<JUMP> <LOC>', 'nop', 'add <MEM>,0x1', 'mov rax,<MEM>', 'mov rdi,rax', 'call <ossl_check_const_asn1_object_sk_type>', 'mov rdi,rax', 'call <openssl_sk_num>', 'cmp <MEM>,eax', '<JUMP> <LOC>', 'mov eax,0x1', 'add rsp,0x58', 'pop rbx', 'pop rbp', 'ret']
filter_and_generate_data_items: 100%|██████████| 63360/63360 [00:22<00:00, 2862.10it/s]
2024-04-26 04:05:32.707 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 63360 ---> 7418
2024-04-26 04:05:32.716 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['*ossl_policy_level_add_node', 'tree_link_nodes', 'tree_add_unmatched', 'tree_link_any', 'tree_calculate_user_set', 'tree_evaluate']
2024-04-26 04:05:32.716 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_policy_level_find_node', 'ossl_policy_level_add_node', 'tree_link_nodes', 'tree_add_unmatched', 'tree_link_any', 'tree_calculate_user_set', 'tree_evaluate']
2024-04-26 04:05:32.717 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['ossl_policy_level_add_node', 'tree_link_nodes', 'tree_add_unmatched', 'tree_link_any', 'tree_evaluate']
confirming functions(batch_size: 128):: 100%|██████████| 58/58 [01:41<00:00,  1.75s/it]
2024-04-26 04:07:17.420 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9240496953328451, ossl_policy_level_add_node ---> ossl_policy_level_add_node
2024-04-26 04:07:17.420 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6899445056915283, tree_calculate_user_set ---> check_cert
2024-04-26 04:07:17.421 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.0, tree_evaluate ---> tree_evaluate
2024-04-26 04:07:17.421 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7209429740905762, tree_link_nodes ---> tree_link_nodes
2024-04-26 04:07:17.421 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9864838719367981, tree_add_unmatched ---> tree_add_unmatched
2024-04-26 04:07:17.421 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.45561179518699646, tree_link_any ---> tree_link_any
2024-04-26 04:07:17.421 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 11 ---> 6
2024-04-26 04:07:17.422 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 04:07:17.654 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.1858517974615097, fix prob: 1.8141482472419739
2024-04-26 04:07:17.655 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:07:17.655 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:07:17.655 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:07:17.655 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:07:17.655 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 342 CVE-2023-0465
filter_and_generate_data_items: 100%|██████████| 10560/10560 [00:04<00:00, 2284.97it/s]
2024-04-26 04:07:26.771 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10560 ---> 556
2024-04-26 04:07:26.778 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['check_policy']
2024-04-26 04:07:26.778 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['check_policy']
2024-04-26 04:07:26.779 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['check_policy']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.64s/it]
2024-04-26 04:07:35.336 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.5836957693099976, check_policy ---> check_policy
2024-04-26 04:07:35.336 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 04:07:35.337 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:07:35.337 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.0, fix prob: 0.0
2024-04-26 04:07:35.337 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:07:35.338 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:07:35.338 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:07:35.338 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:07:35.338 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 343 CVE-2023-2650
filter_and_generate_data_items: 100%|██████████| 10560/10560 [00:04<00:00, 2224.57it/s]
2024-04-26 04:07:44.575 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10560 ---> 231
2024-04-26 04:07:44.583 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['OBJ_obj2txt']
2024-04-26 04:07:44.584 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['OBJ_obj2txt']
2024-04-26 04:07:44.584 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['OBJ_obj2txt']
confirming functions(batch_size: 128):: 100%|██████████| 2/2 [00:03<00:00,  1.64s/it]
2024-04-26 04:07:48.262 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9886471629142761, OBJ_obj2txt ---> OBJ_obj2txt
2024-04-26 04:07:48.263 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 1 ---> 1
2024-04-26 04:07:48.263 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:07:48.336 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.00046459640725515783, fix prob: 0.9995354413986206
2024-04-26 04:07:48.337 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:07:48.337 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:07:48.337 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:07:48.337 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:07:48.337 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 344 CVE-2023-2975
filter_and_generate_data_items: 100%|██████████| 10547/10547 [00:04<00:00, 2609.60it/s]
2024-04-26 04:07:56.875 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10547 ---> 764
2024-04-26 04:07:56.881 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['siv_cipher']
2024-04-26 04:07:56.882 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['siv_cipher']
2024-04-26 04:07:56.883 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['siv_cipher']
confirming functions(batch_size: 128):: 100%|██████████| 6/6 [00:10<00:00,  1.77s/it]
2024-04-26 04:08:09.494 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9856663346290588, siv_cipher ---> ecdsa_sign
2024-04-26 04:08:09.494 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9839259386062622, siv_cipher ---> siv_cipher
2024-04-26 04:08:09.495 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9807217121124268, siv_cipher ---> aes_wrap_cipher
2024-04-26 04:08:09.495 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 20 ---> 3
2024-04-26 04:08:09.495 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 04:08:09.701 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.2790435552597046, fix prob: 1.720956414937973
2024-04-26 04:08:09.701 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:08:09.702 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:08:09.702 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:08:09.702 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:08:09.702 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 345 CVE-2023-3446
filter_and_generate_data_items: 100%|██████████| 10547/10547 [00:04<00:00, 2435.82it/s]
2024-04-26 04:08:18.437 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10547 ---> 601
2024-04-26 04:08:18.442 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['DH_check']
2024-04-26 04:08:18.443 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['DH_check']
2024-04-26 04:08:18.443 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['DH_check']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.70s/it]
2024-04-26 04:08:28.493 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9343047142028809, DH_check ---> ossl_ec_GFp_simple_group_check_discriminant
2024-04-26 04:08:28.493 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 6 ---> 1
2024-04-26 04:08:28.494 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True False False
2024-04-26 04:08:28.562 | SUCCESS  | __main__:run_tc:491 - vul prob: 2.964908162539359e-06, fix prob: 0.9999970197677612
2024-04-26 04:08:28.563 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:08:28.563 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:08:28.563 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:08:28.563 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:08:28.563 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 346 CVE-2023-3817
filter_and_generate_data_items: 100%|██████████| 10547/10547 [00:04<00:00, 2380.10it/s]
2024-04-26 04:08:37.678 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 10547 ---> 601
2024-04-26 04:08:37.683 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['DH_check']
2024-04-26 04:08:37.684 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['DH_check']
2024-04-26 04:08:37.685 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['DH_check']
confirming functions(batch_size: 128):: 100%|██████████| 5/5 [00:08<00:00,  1.64s/it]
2024-04-26 04:08:48.689 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.979881763458252, DH_check ---> DH_check
2024-04-26 04:08:48.689 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.965680718421936, DH_check ---> ossl_ec_GFp_simple_group_check_discriminant
2024-04-26 04:08:48.690 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 6 ---> 2
2024-04-26 04:08:48.690 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 04:08:49.000 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.622149446903336, fix prob: 3.3778505325317383
2024-04-26 04:08:49.000 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:08:49.001 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:08:49.001 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:08:49.001 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:08:49.001 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 347 CVE-2023-5678
filter_and_generate_data_items: 100%|██████████| 21006/21006 [00:06<00:00, 3300.41it/s]
2024-04-26 04:08:59.843 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 21006 ---> 905
2024-04-26 04:08:59.852 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['ossl_dh_compute_key', 'generate_key']
2024-04-26 04:08:59.853 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['ossl_dh_compute_key', 'generate_key']
2024-04-26 04:08:59.854 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['ossl_dh_compute_key', 'generate_key']
confirming functions(batch_size: 128):: 100%|██████████| 8/8 [00:12<00:00,  1.62s/it]
2024-04-26 04:09:13.645 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9952389001846313, ossl_dh_compute_key ---> ossl_dh_compute_key
2024-04-26 04:09:13.646 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9724559187889099, generate_key ---> generate_key
2024-04-26 04:09:13.646 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 3 ---> 2
2024-04-26 04:09:13.646 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:09:13.789 | SUCCESS  | __main__:run_tc:491 - vul prob: 1.7172660591313615e-06, fix prob: 1.9999983310699463
2024-04-26 04:09:13.789 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:09:13.789 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:09:13.789 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:09:13.789 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:09:13.790 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 348 CVE-2024-0727
filter_and_generate_data_items: 100%|██████████| 66456/66456 [00:23<00:00, 2835.35it/s]
2024-04-26 04:09:41.886 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 66456 ---> 8155
2024-04-26 04:09:41.900 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['*PKCS12_unpack_p7data', '*PKCS12_unpack_p7encdata', '*PKCS12_unpack_authsafes', 'pkcs12_gen_mac', 'newpass_p12', 'SMIME_write_PKCS7']
2024-04-26 04:09:41.900 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['PKCS12_unpack_p7data', 'PKCS12_unpack_p7encdata', 'PKCS12_unpack_authsafes', 'pkcs12_gen_mac', 'newpass_p12', 'SMIME_write_PKCS7']
2024-04-26 04:09:41.901 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['PKCS12_unpack_p7data', 'PKCS12_unpack_p7encdata', 'PKCS12_unpack_authsafes', 'pkcs12_gen_mac', 'newpass_p12', 'SMIME_write_PKCS7']
confirming functions(batch_size: 128):: 100%|██████████| 64/64 [01:50<00:00,  1.73s/it]
2024-04-26 04:11:32.588 | WARNING  | __main__:confirm_functions:308 - 	model 1 missed: xxxx pkcs12_gen_mac pkcs12_gen_mac	0.9889703989028931	['mov rax,fs:0x28', 'mov <MEM>,rax', 'xor eax,eax', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov <MEM>,0x0', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <obj_obj2nid>', 'cmp eax,0x15', '<JUMP> <LOC>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x61', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0x79', 'mov edi,0x23', 'mov eax,0x0', 'call <err_set_error>', 'mov eax,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <asn1_integer_get>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov edx,0x0', 'mov rsi,rcx', 'mov rdi,rax', 'call <x509_sig_get0>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov rcx,rdx', 'mov edx,0x0', 'mov esi,0x0', 'mov rdi,rax', 'call <x509_algor_get0>', 'mov rdx,<MEM>', 'lea rax,<MEM>', 'mov ecx,0x0', 'mov esi,0x50', 'mov rdi,rax', 'call <obj_obj2txt>', 'test eax,eax', 'jns 3690d7 <pkcs12_gen_mac+OFFSET>', 'mov eax,0x0', '<JUMP> <LOC>', 'call <err_set_mark>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdx,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'lea rcx,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <evp_md_fetch>', 'mov <MEM>,rax', 'mov rax,<MEM>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <obj_obj2nid>', 'mov edi,eax', 'call <obj_nid2sn>', 'mov rdi,rax', 'call <evp_get_digestbyname>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'call <err_clear_last_mark>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x78', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0x76', 'mov edi,0x23', 'mov eax,0x0', 'call <err_set_error>', 'mov eax,0x0', '<JUMP> <LOC>', 'call <err_pop_to_mark>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <evp_md_get_size>', 'mov <MEM>,eax', 'mov rax,<MEM>', 'mov rdi,rax', 'call <evp_md_get_type>', 'mov <MEM>,eax', 'cmp <MEM>,0x0', 'js 3694a9 <pkcs12_gen_mac+OFFSET>', 'cmp <MEM>,0x329', '<JUMP> <LOC>', 'cmp <MEM>,0x3d6', '<JUMP> <LOC>', 'cmp <MEM>,0x3d7', '<JUMP> <LOC>', 'lea rdi,<MEM>', 'call <ossl_safe_getenv>', 'test rax,rax', '<JUMP> <LOC>', 'mov <MEM>,0x20', 'mov r9d,<MEM>', 'mov r8d,<MEM>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'push <MEM>', 'lea rdi,<MEM>', 'push rdi', 'mov rdi,rax', 'call <pkcs12_gen_gost_mac_key>', 'add rsp,0x10', 'test eax,eax', '<JUMP> <LOC>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x88', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0x6b', 'mov edi,0x23', 'mov eax,0x0', 'call <err_set_error>', '<JUMP> <LOC>', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov r8d,<MEM>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push <MEM>', 'lea rdi,<MEM>', 'push rdi', 'mov edi,<MEM>', 'push rdi', 'mov r10,<MEM>', 'mov r9d,r8d', 'mov r8d,0x3', 'mov rdi,rax', 'call r10', 'add rsp,0x20', 'test eax,eax', '<JUMP> <LOC>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x8f', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0x6b', 'mov edi,0x23', 'mov eax,0x0', 'call <err_set_error>', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov r8,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rdi,<MEM>', 'mov r9d,<MEM>', 'mov ecx,<MEM>', 'mov rdx,<MEM>', 'mov esi,<MEM>', 'mov rax,<MEM>', 'sub rsp,0x8', 'push r8', 'push rdi', 'push <MEM>', 'lea rdi,<MEM>', 'push rdi', 'mov edi,<MEM>', 'push rdi', 'mov r8d,0x3', 'mov rdi,rax', 'call <pkcs12_key_gen_utf8_ex>', 'add rsp,0x30', 'test eax,eax', '<JUMP> <LOC>', 'call <err_new>', 'lea rdx,<MEM>', 'mov esi,0x98', 'lea rdi,<MEM>', 'call <err_set_debug>', 'mov edx,0x0', 'mov esi,0x6b', 'mov edi,0x23', 'mov eax,0x0', 'call <err_set_error>', '<JUMP> <LOC>', 'call <hmac_ctx_new>', 'mov <MEM>,rax', 'cmp <MEM>,0x0', '<JUMP> <LOC>', 'mov rcx,<MEM>', 'mov edx,<MEM>', 'lea rsi,<MEM>', 'mov rax,<MEM>', 'mov r8d,0x0', 'mov rdi,rax', 'call <hmac_init_ex>', 'test eax,eax', '<JUMP> <LOC>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov eax,<MEM>', 'movsxd rdx,eax', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rax,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <hmac_update>', 'test eax,eax', '<JUMP> <LOC>', 'mov rdx,<MEM>', 'mov rcx,<MEM>', 'mov rax,<MEM>', 'mov rsi,rcx', 'mov rdi,rax', 'call <hmac_final>', 'test eax,eax', '<JUMP> <LOC>', 'mov <MEM>,0x1', '<JUMP> <LOC>', 'nop', '<JUMP> <LOC>', 'nop', 'lea rax,<MEM>', 'mov esi,0x40', 'mov rdi,rax', 'call <openssl_cleanse>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <hmac_ctx_free>', 'mov rax,<MEM>', 'mov rdi,rax', 'call <evp_md_free>', 'mov eax,<MEM>', 'mov rcx,<MEM>', 'xor rcx,fs:0x28', '<JUMP> <LOC>', 'call <__stack_chk_fail@plt>', 'leave', 'ret']
2024-04-26 04:11:38.261 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9996993541717529, PKCS12_unpack_p7data ---> PKCS12_unpack_p7data
2024-04-26 04:11:38.261 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.997261643409729, PKCS12_unpack_p7data ---> PKCS12_unpack_authsafes
2024-04-26 04:11:38.262 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9967896342277527, PKCS12_unpack_p7data ---> EC_GROUP_get_degree
2024-04-26 04:11:38.262 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.6534245610237122, PKCS12_unpack_p7encdata ---> d2i_PKCS12_MAC_DATA
2024-04-26 04:11:38.262 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9728259444236755, PKCS12_unpack_authsafes ---> PKCS12_pack_p7data
2024-04-26 04:11:38.262 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9630588889122009, PKCS12_unpack_authsafes ---> PKCS12_unpack_authsafes
2024-04-26 04:11:38.262 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9025704264640808, pkcs12_gen_mac ---> PKCS5_pbkdf2_set_ex
2024-04-26 04:11:38.262 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9981650710105896, newpass_p12 ---> newpass_p12
2024-04-26 04:11:38.263 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.9964150190353394, newpass_p12 ---> ECPKParameters_print
2024-04-26 04:11:38.263 | WARNING  | __main__:locate_snippets:603 - confirmed functions: xxxxx , 0.99460768699646, newpass_p12 ---> evp_pkey_asym_cipher_init
2024-04-26 04:11:38.263 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.9139746427536011, SMIME_write_PKCS7 ---> SMIME_write_PKCS7
2024-04-26 04:11:38.263 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 44 ---> 11
2024-04-26 04:11:38.263 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True False
2024-04-26 04:11:38.970 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.4974375161142177, fix prob: 9.502562463283539
2024-04-26 04:11:38.970 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:11:38.971 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:11:38.971 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: False, has_vul_function: True, is_fixed: True
2024-04-26 04:11:38.971 | SUCCESS  | __main__:run_tc:513 - 		conclusion: FN
2024-04-26 04:11:38.971 | SUCCESS  | __main__:run_experiment:646 - confirm tc: 349 CVE-2016-9843
filter_and_generate_data_items: 100%|██████████| 135/135 [00:00<00:00, 1363.30it/s]
2024-04-26 04:11:43.511 | SUCCESS  | __main__:filter_and_generate_data_items:139 - filter: 135 ---> 28
2024-04-26 04:11:43.513 | SUCCESS  | __main__:confirm_functions:278 - 	vul function names: ['crc32_big']
2024-04-26 04:11:43.514 | SUCCESS  | __main__:confirm_functions:279 - 	bin vul function names: ['crc32_little', 'crc32_big']
2024-04-26 04:11:43.515 | SUCCESS  | __main__:confirm_functions:280 - 	found vul function names: ['crc32_big']
confirming functions(batch_size: 128):: 100%|██████████| 1/1 [00:00<00:00,  2.53it/s]
2024-04-26 04:11:46.366 | SUCCESS  | __main__:locate_snippets:600 - confirmed functions: ***** , 0.7159763276576996, crc32_big ---> crc32_big
2024-04-26 04:11:46.366 | SUCCESS  | __main__:run_tc:479 - confirmed functions: 2 ---> 1
2024-04-26 04:11:46.367 | SUCCESS  | __main__:run_tc:480 - confirm summary: True True True True
2024-04-26 04:11:46.409 | SUCCESS  | __main__:run_tc:491 - vul prob: 0.7523378729820251, fix prob: 0.24766209721565247
2024-04-26 04:11:46.410 | SUCCESS  | __main__:run_tc:508 - 	tc summary:
2024-04-26 04:11:46.410 | SUCCESS  | __main__:run_tc:509 - 		ground truth:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:11:46.410 | SUCCESS  | __main__:run_tc:511 - 		confirm result:	has_vul: True, has_vul_function: True, is_fixed: False
2024-04-26 04:11:46.410 | SUCCESS  | __main__:run_tc:513 - 		conclusion: TP
2024-04-26 04:11:46.411 | SUCCESS  | __main__:run_experiment:650 - test result:
2024-04-26 04:11:46.411 | SUCCESS  | __main__:run_experiment:651 - 	total: 349
2024-04-26 04:11:46.411 | SUCCESS  | __main__:run_experiment:652 - over filter count: 36, 10.32%
2024-04-26 04:11:46.411 | SUCCESS  | __main__:run_experiment:654 - model 1 find count: 289, 82.81%
2024-04-26 04:11:46.411 | SUCCESS  | __main__:run_experiment:656 - model 1 and 2 find count: 246, 70.49%
2024-04-26 04:11:46.412 | SUCCESS  | __main__:run_experiment:658 - model 1 and 2 precisely find count: 185, 53.01%
2024-04-26 04:11:46.412 | SUCCESS  | __main__:run_experiment:660 - model 3 find count: 51, 14.61%
2024-04-26 04:11:46.412 | SUCCESS  | __main__:run_experiment:662 - 	tp: 51, fp: 0, tn: 0, fn: 298
2024-04-26 04:11:46.412 | SUCCESS  | __main__:run_experiment:663 - 	precision: 1.0
2024-04-26 04:11:46.412 | SUCCESS  | __main__:run_experiment:664 - 	recall: 0.14613180515759314
2024-04-26 04:11:46.412 | SUCCESS  | __main__:run_experiment:665 - 	f1: 0.25500000000000006
2024-04-26 04:11:46.413 | SUCCESS  | __main__:run_experiment:666 - 	accuracy: 0.14613180515759314
2024-04-26 04:11:46.413 | SUCCESS  | __main__:run_experiment:669 - all done.

Process finished with exit code 0
